// Package goXml : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goXml

import (
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// TxsdLang defines type xsdLang
type TxsdLang xsdt.String

// Set : Since TxsdLang is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLang) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdLang is just a simple String type, this merely returns the current string value.
func (me TxsdLang) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdLang's alias type xsdt.String.
func (me TxsdLang) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrLang defines attribute Lang
type XAttrLang struct {
	Lang TxsdLang `xml:"http://www.w3.org/XML/1998/namespace lang,attr,omitempty"`
}

// TxsdSpace defines type xsdSpace
type TxsdSpace xsdt.NCName

// String : Since TxsdSpace is just a simple String type, this merely returns the current string value.
func (me TxsdSpace) String() string { return xsdt.NCName(me).String() }

// ToXsdtNCName : This convenience method just performs a simple type conversion to TxsdSpace's alias type xsdt.NCName.
func (me TxsdSpace) ToXsdtNCName() xsdt.NCName { return xsdt.NCName(me) }

// IsDefault : Returns true if the value of this enumerated TxsdSpace is "default".
func (me TxsdSpace) IsDefault() bool { return me.String() == "default" }

// IsPreserve : Returns true if the value of this enumerated TxsdSpace is "preserve".
func (me TxsdSpace) IsPreserve() bool { return me.String() == "preserve" }

// Set : Since TxsdSpace is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSpace) Set(s string) { (*xsdt.NCName)(me).Set(s) }

// XAttrSpace defines attribute Space
type XAttrSpace struct {
	Space TxsdSpace `xml:"http://www.w3.org/XML/1998/namespace space,attr,omitempty"`
}

// XAttrBase defines attribute Base
type XAttrBase struct {
	Base xsdt.AnyURI `xml:"http://www.w3.org/XML/1998/namespace base,attr,omitempty"`
}

// XAttrID defines attribute Id
type XAttrID struct {
	ID xsdt.ID `xml:"http://www.w3.org/XML/1998/namespace id,attr,omitempty"`
}

// XAttsSpecialAttrs defines XAttsSpecialAttrs
type XAttsSpecialAttrs struct {
	XAttrLang
	XAttrSpace
	XAttrID
	XAttrBase
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:"http://www.w3.org/XML/1998/namespace ,chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdLangTxsdLangUnion defines type xsdLangTxsdLangUnion
type TxsdLangTxsdLangUnion xsdt.String

// Set : Since TxsdLangTxsdLangUnion is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLangTxsdLangUnion) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdLangTxsdLangUnion is just a simple String type, this merely returns the current string value.
func (me TxsdLangTxsdLangUnion) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdLangTxsdLangUnion's alias type xsdt.String.
func (me TxsdLangTxsdLangUnion) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Is : Returns true if the value of this enumerated TxsdLangTxsdLangUnion is "".
func (me TxsdLangTxsdLangUnion) Is() bool { return me.String() == "" }

// ToXsdtLanguage : TxsdLang is an XSD union-type of several types. This is a simple type conversion to XsdtLanguage, but keep in mind the actual value may or may not be a valid XsdtLanguage value.
func (me TxsdLang) ToXsdtLanguage() xsdt.Language { return xsdt.Language(me) }

// ToTxsdLangTxsdLangUnion : TxsdLang is an XSD union-type of several types. This is a simple type conversion to TxsdLangTxsdLangUnion, but keep in mind the actual value may or may not be a valid TxsdLangTxsdLangUnion value.
func (me TxsdLang) ToTxsdLangTxsdLangUnion() TxsdLangTxsdLangUnion { return TxsdLangTxsdLangUnion(me) }

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 1 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 1 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XCdata func(*XCdata, bool) error
}
