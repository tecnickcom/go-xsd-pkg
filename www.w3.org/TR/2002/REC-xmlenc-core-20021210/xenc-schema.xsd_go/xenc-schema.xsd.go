// Package goXenc : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goXenc

import (
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XAttrURIXsdtAnyURI defines attribute Uri
type XAttrURIXsdtAnyURI struct {
	URI xsdt.AnyURI `xml:"URI,attr,omitempty"`
}

// TransformsType defines type ransformsType
type TransformsType struct {
	ds.XElemsTransform
}

// Walk : if the WalkHandlers.TransformsType function is not nil (ie. was set by outside code), calls it with this TransformsType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TransformsType instance.
func (me *TransformsType) Walk() (err error) {
	if fn := WalkHandlers.TransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType defines element Transforms
type XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType struct {
	Transforms *TransformsType `xml:"http://www.w3.org/2001/04/xmlenc# Transforms"`
}

// Walk : if the WalkHandlers.XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType function is not nil (ie. was set by outside code), calls it with this XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance.
func (me *XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType) Walk() (err error) {
	if fn := WalkHandlers.XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TCipherReferenceType defines type CipherReferenceType
type TCipherReferenceType struct {
	XAttrURIXsdtAnyURI
	XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType
}

// Walk : if the WalkHandlers.TCipherReferenceType function is not nil (ie. was set by outside code), calls it with this TCipherReferenceType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCipherReferenceType instance.
func (me *TCipherReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TCipherReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCipherReference defines element CipherReference
type XElemCipherReference struct {
	CipherReference *TCipherReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# CipherReference"`
}

// Walk : if the WalkHandlers.XElemCipherReference function is not nil (ie. was set by outside code), calls it with this XElemCipherReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemCipherReference instance.
func (me *XElemCipherReference) Walk() (err error) {
	if fn := WalkHandlers.XElemCipherReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CipherReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary defines element CipherValue
type XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary struct {
	CipherValue xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# CipherValue"`
}

// Walk : if the WalkHandlers.XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance.
func (me *XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TCipherDataType defines type CipherDataType
type TCipherDataType struct {
	XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary
	XElemCipherReference
}

// Walk : if the WalkHandlers.TCipherDataType function is not nil (ie. was set by outside code), calls it with this TCipherDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TCipherDataType instance.
func (me *TCipherDataType) Walk() (err error) {
	if fn := WalkHandlers.TCipherDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemCipherReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCipherData defines element CipherData
type XElemCipherData struct {
	CipherData *TCipherDataType `xml:"http://www.w3.org/2001/04/xmlenc# CipherData"`
}

// Walk : if the WalkHandlers.XElemCipherData function is not nil (ie. was set by outside code), calls it with this XElemCipherData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemCipherData instance.
func (me *XElemCipherData) Walk() (err error) {
	if fn := WalkHandlers.XElemCipherData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CipherData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCipherData defines element CipherData
type XElemsCipherData struct {
	CipherDatas []*TCipherDataType `xml:"http://www.w3.org/2001/04/xmlenc# CipherData"`
}

// Walk : if the WalkHandlers.XElemsCipherData function is not nil (ie. was set by outside code), calls it with this XElemsCipherData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCipherData instance.
func (me *XElemsCipherData) Walk() (err error) {
	if fn := WalkHandlers.XElemsCipherData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CipherDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCipherReference defines element CipherReference
type XElemsCipherReference struct {
	CipherReferences []*TCipherReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# CipherReference"`
}

// Walk : if the WalkHandlers.XElemsCipherReference function is not nil (ie. was set by outside code), calls it with this XElemsCipherReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCipherReference instance.
func (me *XElemsCipherReference) Walk() (err error) {
	if fn := WalkHandlers.XElemsCipherReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CipherReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAlgorithmXsdtAnyURI defines attribute Algorithm
type XAttrAlgorithmXsdtAnyURI struct {
	Algorithm xsdt.AnyURI `xml:"Algorithm,attr,omitempty"`
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeySizeType defines type KeySizeType
type TKeySizeType xsdt.Integer

// Set : Since TKeySizeType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TKeySizeType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

// String : Returns a string representation of this TKeySizeType's current non-string scalar value.
func (me TKeySizeType) String() string { return xsdt.Integer(me).String() }

// ToXsdtInteger : This convenience method just performs a simple type conversion to TKeySizeType's alias type xsdt.Integer.
func (me TKeySizeType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

// XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType defines element KeySize
type XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType struct {
	KeySize *TKeySizeType `xml:"http://www.w3.org/2001/04/xmlenc# KeySize"`
}

// Walk : if the WalkHandlers.XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType function is not nil (ie. was set by outside code), calls it with this XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance.
func (me *XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType) Walk() (err error) {
	if fn := WalkHandlers.XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary defines element OAEPparams
type XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary struct {
	OAEPparams *xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# OAEPparams"`
}

// Walk : if the WalkHandlers.XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance.
func (me *XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptionMethodType defines type EncryptionMethodType
type TEncryptionMethodType struct {
	XCdata
	XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType
	XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary
	XAttrAlgorithmXsdtAnyURI
	ds.XElemDigestMethod
}

// Walk : if the WalkHandlers.TEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this TEncryptionMethodType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TEncryptionMethodType instance.
func (me *TEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemDigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType defines element EncryptionMethod
type XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType struct {
	EncryptionMethod *TEncryptionMethodType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionMethod"`
}

// Walk : if the WalkHandlers.XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance.
func (me *XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTargetXsdtAnyURI defines attribute Target
type XAttrTargetXsdtAnyURI struct {
	Target xsdt.AnyURI `xml:"Target,attr,omitempty"`
}

// XAttrIDXsdtID defines attribute Id
type XAttrIDXsdtID struct {
	ID xsdt.ID `xml:"Id,attr,omitempty"`
}

// TEncryptionPropertyType defines type EncryptionPropertyType
type TEncryptionPropertyType struct {
	XCdata
	XAttrTargetXsdtAnyURI
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TEncryptionPropertyType function is not nil (ie. was set by outside code), calls it with this TEncryptionPropertyType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TEncryptionPropertyType instance.
func (me *TEncryptionPropertyType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionPropertyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptionProperty defines element EncryptionProperty
type XElemsEncryptionProperty struct {
	EncryptionProperties []*TEncryptionPropertyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperty"`
}

// Walk : if the WalkHandlers.XElemsEncryptionProperty function is not nil (ie. was set by outside code), calls it with this XElemsEncryptionProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptionProperty instance.
func (me *XElemsEncryptionProperty) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptionProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptionPropertiesType defines type EncryptionPropertiesType
type TEncryptionPropertiesType struct {
	XElemsEncryptionProperty
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TEncryptionPropertiesType function is not nil (ie. was set by outside code), calls it with this TEncryptionPropertiesType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TEncryptionPropertiesType instance.
func (me *TEncryptionPropertiesType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptionPropertiesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsEncryptionProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptionProperties defines element EncryptionProperties
type XElemEncryptionProperties struct {
	EncryptionProperties *TEncryptionPropertiesType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperties"`
}

// Walk : if the WalkHandlers.XElemEncryptionProperties function is not nil (ie. was set by outside code), calls it with this XElemEncryptionProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptionProperties instance.
func (me *XElemEncryptionProperties) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptionProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrMimeTypeXsdtString defines attribute MimeType
type XAttrMimeTypeXsdtString struct {
	MimeType xsdt.String `xml:"MimeType,attr,omitempty"`
}

// XAttrEncodingXsdtAnyURI defines attribute Encoding
type XAttrEncodingXsdtAnyURI struct {
	Encoding xsdt.AnyURI `xml:"Encoding,attr,omitempty"`
}

// XAttrTypeXsdtAnyURI defines attribute Type
type XAttrTypeXsdtAnyURI struct {
	Type xsdt.AnyURI `xml:"Type,attr,omitempty"`
}

// TEncryptedType defines type EncryptedType
type TEncryptedType struct {
	XAttrEncodingXsdtAnyURI
	XAttrIDXsdtID
	XAttrTypeXsdtAnyURI
	XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType
	XElemKeyInfo
	XElemCipherData
	XElemEncryptionProperties
	XAttrMimeTypeXsdtString
}

// Walk : if the WalkHandlers.TEncryptedType function is not nil (ie. was set by outside code), calls it with this TEncryptedType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TEncryptedType instance.
func (me *TEncryptedType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemCipherData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemEncryptionProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptedDataType defines type EncryptedDataType
type TEncryptedDataType struct {
	TEncryptedType
}

// Walk : if the WalkHandlers.TEncryptedDataType function is not nil (ie. was set by outside code), calls it with this TEncryptedDataType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TEncryptedDataType instance.
func (me *TEncryptedDataType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEncryptedType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptedData defines element EncryptedData
type XElemEncryptedData struct {
	EncryptedData *TEncryptedDataType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedData"`
}

// Walk : if the WalkHandlers.XElemEncryptedData function is not nil (ie. was set by outside code), calls it with this XElemEncryptedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptedData instance.
func (me *XElemEncryptedData) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptedData defines element EncryptedData
type XElemsEncryptedData struct {
	EncryptedDatas []*TEncryptedDataType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedData"`
}

// Walk : if the WalkHandlers.XElemsEncryptedData function is not nil (ie. was set by outside code), calls it with this XElemsEncryptedData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptedData instance.
func (me *XElemsEncryptedData) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptedData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrRecipientXsdtString defines attribute Recipient
type XAttrRecipientXsdtString struct {
	Recipient xsdt.String `xml:"Recipient,attr,omitempty"`
}

// TReferenceType defines type ReferenceType
type TReferenceType struct {
	XAttrURIXsdtAnyURI
}

// Walk : if the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType defines element DataReference
type XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType struct {
	DataReferences []*TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# DataReference"`
}

// Walk : if the WalkHandlers.XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance.
func (me *XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DataReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType defines element KeyReference
type XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType struct {
	KeyReferences []*TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# KeyReference"`
}

// Walk : if the WalkHandlers.XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance.
func (me *XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdReferenceList defines type xsdReferenceList
type TxsdReferenceList struct {
	XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType
	XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType
}

// Walk : if the WalkHandlers.TxsdReferenceList function is not nil (ie. was set by outside code), calls it with this TxsdReferenceList instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdReferenceList instance.
func (me *TxsdReferenceList) Walk() (err error) {
	if fn := WalkHandlers.TxsdReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemReferenceList defines element ReferenceList
type XElemReferenceList struct {
	ReferenceList *TxsdReferenceList `xml:"http://www.w3.org/2001/04/xmlenc# ReferenceList"`
}

// Walk : if the WalkHandlers.XElemReferenceList function is not nil (ie. was set by outside code), calls it with this XElemReferenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemReferenceList instance.
func (me *XElemReferenceList) Walk() (err error) {
	if fn := WalkHandlers.XElemReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString defines element CarriedKeyName
type XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString struct {
	CarriedKeyName *xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# CarriedKeyName"`
}

// Walk : if the WalkHandlers.XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString function is not nil (ie. was set by outside code), calls it with this XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance.
func (me *XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptedKeyType defines type EncryptedKeyType
type TEncryptedKeyType struct {
	XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString
	XAttrRecipientXsdtString
	TEncryptedType
	XElemReferenceList
}

// Walk : if the WalkHandlers.TEncryptedKeyType function is not nil (ie. was set by outside code), calls it with this TEncryptedKeyType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TEncryptedKeyType instance.
func (me *TEncryptedKeyType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedKeyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEncryptedType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemReferenceList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptedKey defines element EncryptedKey
type XElemEncryptedKey struct {
	EncryptedKey *TEncryptedKeyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedKey"`
}

// Walk : if the WalkHandlers.XElemEncryptedKey function is not nil (ie. was set by outside code), calls it with this XElemEncryptedKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptedKey instance.
func (me *XElemEncryptedKey) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptedKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptedKey defines element EncryptedKey
type XElemsEncryptedKey struct {
	EncryptedKeys []*TEncryptedKeyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptedKey"`
}

// Walk : if the WalkHandlers.XElemsEncryptedKey function is not nil (ie. was set by outside code), calls it with this XElemsEncryptedKey instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptedKey instance.
func (me *XElemsEncryptedKey) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptedKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedKeys {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary defines element KaNonce
type XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary struct {
	KaNonce xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# KA-Nonce"`
}

// Walk : if the WalkHandlers.XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance.
func (me *XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType defines element OriginatorKeyInfo
type XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType struct {
	OriginatorKeyInfo ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# OriginatorKeyInfo"`
}

// Walk : if the WalkHandlers.XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance.
func (me *XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType defines element RecipientKeyInfo
type XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType struct {
	RecipientKeyInfo ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# RecipientKeyInfo"`
}

// Walk : if the WalkHandlers.XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance.
func (me *XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAgreementMethodType defines type AgreementMethodType
type TAgreementMethodType struct {
	XCdata
	XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary
	XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType
	XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType
	XAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TAgreementMethodType function is not nil (ie. was set by outside code), calls it with this TAgreementMethodType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TAgreementMethodType instance.
func (me *TAgreementMethodType) Walk() (err error) {
	if fn := WalkHandlers.TAgreementMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAgreementMethod defines element AgreementMethod
type XElemsAgreementMethod struct {
	AgreementMethods []*TAgreementMethodType `xml:"http://www.w3.org/2001/04/xmlenc# AgreementMethod"`
}

// Walk : if the WalkHandlers.XElemsAgreementMethod function is not nil (ie. was set by outside code), calls it with this XElemsAgreementMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAgreementMethod instance.
func (me *XElemsAgreementMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemsAgreementMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AgreementMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAgreementMethod defines element AgreementMethod
type XElemAgreementMethod struct {
	AgreementMethod *TAgreementMethodType `xml:"http://www.w3.org/2001/04/xmlenc# AgreementMethod"`
}

// Walk : if the WalkHandlers.XElemAgreementMethod function is not nil (ie. was set by outside code), calls it with this XElemAgreementMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAgreementMethod instance.
func (me *XElemAgreementMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemAgreementMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AgreementMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsReferenceList defines element ReferenceList
type XElemsReferenceList struct {
	ReferenceLists []*TxsdReferenceList `xml:"http://www.w3.org/2001/04/xmlenc# ReferenceList"`
}

// Walk : if the WalkHandlers.XElemsReferenceList function is not nil (ie. was set by outside code), calls it with this XElemsReferenceList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsReferenceList instance.
func (me *XElemsReferenceList) Walk() (err error) {
	if fn := WalkHandlers.XElemsReferenceList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptionProperties defines element EncryptionProperties
type XElemsEncryptionProperties struct {
	EncryptionPropertieses []*TEncryptionPropertiesType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperties"`
}

// Walk : if the WalkHandlers.XElemsEncryptionProperties function is not nil (ie. was set by outside code), calls it with this XElemsEncryptionProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptionProperties instance.
func (me *XElemsEncryptionProperties) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptionProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionPropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptionProperty defines element EncryptionProperty
type XElemEncryptionProperty struct {
	EncryptionProperty *TEncryptionPropertyType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionProperty"`
}

// Walk : if the WalkHandlers.XElemEncryptionProperty function is not nil (ie. was set by outside code), calls it with this XElemEncryptionProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptionProperty instance.
func (me *XElemEncryptionProperty) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptionProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptionProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType defines element OriginatorKeyInfo
type XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType struct {
	OriginatorKeyInfos []ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# OriginatorKeyInfo"`
}

// Walk : if the WalkHandlers.XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType instance.
func (me *XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType defines element RecipientKeyInfo
type XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType struct {
	RecipientKeyInfos []ds.TKeyInfoType `xml:"http://www.w3.org/2001/04/xmlenc# RecipientKeyInfo"`
}

// Walk : if the WalkHandlers.XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType function is not nil (ie. was set by outside code), calls it with this XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType instance.
func (me *XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString defines element CarriedKeyName
type XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString struct {
	CarriedKeyNames []xsdt.String `xml:"http://www.w3.org/2001/04/xmlenc# CarriedKeyName"`
}

// Walk : if the WalkHandlers.XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString function is not nil (ie. was set by outside code), calls it with this XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString instance.
func (me *XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary defines element CipherValue
type XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary struct {
	CipherValues []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# CipherValue"`
}

// Walk : if the WalkHandlers.XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary instance.
func (me *XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType defines element KeyReference
type XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType struct {
	KeyReference *TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# KeyReference"`
}

// Walk : if the WalkHandlers.XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType instance.
func (me *XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType defines element KeySize
type XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType struct {
	KeySizes []TKeySizeType `xml:"http://www.w3.org/2001/04/xmlenc# KeySize"`
}

// Walk : if the WalkHandlers.XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType function is not nil (ie. was set by outside code), calls it with this XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType instance.
func (me *XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType) Walk() (err error) {
	if fn := WalkHandlers.XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType defines element Transforms
type XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType struct {
	Transformses []*TransformsType `xml:"http://www.w3.org/2001/04/xmlenc# Transforms"`
}

// Walk : if the WalkHandlers.XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType function is not nil (ie. was set by outside code), calls it with this XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType instance.
func (me *XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType) Walk() (err error) {
	if fn := WalkHandlers.XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary defines element OAEPparams
type XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary struct {
	OAEPparamses []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# OAEPparams"`
}

// Walk : if the WalkHandlers.XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary instance.
func (me *XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary defines element KaNonce
type XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary struct {
	KaNonces []xsdt.Base64Binary `xml:"http://www.w3.org/2001/04/xmlenc# KA-Nonce"`
}

// Walk : if the WalkHandlers.XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary instance.
func (me *XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType defines element DataReference
type XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType struct {
	DataReference *TReferenceType `xml:"http://www.w3.org/2001/04/xmlenc# DataReference"`
}

// Walk : if the WalkHandlers.XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType function is not nil (ie. was set by outside code), calls it with this XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType instance.
func (me *XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType) Walk() (err error) {
	if fn := WalkHandlers.XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DataReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType defines element EncryptionMethod
type XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType struct {
	EncryptionMethods []*TEncryptionMethodType `xml:"http://www.w3.org/2001/04/xmlenc# EncryptionMethod"`
}

// Walk : if the WalkHandlers.XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType function is not nil (ie. was set by outside code), calls it with this XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType instance.
func (me *XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptionMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyInfoType defines type KeyInfoType
type TKeyInfoType struct {
	ds.XElemsMgmtData
	ds.XAttrIDXsdtID
	ds.XElemsKeyValue
	ds.XElemsX509Data
	ds.XElemsRetrievalMethod
	ds.XElemsPGPData
	ds.XElemsSPKIData
	ds.XCdata
	ds.XElemsKeyName
	XElemEncryptedKey
}

// Walk : if the WalkHandlers.TKeyInfoType function is not nil (ie. was set by outside code), calls it with this TKeyInfoType instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TKeyInfoType instance.
func (me *TKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsX509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMgmtData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsKeyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemEncryptedKey.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKeyInfo defines element KeyInfo
type XElemKeyInfo struct {
	KeyInfo *TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

// Walk : if the WalkHandlers.XElemKeyInfo function is not nil (ie. was set by outside code), calls it with this XElemKeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemKeyInfo instance.
func (me *XElemKeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XElemKeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 51 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 51 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType          func(*XElemsDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType, bool) error
	XElemReferenceList                                                                                func(*XElemReferenceList, bool) error
	XElemAgreementMethod                                                                              func(*XElemAgreementMethod, bool) error
	XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary                      func(*XElemsOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary, bool) error
	XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType            func(*XElemsKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType, bool) error
	TxsdReferenceList                                                                                 func(*TxsdReferenceList, bool) error
	XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString  func(*XElemCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString, bool) error
	TransformsType                                                                                    func(*TransformsType, bool) error
	XElemsCipherReference                                                                             func(*XElemsCipherReference, bool) error
	TEncryptionMethodType                                                                             func(*TEncryptionMethodType, bool) error
	TEncryptionPropertyType                                                                           func(*TEncryptionPropertyType, bool) error
	TEncryptedDataType                                                                                func(*TEncryptedDataType, bool) error
	XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType                           func(*XElemsTransformschoiceCipherReferenceTypeschemaTransformsTransformsType, bool) error
	XElemsEncryptedKey                                                                                func(*XElemsEncryptedKey, bool) error
	XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary                              func(*XElemKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary, bool) error
	XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType            func(*XElemOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType, bool) error
	TAgreementMethodType                                                                              func(*TAgreementMethodType, bool) error
	XElemsEncryptionProperties                                                                        func(*XElemsEncryptionProperties, bool) error
	TEncryptedType                                                                                    func(*TEncryptedType, bool) error
	XElemEncryptionProperty                                                                           func(*XElemEncryptionProperty, bool) error
	XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType           func(*XElemDataReferencechoiceTxsdReferenceListReferenceListschemaDataReferenceTReferenceType, bool) error
	XElemsAgreementMethod                                                                             func(*XElemsAgreementMethod, bool) error
	XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary                             func(*XElemsKaNoncesequenceAgreementMethodTypeschemaKaNonceXsdtBase64Binary, bool) error
	XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType            func(*XElemsEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType, bool) error
	XElemCipherReference                                                                              func(*XElemCipherReference, bool) error
	TCipherDataType                                                                                   func(*TCipherDataType, bool) error
	XElemsEncryptedData                                                                               func(*XElemsEncryptedData, bool) error
	TReferenceType                                                                                    func(*TReferenceType, bool) error
	XElemEncryptedKey                                                                                 func(*XElemEncryptedKey, bool) error
	TCipherReferenceType                                                                              func(*TCipherReferenceType, bool) error
	XElemCipherData                                                                                   func(*XElemCipherData, bool) error
	XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString func(*XElemsCarriedKeyNamesequenceextensioncomplexContentEncryptedKeyTypeschemaCarriedKeyNameXsdtString, bool) error
	XElemsReferenceList                                                                               func(*XElemsReferenceList, bool) error
	XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType             func(*XElemsRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType, bool) error
	XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary                            func(*XElemsCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary, bool) error
	XCdata                                                                                            func(*XCdata, bool) error
	XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary                       func(*XElemOAEPparamssequenceEncryptionMethodTypeschemaOAEPparamsXsdtBase64Binary, bool) error
	XElemsEncryptionProperty                                                                          func(*XElemsEncryptionProperty, bool) error
	XElemEncryptedData                                                                                func(*XElemEncryptedData, bool) error
	XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType              func(*XElemRecipientKeyInfosequenceAgreementMethodTypeschemaRecipientKeyInfoDsTKeyInfoType, bool) error
	XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType             func(*XElemKeyReferencechoiceTxsdReferenceListReferenceListschemaKeyReferenceTReferenceType, bool) error
	XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType                                 func(*XElemKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType, bool) error
	XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType             func(*XElemEncryptionMethodsequenceEncryptedTypeschemaEncryptionMethodTEncryptionMethodType, bool) error
	TEncryptionPropertiesType                                                                         func(*TEncryptionPropertiesType, bool) error
	TEncryptedKeyType                                                                                 func(*TEncryptedKeyType, bool) error
	XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType                                func(*XElemsKeySizesequenceEncryptionMethodTypeschemaKeySizeTKeySizeType, bool) error
	XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType                            func(*XElemTransformschoiceCipherReferenceTypeschemaTransformsTransformsType, bool) error
	XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary                             func(*XElemCipherValuechoiceCipherDataTypeschemaCipherValueXsdtBase64Binary, bool) error
	XElemsCipherData                                                                                  func(*XElemsCipherData, bool) error
	XElemEncryptionProperties                                                                         func(*XElemEncryptionProperties, bool) error
	XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType           func(*XElemsOriginatorKeyInfosequenceAgreementMethodTypeschemaOriginatorKeyInfoDsTKeyInfoType, bool) error
	TKeyInfoType                                                                                      func(*TKeyInfoType, bool) error
	XElemKeyInfo                                                                                      func(*XElemKeyInfo, bool) error
}
