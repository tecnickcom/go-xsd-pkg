// Package goSvg : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goSvg

import (
	xlink "github.com/tecnickcom/go-xsd-pkg/www.w3.org/TR/2002/WD-SVG11-20020108/xlink.xsd_go"
	xml "github.com/tecnickcom/go-xsd-pkg/www.w3.org/TR/2002/WD-SVG11-20020108/xml.xsd_go"
	xsdt "github.com/tecnickcom/go-xsd-pkg/xsdt"
)

// XAttrIDXsdtID All elements have an ID
type XAttrIDXsdtID struct {
	ID xsdt.ID `xml:"id,attr,omitempty"`
}

// XAttsStdAttrs defines XAttsStdAttrs
type XAttsStdAttrs struct {
	XAttrIDXsdtID
	xml.XAttrBase
}

// XAttsLangSpaceAttrs Common attributes for elements that might contain character data content
type XAttsLangSpaceAttrs struct {
	xml.XAttrSpace
	xml.XAttrLang
}

// TFeatureListType Common attributes to check for system capabilities
// feature list specification
type TFeatureListType xsdt.String

// Set : Since TFeatureListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFeatureListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFeatureListType is just a simple String type, this merely returns the current string value.
func (me TFeatureListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFeatureListType's alias type xsdt.String.
func (me TFeatureListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrRequiredFeaturesTFeatureListType defines attribute RequiredFeaturesTFeatureListType
type XAttrRequiredFeaturesTFeatureListType struct {
	RequiredFeatures TFeatureListType `xml:"requiredFeatures,attr,omitempty"`
}

// TExtensionListType extension list specification
type TExtensionListType xsdt.String

// Set : Since TExtensionListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TExtensionListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TExtensionListType is just a simple String type, this merely returns the current string value.
func (me TExtensionListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TExtensionListType's alias type xsdt.String.
func (me TExtensionListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrRequiredExtensionsTExtensionListType defines attribute RequiredExtensionsTExtensionListType
type XAttrRequiredExtensionsTExtensionListType struct {
	RequiredExtensions TExtensionListType `xml:"requiredExtensions,attr,omitempty"`
}

// TLanguageCodesType a comma-separated list of language codes, as per [RFC3066]
type TLanguageCodesType xsdt.String

// Set : Since TLanguageCodesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLanguageCodesType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLanguageCodesType is just a simple String type, this merely returns the current string value.
func (me TLanguageCodesType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLanguageCodesType's alias type xsdt.String.
func (me TLanguageCodesType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrSystemLanguageTLanguageCodesType defines attribute SystemLanguageTLanguageCodesType
type XAttrSystemLanguageTLanguageCodesType struct {
	SystemLanguage TLanguageCodesType `xml:"systemLanguage,attr,omitempty"`
}

// XAttsTestAttrs defines XAttsTestAttrs
type XAttsTestAttrs struct {
	XAttrRequiredFeaturesTFeatureListType
	XAttrRequiredExtensionsTExtensionListType
	XAttrSystemLanguageTLanguageCodesType
}

// XAttsXlinkRefAttrs For most uses of URI referencing: standard XLink attributes other than xlink:href
type XAttsXlinkRefAttrs struct {
	xlink.XAttrRole
	xlink.XAttrArcrole
	xlink.XAttrTitle
	xlink.XAttrShow
	xlink.XAttrActuate
	xlink.XAttrType
}

// TScriptType script expression
type TScriptType xsdt.String

// Set : Since TScriptType is just a simple String type, this merely sets the current value from the specified string.
func (me *TScriptType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TScriptType is just a simple String type, this merely returns the current string value.
func (me TScriptType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TScriptType's alias type xsdt.String.
func (me TScriptType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrOnmousemoveTScriptType defines attribute OnmousemoveTScriptType
type XAttrOnmousemoveTScriptType struct {
	Onmousemove TScriptType `xml:"onmousemove,attr,omitempty"`
}

// XAttrOnmouseoutTScriptType defines attribute OnmouseoutTScriptType
type XAttrOnmouseoutTScriptType struct {
	Onmouseout TScriptType `xml:"onmouseout,attr,omitempty"`
}

// XAttrOnfocusinTScriptType defines attribute OnfocusinTScriptType
type XAttrOnfocusinTScriptType struct {
	Onfocusin TScriptType `xml:"onfocusin,attr,omitempty"`
}

// XAttrOnclickTScriptType defines attribute OnclickTScriptType
type XAttrOnclickTScriptType struct {
	Onclick TScriptType `xml:"onclick,attr,omitempty"`
}

// XAttrOnmouseupTScriptType defines attribute OnmouseupTScriptType
type XAttrOnmouseupTScriptType struct {
	Onmouseup TScriptType `xml:"onmouseup,attr,omitempty"`
}

// XAttrOnmouseoverTScriptType defines attribute OnmouseoverTScriptType
type XAttrOnmouseoverTScriptType struct {
	Onmouseover TScriptType `xml:"onmouseover,attr,omitempty"`
}

// XAttrOnloadTScriptType defines attribute OnloadTScriptType
type XAttrOnloadTScriptType struct {
	Onload TScriptType `xml:"onload,attr,omitempty"`
}

// XAttrOnfocusoutTScriptType defines attribute OnfocusoutTScriptType
type XAttrOnfocusoutTScriptType struct {
	Onfocusout TScriptType `xml:"onfocusout,attr,omitempty"`
}

// XAttrOnactivateTScriptType defines attribute OnactivateTScriptType
type XAttrOnactivateTScriptType struct {
	Onactivate TScriptType `xml:"onactivate,attr,omitempty"`
}

// XAttrOnmousedownTScriptType defines attribute OnmousedownTScriptType
type XAttrOnmousedownTScriptType struct {
	Onmousedown TScriptType `xml:"onmousedown,attr,omitempty"`
}

// XAttsGraphicsElementEvents defines XAttsGraphicsElementEvents
type XAttsGraphicsElementEvents struct {
	XAttrOnfocusoutTScriptType
	XAttrOnactivateTScriptType
	XAttrOnmousedownTScriptType
	XAttrOnmouseoverTScriptType
	XAttrOnloadTScriptType
	XAttrOnfocusinTScriptType
	XAttrOnclickTScriptType
	XAttrOnmouseupTScriptType
	XAttrOnmousemoveTScriptType
	XAttrOnmouseoutTScriptType
}

// XAttrOnscrollTScriptType defines attribute OnscrollTScriptType
type XAttrOnscrollTScriptType struct {
	Onscroll TScriptType `xml:"onscroll,attr,omitempty"`
}

// XAttrOnzoomTScriptType defines attribute OnzoomTScriptType
type XAttrOnzoomTScriptType struct {
	Onzoom TScriptType `xml:"onzoom,attr,omitempty"`
}

// XAttrOnunloadTScriptType defines attribute OnunloadTScriptType
type XAttrOnunloadTScriptType struct {
	Onunload TScriptType `xml:"onunload,attr,omitempty"`
}

// XAttrOnabortTScriptType defines attribute OnabortTScriptType
type XAttrOnabortTScriptType struct {
	Onabort TScriptType `xml:"onabort,attr,omitempty"`
}

// XAttrOnerrorTScriptType defines attribute OnerrorTScriptType
type XAttrOnerrorTScriptType struct {
	Onerror TScriptType `xml:"onerror,attr,omitempty"`
}

// XAttrOnresizeTScriptType defines attribute OnresizeTScriptType
type XAttrOnresizeTScriptType struct {
	Onresize TScriptType `xml:"onresize,attr,omitempty"`
}

// XAttsDocumentEvents defines XAttsDocumentEvents
type XAttsDocumentEvents struct {
	XAttrOnerrorTScriptType
	XAttrOnresizeTScriptType
	XAttrOnscrollTScriptType
	XAttrOnzoomTScriptType
	XAttrOnunloadTScriptType
	XAttrOnabortTScriptType
}

// XAttrOnbeginTScriptType defines attribute OnbeginTScriptType
type XAttrOnbeginTScriptType struct {
	Onbegin TScriptType `xml:"onbegin,attr,omitempty"`
}

// XAttrOnendTScriptType defines attribute OnendTScriptType
type XAttrOnendTScriptType struct {
	Onend TScriptType `xml:"onend,attr,omitempty"`
}

// XAttrOnrepeatTScriptType defines attribute OnrepeatTScriptType
type XAttrOnrepeatTScriptType struct {
	Onrepeat TScriptType `xml:"onrepeat,attr,omitempty"`
}

// XAttsAnimationEvents defines XAttsAnimationEvents
type XAttsAnimationEvents struct {
	XAttrOnbeginTScriptType
	XAttrOnendTScriptType
	XAttrOnrepeatTScriptType
}

// TColorType The following presentation attributes have to do with specifying color.
// a CSS2 Color
// Color as defined in CSS2 and XSL 1.0 plus additional recognised color keyword names (the 'X11 colors')
type TColorType xsdt.String

// Set : Since TColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TColorType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TColorType is just a simple String type, this merely returns the current string value.
func (me TColorType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TColorType's alias type xsdt.String.
func (me TColorType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrColorTColorType defines attribute ColorTColorType
type XAttrColorTColorType struct {
	Color TColorType `xml:"color,attr,omitempty"`
}

// TxsdPresentationAttributesColorColorInterpolation defines type xsdPresentationAttributesColorColorInterpolation
type TxsdPresentationAttributesColorColorInterpolation xsdt.String

// Set : Since TxsdPresentationAttributesColorColorInterpolation is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesColorColorInterpolation) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesColorColorInterpolation is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesColorColorInterpolation) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesColorColorInterpolation's alias type xsdt.String.
func (me TxsdPresentationAttributesColorColorInterpolation) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "auto".
func (me TxsdPresentationAttributesColorColorInterpolation) IsAuto() bool {
	return me.String() == "auto"
}

// IsSrgb : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "sRGB".
func (me TxsdPresentationAttributesColorColorInterpolation) IsSrgb() bool {
	return me.String() == "sRGB"
}

// IsLinearRGB : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "linearRGB".
func (me TxsdPresentationAttributesColorColorInterpolation) IsLinearRGB() bool {
	return me.String() == "linearRGB"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorInterpolation is "inherit".
func (me TxsdPresentationAttributesColorColorInterpolation) IsInherit() bool {
	return me.String() == "inherit"
}

// XAttrColorInterpolationTxsdPresentationAttributesColorColorInterpolation defines attribute ColorInterpolationTxsdPresentationAttributesColorColorInterpolation
type XAttrColorInterpolationTxsdPresentationAttributesColorColorInterpolation struct {
	ColorInterpolation TxsdPresentationAttributesColorColorInterpolation `xml:"color-interpolation,attr,omitempty"`
}

// TxsdPresentationAttributesColorColorRendering defines type xsdPresentationAttributesColorColorRendering
type TxsdPresentationAttributesColorColorRendering xsdt.String

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "auto".
func (me TxsdPresentationAttributesColorColorRendering) IsAuto() bool { return me.String() == "auto" }

// IsOptimizeSpeed : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesColorColorRendering) IsOptimizeSpeed() bool {
	return me.String() == "optimizeSpeed"
}

// IsOptimizeQuality : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "optimizeQuality".
func (me TxsdPresentationAttributesColorColorRendering) IsOptimizeQuality() bool {
	return me.String() == "optimizeQuality"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesColorColorRendering is "inherit".
func (me TxsdPresentationAttributesColorColorRendering) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesColorColorRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesColorColorRendering) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesColorColorRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesColorColorRendering) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesColorColorRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesColorColorRendering) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// XAttrColorRenderingTxsdPresentationAttributesColorColorRendering defines attribute ColorRenderingTxsdPresentationAttributesColorColorRendering
type XAttrColorRenderingTxsdPresentationAttributesColorColorRendering struct {
	ColorRendering TxsdPresentationAttributesColorColorRendering `xml:"color-rendering,attr,omitempty"`
}

// XAttsPresentationAttributesColor defines XAttsPresentationAttributesColor
type XAttsPresentationAttributesColor struct {
	XAttrColorTColorType
	XAttrColorInterpolationTxsdPresentationAttributesColorColorInterpolation
	XAttrColorRenderingTxsdPresentationAttributesColorColorRendering
}

// TEnableBackgroundValueType The following presentation attributes apply to container elements
// accumulate | new [ <x> <y> <width> <height> ] | inherit
type TEnableBackgroundValueType xsdt.String

// Set : Since TEnableBackgroundValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TEnableBackgroundValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TEnableBackgroundValueType is just a simple String type, this merely returns the current string value.
func (me TEnableBackgroundValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TEnableBackgroundValueType's alias type xsdt.String.
func (me TEnableBackgroundValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrEnableBackgroundTEnableBackgroundValueType defines attribute EnableBackgroundTEnableBackgroundValueType
type XAttrEnableBackgroundTEnableBackgroundValueType struct {
	EnableBackground TEnableBackgroundValueType `xml:"enable-background,attr,omitempty"`
}

// XAttsPresentationAttributesContainers defines XAttsPresentationAttributesContainers
type XAttsPresentationAttributesContainers struct {
	XAttrEnableBackgroundTEnableBackgroundValueType
}

// TOpacityValueType The following presentation attributes apply to 'feFlood' elements
// opacity value (e.g., <number>)
// <alphavalue> | inherit
type TOpacityValueType xsdt.String

// Set : Since TOpacityValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TOpacityValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TOpacityValueType is just a simple String type, this merely returns the current string value.
func (me TOpacityValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TOpacityValueType's alias type xsdt.String.
func (me TOpacityValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFloodOpacityTOpacityValueType defines attribute FloodOpacityTOpacityValueType
type XAttrFloodOpacityTOpacityValueType struct {
	FloodOpacity TOpacityValueType `xml:"flood-opacity,attr,omitempty"`
}

// TSVGColorType An SVG color value (sRGB plus optional ICC)
type TSVGColorType xsdt.String

// Set : Since TSVGColorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSVGColorType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TSVGColorType is just a simple String type, this merely returns the current string value.
func (me TSVGColorType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TSVGColorType's alias type xsdt.String.
func (me TSVGColorType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFloodColorTSVGColorType defines attribute FloodColorTSVGColorType
type XAttrFloodColorTSVGColorType struct {
	FloodColor TSVGColorType `xml:"flood-color,attr,omitempty"`
}

// XAttsPresentationAttributesFeFlood defines XAttsPresentationAttributesFeFlood
type XAttsPresentationAttributesFeFlood struct {
	XAttrFloodColorTSVGColorType
	XAttrFloodOpacityTOpacityValueType
}

// XAttrColorInterpolationFiltersTxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters The following presentation attributes apply to filter primitives
type XAttrColorInterpolationFiltersTxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters struct {
	ColorInterpolationFilters TxsdPresentationAttributesColorColorInterpolation `xml:"color-interpolation-filters,attr,omitempty"`
}

// XAttsPresentationAttributesFilterPrimitives defines XAttsPresentationAttributesFilterPrimitives
type XAttsPresentationAttributesFilterPrimitives struct {
	XAttrColorInterpolationFiltersTxsdPresentationAttributesFilterPrimitivesColorInterpolationFilters
}

// TxsdPresentationAttributesFillStrokeStrokeLinejoin The following presentation attributes apply to filling and stroking operations
type TxsdPresentationAttributesFillStrokeStrokeLinejoin xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFillStrokeStrokeLinejoin's alias type xsdt.String.
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsMiter : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "miter".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsMiter() bool {
	return me.String() == "miter"
}

// IsRound : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "round".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsRound() bool {
	return me.String() == "round"
}

// IsBevel : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "bevel".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsBevel() bool {
	return me.String() == "bevel"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinejoin is "inherit".
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFillStrokeStrokeLinejoin is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFillStrokeStrokeLinejoin) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFillStrokeStrokeLinejoin is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFillStrokeStrokeLinejoin) String() string {
	return xsdt.String(me).String()
}

// XAttrStrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin defines attribute StrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin
type XAttrStrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin struct {
	StrokeLinejoin TxsdPresentationAttributesFillStrokeStrokeLinejoin `xml:"stroke-linejoin,attr,omitempty"`
}

// TStrokeMiterLimitValueType 'stroke-miterlimit' property/attribute value (e.g., <number>)
type TStrokeMiterLimitValueType xsdt.String

// String : Since TStrokeMiterLimitValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeMiterLimitValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeMiterLimitValueType's alias type xsdt.String.
func (me TStrokeMiterLimitValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TStrokeMiterLimitValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeMiterLimitValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// XAttrStrokeMiterlimitTStrokeMiterLimitValueType defines attribute StrokeMiterlimitTStrokeMiterLimitValueType
type XAttrStrokeMiterlimitTStrokeMiterLimitValueType struct {
	StrokeMiterlimit TStrokeMiterLimitValueType `xml:"stroke-miterlimit,attr,omitempty"`
}

// TPaintType a 'fill' or 'stroke' property/attribute value
type TPaintType xsdt.String

// Set : Since TPaintType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPaintType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPaintType is just a simple String type, this merely returns the current string value.
func (me TPaintType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TPaintType's alias type xsdt.String.
func (me TPaintType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFillTPaintType defines attribute FillTPaintType
type XAttrFillTPaintType struct {
	Fill TPaintType `xml:"fill,attr,omitempty"`
}

// XAttrStrokeTPaintType defines attribute StrokeTPaintType
type XAttrStrokeTPaintType struct {
	Stroke TPaintType `xml:"stroke,attr,omitempty"`
}

// TStrokeDashArrayValueType 'stroke-dasharray' property/attribute value (e.g., 'none', list of <number>s)
type TStrokeDashArrayValueType xsdt.String

// Set : Since TStrokeDashArrayValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeDashArrayValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStrokeDashArrayValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeDashArrayValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeDashArrayValueType's alias type xsdt.String.
func (me TStrokeDashArrayValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrStrokeDasharrayTStrokeDashArrayValueType defines attribute StrokeDasharrayTStrokeDashArrayValueType
type XAttrStrokeDasharrayTStrokeDashArrayValueType struct {
	StrokeDasharray TStrokeDashArrayValueType `xml:"stroke-dasharray,attr,omitempty"`
}

// TStrokeDashOffsetValueType 'stroke-dashoffset' property/attribute value (e.g., 'none', >length>)
type TStrokeDashOffsetValueType xsdt.String

// Set : Since TStrokeDashOffsetValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeDashOffsetValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStrokeDashOffsetValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeDashOffsetValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeDashOffsetValueType's alias type xsdt.String.
func (me TStrokeDashOffsetValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrStrokeDashoffsetTStrokeDashOffsetValueType defines attribute StrokeDashoffsetTStrokeDashOffsetValueType
type XAttrStrokeDashoffsetTStrokeDashOffsetValueType struct {
	StrokeDashoffset TStrokeDashOffsetValueType `xml:"stroke-dashoffset,attr,omitempty"`
}

// TStrokeWidthValueType 'stroke-width' property/attribute value (e.g., <length>)
type TStrokeWidthValueType xsdt.String

// Set : Since TStrokeWidthValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStrokeWidthValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStrokeWidthValueType is just a simple String type, this merely returns the current string value.
func (me TStrokeWidthValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStrokeWidthValueType's alias type xsdt.String.
func (me TStrokeWidthValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrStrokeWidthTStrokeWidthValueType defines attribute StrokeWidthTStrokeWidthValueType
type XAttrStrokeWidthTStrokeWidthValueType struct {
	StrokeWidth TStrokeWidthValueType `xml:"stroke-width,attr,omitempty"`
}

// XAttrFillOpacityTOpacityValueType defines attribute FillOpacityTOpacityValueType
type XAttrFillOpacityTOpacityValueType struct {
	FillOpacity TOpacityValueType `xml:"fill-opacity,attr,omitempty"`
}

// TClipFillRuleType 'clip-rule' or fill-rule property/attribute value
type TClipFillRuleType xsdt.String

// IsInherit : Returns true if the value of this enumerated TClipFillRuleType is "inherit".
func (me TClipFillRuleType) IsInherit() bool { return me.String() == "inherit" }

// Set : Since TClipFillRuleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipFillRuleType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClipFillRuleType is just a simple String type, this merely returns the current string value.
func (me TClipFillRuleType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TClipFillRuleType's alias type xsdt.String.
func (me TClipFillRuleType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsEvenodd : Returns true if the value of this enumerated TClipFillRuleType is "evenodd".
func (me TClipFillRuleType) IsEvenodd() bool { return me.String() == "evenodd" }

// IsNonzero : Returns true if the value of this enumerated TClipFillRuleType is "nonzero".
func (me TClipFillRuleType) IsNonzero() bool { return me.String() == "nonzero" }

// XAttrFillRuleTClipFillRuleType defines attribute FillRuleTClipFillRuleType
type XAttrFillRuleTClipFillRuleType struct {
	FillRule TClipFillRuleType `xml:"fill-rule,attr,omitempty"`
}

// TxsdPresentationAttributesFillStrokeStrokeLinecap defines type xsdPresentationAttributesFillStrokeStrokeLinecap
type TxsdPresentationAttributesFillStrokeStrokeLinecap xsdt.String

// IsRound : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "round".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsRound() bool {
	return me.String() == "round"
}

// IsSquare : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "square".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsSquare() bool {
	return me.String() == "square"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "inherit".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFillStrokeStrokeLinecap is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFillStrokeStrokeLinecap) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesFillStrokeStrokeLinecap is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFillStrokeStrokeLinecap's alias type xsdt.String.
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsButt : Returns true if the value of this enumerated TxsdPresentationAttributesFillStrokeStrokeLinecap is "butt".
func (me TxsdPresentationAttributesFillStrokeStrokeLinecap) IsButt() bool {
	return me.String() == "butt"
}

// XAttrStrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap defines attribute StrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap
type XAttrStrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap struct {
	StrokeLinecap TxsdPresentationAttributesFillStrokeStrokeLinecap `xml:"stroke-linecap,attr,omitempty"`
}

// XAttrStrokeOpacityTOpacityValueType defines attribute StrokeOpacityTOpacityValueType
type XAttrStrokeOpacityTOpacityValueType struct {
	StrokeOpacity TOpacityValueType `xml:"stroke-opacity,attr,omitempty"`
}

// XAttsPresentationAttributesFillStroke defines XAttsPresentationAttributesFillStroke
type XAttsPresentationAttributesFillStroke struct {
	XAttrStrokeLinecapTxsdPresentationAttributesFillStrokeStrokeLinecap
	XAttrStrokeOpacityTOpacityValueType
	XAttrStrokeWidthTStrokeWidthValueType
	XAttrFillOpacityTOpacityValueType
	XAttrFillRuleTClipFillRuleType
	XAttrStrokeDasharrayTStrokeDashArrayValueType
	XAttrStrokeDashoffsetTStrokeDashOffsetValueType
	XAttrStrokeLinejoinTxsdPresentationAttributesFillStrokeStrokeLinejoin
	XAttrStrokeMiterlimitTStrokeMiterLimitValueType
	XAttrFillTPaintType
	XAttrStrokeTPaintType
}

// TxsdPresentationAttributesFontSpecificationFontStretch The following presentation attributes have to do with selecting a font to use
type TxsdPresentationAttributesFontSpecificationFontStretch xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontStretch's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontStretch) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsWider : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "wider".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsWider() bool {
	return me.String() == "wider"
}

// IsSemiCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "semi-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsSemiCondensed() bool {
	return me.String() == "semi-condensed"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontStretch is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontStretch) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFontSpecificationFontStretch is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontStretch) String() string {
	return xsdt.String(me).String()
}

// IsCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsCondensed() bool {
	return me.String() == "condensed"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsInherit() bool {
	return me.String() == "inherit"
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsNormal() bool {
	return me.String() == "normal"
}

// IsNarrower : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "narrower".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsNarrower() bool {
	return me.String() == "narrower"
}

// IsExtraCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "extra-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExtraCondensed() bool {
	return me.String() == "extra-condensed"
}

// IsExtraExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "extra-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExtraExpanded() bool {
	return me.String() == "extra-expanded"
}

// IsUltraExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "ultra-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsUltraExpanded() bool {
	return me.String() == "ultra-expanded"
}

// IsUltraCondensed : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "ultra-condensed".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsUltraCondensed() bool {
	return me.String() == "ultra-condensed"
}

// IsSemiExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "semi-expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsSemiExpanded() bool {
	return me.String() == "semi-expanded"
}

// IsExpanded : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStretch is "expanded".
func (me TxsdPresentationAttributesFontSpecificationFontStretch) IsExpanded() bool {
	return me.String() == "expanded"
}

// XAttrFontStretchTxsdPresentationAttributesFontSpecificationFontStretch defines attribute FontStretchTxsdPresentationAttributesFontSpecificationFontStretch
type XAttrFontStretchTxsdPresentationAttributesFontSpecificationFontStretch struct {
	FontStretch TxsdPresentationAttributesFontSpecificationFontStretch `xml:"font-stretch,attr,omitempty"`
}

// TxsdPresentationAttributesFontSpecificationFontStyle defines type xsdPresentationAttributesFontSpecificationFontStyle
type TxsdPresentationAttributesFontSpecificationFontStyle xsdt.String

// IsOblique : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "oblique".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsOblique() bool {
	return me.String() == "oblique"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontStyle is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontStyle) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFontSpecificationFontStyle is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontStyle) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontStyle's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontStyle) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsNormal() bool {
	return me.String() == "normal"
}

// IsItalic : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontStyle is "italic".
func (me TxsdPresentationAttributesFontSpecificationFontStyle) IsItalic() bool {
	return me.String() == "italic"
}

// XAttrFontStyleTxsdPresentationAttributesFontSpecificationFontStyle defines attribute FontStyleTxsdPresentationAttributesFontSpecificationFontStyle
type XAttrFontStyleTxsdPresentationAttributesFontSpecificationFontStyle struct {
	FontStyle TxsdPresentationAttributesFontSpecificationFontStyle `xml:"font-style,attr,omitempty"`
}

// TxsdPresentationAttributesFontSpecificationFontVariant defines type xsdPresentationAttributesFontSpecificationFontVariant
type TxsdPresentationAttributesFontSpecificationFontVariant xsdt.String

// IsSmallCaps : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "small-caps".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsSmallCaps() bool {
	return me.String() == "small-caps"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontVariant is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontVariant) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesFontSpecificationFontVariant is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontVariant) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontVariant's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontVariant) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontVariant is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontVariant) IsNormal() bool {
	return me.String() == "normal"
}

// XAttrFontVariantTxsdPresentationAttributesFontSpecificationFontVariant defines attribute FontVariantTxsdPresentationAttributesFontSpecificationFontVariant
type XAttrFontVariantTxsdPresentationAttributesFontSpecificationFontVariant struct {
	FontVariant TxsdPresentationAttributesFontSpecificationFontVariant `xml:"font-variant,attr,omitempty"`
}

// TxsdPresentationAttributesFontSpecificationFontWeight defines type xsdPresentationAttributesFontSpecificationFontWeight
type TxsdPresentationAttributesFontSpecificationFontWeight xsdt.String

// Is100 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "100".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is100() bool {
	return me.String() == "100"
}

// Is200 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "200".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is200() bool {
	return me.String() == "200"
}

// Is500 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "500".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is500() bool {
	return me.String() == "500"
}

// IsBolder : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "bolder".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsBolder() bool {
	return me.String() == "bolder"
}

// Is400 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "400".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is400() bool {
	return me.String() == "400"
}

// Is600 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "600".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is600() bool {
	return me.String() == "600"
}

// Is900 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "900".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is900() bool {
	return me.String() == "900"
}

// Set : Since TxsdPresentationAttributesFontSpecificationFontWeight is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesFontSpecificationFontWeight) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "normal".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsNormal() bool {
	return me.String() == "normal"
}

// Is800 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "800".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is800() bool {
	return me.String() == "800"
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesFontSpecificationFontWeight's alias type xsdt.String.
func (me TxsdPresentationAttributesFontSpecificationFontWeight) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsBold : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "bold".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsBold() bool {
	return me.String() == "bold"
}

// IsLighter : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "lighter".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsLighter() bool {
	return me.String() == "lighter"
}

// Is300 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "300".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is300() bool {
	return me.String() == "300"
}

// Is700 : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "700".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) Is700() bool {
	return me.String() == "700"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesFontSpecificationFontWeight is "inherit".
func (me TxsdPresentationAttributesFontSpecificationFontWeight) IsInherit() bool {
	return me.String() == "inherit"
}

// String : Since TxsdPresentationAttributesFontSpecificationFontWeight is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesFontSpecificationFontWeight) String() string {
	return xsdt.String(me).String()
}

// XAttrFontWeightTxsdPresentationAttributesFontSpecificationFontWeight defines attribute FontWeightTxsdPresentationAttributesFontSpecificationFontWeight
type XAttrFontWeightTxsdPresentationAttributesFontSpecificationFontWeight struct {
	FontWeight TxsdPresentationAttributesFontSpecificationFontWeight `xml:"font-weight,attr,omitempty"`
}

// TFontFamilyValueType [[ <family-name> | <generic-family> ],]* [<family-name> | <generic-family>] | inherit
// 'font-family' property/attribute value (i.e., list of fonts)
type TFontFamilyValueType xsdt.String

// Set : Since TFontFamilyValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontFamilyValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFontFamilyValueType is just a simple String type, this merely returns the current string value.
func (me TFontFamilyValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFontFamilyValueType's alias type xsdt.String.
func (me TFontFamilyValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFontFamilyTFontFamilyValueType defines attribute FontFamilyTFontFamilyValueType
type XAttrFontFamilyTFontFamilyValueType struct {
	FontFamily TFontFamilyValueType `xml:"font-family,attr,omitempty"`
}

// TFontSizeValueType 'font-size' property/attribute value
// <absolute-size> | <relative-size> | <length> | <percentage> | inherit
type TFontSizeValueType xsdt.String

// Set : Since TFontSizeValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontSizeValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFontSizeValueType is just a simple String type, this merely returns the current string value.
func (me TFontSizeValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFontSizeValueType's alias type xsdt.String.
func (me TFontSizeValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFontSizeTFontSizeValueType defines attribute FontSizeTFontSizeValueType
type XAttrFontSizeTFontSizeValueType struct {
	FontSize TFontSizeValueType `xml:"font-size,attr,omitempty"`
}

// TFontSizeAdjustValueType 'font-size-adjust' property/attribute value
// <number> | none | inherit
type TFontSizeAdjustValueType xsdt.String

// Set : Since TFontSizeAdjustValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFontSizeAdjustValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFontSizeAdjustValueType is just a simple String type, this merely returns the current string value.
func (me TFontSizeAdjustValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TFontSizeAdjustValueType's alias type xsdt.String.
func (me TFontSizeAdjustValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFontSizeAdjustTFontSizeAdjustValueType defines attribute FontSizeAdjustTFontSizeAdjustValueType
type XAttrFontSizeAdjustTFontSizeAdjustValueType struct {
	FontSizeAdjust TFontSizeAdjustValueType `xml:"font-size-adjust,attr,omitempty"`
}

// XAttsPresentationAttributesFontSpecification defines XAttsPresentationAttributesFontSpecification
type XAttsPresentationAttributesFontSpecification struct {
	XAttrFontFamilyTFontFamilyValueType
	XAttrFontSizeTFontSizeValueType
	XAttrFontSizeAdjustTFontSizeAdjustValueType
	XAttrFontStretchTxsdPresentationAttributesFontSpecificationFontStretch
	XAttrFontStyleTxsdPresentationAttributesFontSpecificationFontStyle
	XAttrFontVariantTxsdPresentationAttributesFontSpecificationFontVariant
	XAttrFontWeightTxsdPresentationAttributesFontSpecificationFontWeight
}

// XAttrStopColorTSVGColorType The following presentation attributes apply to gradient 'stop' elements
type XAttrStopColorTSVGColorType struct {
	StopColor TSVGColorType `xml:"stop-color,attr,omitempty"`
}

// XAttrStopOpacityTOpacityValueType defines attribute StopOpacityTOpacityValueType
type XAttrStopOpacityTOpacityValueType struct {
	StopOpacity TOpacityValueType `xml:"stop-opacity,attr,omitempty"`
}

// XAttsPresentationAttributesGradients defines XAttsPresentationAttributesGradients
type XAttsPresentationAttributesGradients struct {
	XAttrStopColorTSVGColorType
	XAttrStopOpacityTOpacityValueType
}

// TClipPathValueType The following presentation attributes apply to graphics elements
// <uri> | none | inherit
type TClipPathValueType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TClipPathValueType's alias type xsdt.String.
func (me TClipPathValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TClipPathValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipPathValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClipPathValueType is just a simple String type, this merely returns the current string value.
func (me TClipPathValueType) String() string { return xsdt.String(me).String() }

// XAttrClipPathTClipPathValueType defines attribute ClipPathTClipPathValueType
type XAttrClipPathTClipPathValueType struct {
	ClipPath TClipPathValueType `xml:"clip-path,attr,omitempty"`
}

// XAttrClipRuleTClipFillRuleType defines attribute ClipRuleTClipFillRuleType
type XAttrClipRuleTClipFillRuleType struct {
	ClipRule TClipFillRuleType `xml:"clip-rule,attr,omitempty"`
}

// TFilterValueType <uri> | none | inherit
type TFilterValueType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TFilterValueType's alias type xsdt.String.
func (me TFilterValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TFilterValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TFilterValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TFilterValueType is just a simple String type, this merely returns the current string value.
func (me TFilterValueType) String() string { return xsdt.String(me).String() }

// XAttrFilterTFilterValueType defines attribute FilterTFilterValueType
type XAttrFilterTFilterValueType struct {
	Filter TFilterValueType `xml:"filter,attr,omitempty"`
}

// TxsdPresentationAttributesGraphicsPointerEvents defines type xsdPresentationAttributesGraphicsPointerEvents
type TxsdPresentationAttributesGraphicsPointerEvents xsdt.String

// IsVisibleFill : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleFill".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleFill() bool {
	return me.String() == "visibleFill"
}

// IsVisibleStroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleStroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleStroke() bool {
	return me.String() == "visibleStroke"
}

// IsVisibleFillStroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visibleFillStroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisibleFillStroke() bool {
	return me.String() == "visibleFillStroke"
}

// IsPainted : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "painted".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsPainted() bool {
	return me.String() == "painted"
}

// IsFill : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "fill".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsFill() bool { return me.String() == "fill" }

// String : Since TxsdPresentationAttributesGraphicsPointerEvents is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsPointerEvents) String() string {
	return xsdt.String(me).String()
}

// IsVisible : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visible".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisible() bool {
	return me.String() == "visible"
}

// IsVisiblePainted : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "visiblePainted".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsVisiblePainted() bool {
	return me.String() == "visiblePainted"
}

// IsFillstroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "fillstroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsFillstroke() bool {
	return me.String() == "fillstroke"
}

// IsAll : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "all".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsAll() bool { return me.String() == "all" }

// IsNone : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "none".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsNone() bool { return me.String() == "none" }

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "inherit".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsPointerEvents is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsPointerEvents) Set(s string) { (*xsdt.String)(me).Set(s) }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsPointerEvents's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsPointerEvents) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsStroke : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsPointerEvents is "stroke".
func (me TxsdPresentationAttributesGraphicsPointerEvents) IsStroke() bool {
	return me.String() == "stroke"
}

// XAttrPointerEventsTxsdPresentationAttributesGraphicsPointerEvents defines attribute PointerEventsTxsdPresentationAttributesGraphicsPointerEvents
type XAttrPointerEventsTxsdPresentationAttributesGraphicsPointerEvents struct {
	PointerEvents TxsdPresentationAttributesGraphicsPointerEvents `xml:"pointer-events,attr,omitempty"`
}

// TxsdPresentationAttributesGraphicsShapeRendering defines type xsdPresentationAttributesGraphicsShapeRendering
type TxsdPresentationAttributesGraphicsShapeRendering xsdt.String

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "auto".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsAuto() bool {
	return me.String() == "auto"
}

// IsOptimizeSpeed : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsOptimizeSpeed() bool {
	return me.String() == "optimizeSpeed"
}

// IsCrispEdges : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "crispEdges".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsCrispEdges() bool {
	return me.String() == "crispEdges"
}

// IsGeometricPrecision : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "geometricPrecision".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsGeometricPrecision() bool {
	return me.String() == "geometricPrecision"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsShapeRendering is "inherit".
func (me TxsdPresentationAttributesGraphicsShapeRendering) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsShapeRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsShapeRendering) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsShapeRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsShapeRendering) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsShapeRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsShapeRendering) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// XAttrShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering defines attribute ShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering
type XAttrShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering struct {
	ShapeRendering TxsdPresentationAttributesGraphicsShapeRendering `xml:"shape-rendering,attr,omitempty"`
}

// TxsdPresentationAttributesGraphicsVisibility defines type xsdPresentationAttributesGraphicsVisibility
type TxsdPresentationAttributesGraphicsVisibility xsdt.String

// IsVisible : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "visible".
func (me TxsdPresentationAttributesGraphicsVisibility) IsVisible() bool {
	return me.String() == "visible"
}

// IsHidden : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "hidden".
func (me TxsdPresentationAttributesGraphicsVisibility) IsHidden() bool {
	return me.String() == "hidden"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsVisibility is "inherit".
func (me TxsdPresentationAttributesGraphicsVisibility) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsVisibility is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsVisibility) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsVisibility is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsVisibility) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsVisibility's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsVisibility) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// XAttrVisibilityTxsdPresentationAttributesGraphicsVisibility defines attribute VisibilityTxsdPresentationAttributesGraphicsVisibility
type XAttrVisibilityTxsdPresentationAttributesGraphicsVisibility struct {
	Visibility TxsdPresentationAttributesGraphicsVisibility `xml:"visibility,attr,omitempty"`
}

// TCursorValueType Value is an optional comma-separated list orf uri references followed by one token from an enumerated list.
// [ [<uri> ,]* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize | n-resize | se-resize | sw-resize | s-resize | w-resize| text | wait | help ] ] | inherit
type TCursorValueType xsdt.String

// Set : Since TCursorValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCursorValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TCursorValueType is just a simple String type, this merely returns the current string value.
func (me TCursorValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TCursorValueType's alias type xsdt.String.
func (me TCursorValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrCursorTCursorValueType defines attribute CursorTCursorValueType
type XAttrCursorTCursorValueType struct {
	Cursor TCursorValueType `xml:"cursor,attr,omitempty"`
}

// TxsdPresentationAttributesGraphicsDisplay defines type xsdPresentationAttributesGraphicsDisplay
type TxsdPresentationAttributesGraphicsDisplay xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inherit".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInherit() bool { return me.String() == "inherit" }

// IsListItem : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "list-item".
func (me TxsdPresentationAttributesGraphicsDisplay) IsListItem() bool {
	return me.String() == "list-item"
}

// IsTableRow : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-row".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableRow() bool {
	return me.String() == "table-row"
}

// IsTableCell : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-cell".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableCell() bool {
	return me.String() == "table-cell"
}

// IsTableRowGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-row-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableRowGroup() bool {
	return me.String() == "table-row-group"
}

// IsTableHeaderGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-header-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableHeaderGroup() bool {
	return me.String() == "table-header-group"
}

// IsTableColumnGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-column-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableColumnGroup() bool {
	return me.String() == "table-column-group"
}

// IsTableCaption : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-caption".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableCaption() bool {
	return me.String() == "table-caption"
}

// Set : Since TxsdPresentationAttributesGraphicsDisplay is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsDisplay) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsDisplay is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsDisplay) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsDisplay's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsDisplay) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsTableColumn : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-column".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableColumn() bool {
	return me.String() == "table-column"
}

// IsBlock : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "block".
func (me TxsdPresentationAttributesGraphicsDisplay) IsBlock() bool { return me.String() == "block" }

// IsCompact : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "compact".
func (me TxsdPresentationAttributesGraphicsDisplay) IsCompact() bool { return me.String() == "compact" }

// IsTable : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTable() bool { return me.String() == "table" }

// IsInlineTable : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inline-table".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInlineTable() bool {
	return me.String() == "inline-table"
}

// IsTableFooterGroup : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "table-footer-group".
func (me TxsdPresentationAttributesGraphicsDisplay) IsTableFooterGroup() bool {
	return me.String() == "table-footer-group"
}

// IsNone : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "none".
func (me TxsdPresentationAttributesGraphicsDisplay) IsNone() bool { return me.String() == "none" }

// IsInline : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "inline".
func (me TxsdPresentationAttributesGraphicsDisplay) IsInline() bool { return me.String() == "inline" }

// IsRunIn : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "run-in".
func (me TxsdPresentationAttributesGraphicsDisplay) IsRunIn() bool { return me.String() == "run-in" }

// IsMarker : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsDisplay is "marker".
func (me TxsdPresentationAttributesGraphicsDisplay) IsMarker() bool { return me.String() == "marker" }

// XAttrDisplayTxsdPresentationAttributesGraphicsDisplay defines attribute DisplayTxsdPresentationAttributesGraphicsDisplay
type XAttrDisplayTxsdPresentationAttributesGraphicsDisplay struct {
	Display TxsdPresentationAttributesGraphicsDisplay `xml:"display,attr,omitempty"`
}

// XAttrImageRenderingTxsdPresentationAttributesGraphicsImageRendering defines attribute ImageRenderingTxsdPresentationAttributesGraphicsImageRendering
type XAttrImageRenderingTxsdPresentationAttributesGraphicsImageRendering struct {
	ImageRendering TxsdPresentationAttributesColorColorRendering `xml:"image-rendering,attr,omitempty"`
}

// TMaskValueType 'mask' property/attribute value (e.g., 'none', %URI;)
// <uri> | none | inherit
type TMaskValueType xsdt.String

// String : Since TMaskValueType is just a simple String type, this merely returns the current string value.
func (me TMaskValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TMaskValueType's alias type xsdt.String.
func (me TMaskValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TMaskValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMaskValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// XAttrMaskTMaskValueType defines attribute MaskTMaskValueType
type XAttrMaskTMaskValueType struct {
	Mask TMaskValueType `xml:"mask,attr,omitempty"`
}

// XAttrOpacityTOpacityValueType defines attribute OpacityTOpacityValueType
type XAttrOpacityTOpacityValueType struct {
	Opacity TOpacityValueType `xml:"opacity,attr,omitempty"`
}

// TxsdPresentationAttributesGraphicsTextRendering defines type xsdPresentationAttributesGraphicsTextRendering
type TxsdPresentationAttributesGraphicsTextRendering xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "inherit".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesGraphicsTextRendering is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesGraphicsTextRendering) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesGraphicsTextRendering is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesGraphicsTextRendering) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesGraphicsTextRendering's alias type xsdt.String.
func (me TxsdPresentationAttributesGraphicsTextRendering) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "auto".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsAuto() bool { return me.String() == "auto" }

// IsOptimizeSpeed : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "optimizeSpeed".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsOptimizeSpeed() bool {
	return me.String() == "optimizeSpeed"
}

// IsOptimizeLegibility : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "optimizeLegibility".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsOptimizeLegibility() bool {
	return me.String() == "optimizeLegibility"
}

// IsGeometricPrecision : Returns true if the value of this enumerated TxsdPresentationAttributesGraphicsTextRendering is "geometricPrecision".
func (me TxsdPresentationAttributesGraphicsTextRendering) IsGeometricPrecision() bool {
	return me.String() == "geometricPrecision"
}

// XAttrTextRenderingTxsdPresentationAttributesGraphicsTextRendering defines attribute TextRenderingTxsdPresentationAttributesGraphicsTextRendering
type XAttrTextRenderingTxsdPresentationAttributesGraphicsTextRendering struct {
	TextRendering TxsdPresentationAttributesGraphicsTextRendering `xml:"text-rendering,attr,omitempty"`
}

// XAttsPresentationAttributesGraphics defines XAttsPresentationAttributesGraphics
type XAttsPresentationAttributesGraphics struct {
	XAttrMaskTMaskValueType
	XAttrOpacityTOpacityValueType
	XAttrTextRenderingTxsdPresentationAttributesGraphicsTextRendering
	XAttrVisibilityTxsdPresentationAttributesGraphicsVisibility
	XAttrCursorTCursorValueType
	XAttrDisplayTxsdPresentationAttributesGraphicsDisplay
	XAttrImageRenderingTxsdPresentationAttributesGraphicsImageRendering
	XAttrPointerEventsTxsdPresentationAttributesGraphicsPointerEvents
	XAttrShapeRenderingTxsdPresentationAttributesGraphicsShapeRendering
	XAttrClipPathTClipPathValueType
	XAttrClipRuleTClipFillRuleType
	XAttrFilterTFilterValueType
}

// XAttrColorProfileXsdtString The following presentation attributes apply to 'image' elements
type XAttrColorProfileXsdtString struct {
	ColorProfile xsdt.String `xml:"color-profile,attr,omitempty"`
}

// XAttsPresentationAttributesImages defines XAttsPresentationAttributesImages
type XAttsPresentationAttributesImages struct {
	XAttrColorProfileXsdtString
}

// XAttrLightingColorTSVGColorType The following presentation attributes apply to 'feDiffuseLighting' and 'feSpecularLighting' elements
type XAttrLightingColorTSVGColorType struct {
	LightingColor TSVGColorType `xml:"lighting-color,attr,omitempty"`
}

// XAttsPresentationAttributesLightingEffects defines XAttsPresentationAttributesLightingEffects
type XAttsPresentationAttributesLightingEffects struct {
	XAttrLightingColorTSVGColorType
}

// TMarkerValueType The following presentation attributes apply to marker operations
// 'marker' property/attribute value (e.g., 'none', %URI;)
type TMarkerValueType xsdt.String

// Set : Since TMarkerValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMarkerValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TMarkerValueType is just a simple String type, this merely returns the current string value.
func (me TMarkerValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TMarkerValueType's alias type xsdt.String.
func (me TMarkerValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrMarkerStartTMarkerValueType defines attribute MarkerStartTMarkerValueType
type XAttrMarkerStartTMarkerValueType struct {
	MarkerStart TMarkerValueType `xml:"marker-start,attr,omitempty"`
}

// XAttrMarkerMidTMarkerValueType defines attribute MarkerMidTMarkerValueType
type XAttrMarkerMidTMarkerValueType struct {
	MarkerMid TMarkerValueType `xml:"marker-mid,attr,omitempty"`
}

// XAttrMarkerEndTMarkerValueType defines attribute MarkerEndTMarkerValueType
type XAttrMarkerEndTMarkerValueType struct {
	MarkerEnd TMarkerValueType `xml:"marker-end,attr,omitempty"`
}

// XAttsPresentationAttributesMarkers defines XAttsPresentationAttributesMarkers
type XAttsPresentationAttributesMarkers struct {
	XAttrMarkerStartTMarkerValueType
	XAttrMarkerMidTMarkerValueType
	XAttrMarkerEndTMarkerValueType
}

// TGlyphOrientationHorizontalValueType The following presentation attributes apply to text content elements
// 'glyph-orientation-horizontal' property/attribute value (e.g., <angle>)
// <angle> | inherit
type TGlyphOrientationHorizontalValueType xsdt.String

// Set : Since TGlyphOrientationHorizontalValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGlyphOrientationHorizontalValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TGlyphOrientationHorizontalValueType is just a simple String type, this merely returns the current string value.
func (me TGlyphOrientationHorizontalValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TGlyphOrientationHorizontalValueType's alias type xsdt.String.
func (me TGlyphOrientationHorizontalValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrGlyphOrientationHorizontalTGlyphOrientationHorizontalValueType defines attribute GlyphOrientationHorizontalTGlyphOrientationHorizontalValueType
type XAttrGlyphOrientationHorizontalTGlyphOrientationHorizontalValueType struct {
	GlyphOrientationHorizontal TGlyphOrientationHorizontalValueType `xml:"glyph-orientation-horizontal,attr,omitempty"`
}

// TGlyphOrientationVerticalValueType 'glyph-orientation-vertical' property/attribute value (e.g., 'auto', <angle>)
// auto | <angle> | inherit
type TGlyphOrientationVerticalValueType xsdt.String

// Set : Since TGlyphOrientationVerticalValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TGlyphOrientationVerticalValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TGlyphOrientationVerticalValueType is just a simple String type, this merely returns the current string value.
func (me TGlyphOrientationVerticalValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TGlyphOrientationVerticalValueType's alias type xsdt.String.
func (me TGlyphOrientationVerticalValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrGlyphOrientationVerticalTGlyphOrientationVerticalValueType defines attribute GlyphOrientationVerticalTGlyphOrientationVerticalValueType
type XAttrGlyphOrientationVerticalTGlyphOrientationVerticalValueType struct {
	GlyphOrientationVertical TGlyphOrientationVerticalValueType `xml:"glyph-orientation-vertical,attr,omitempty"`
}

// TSpacingValueType 'letter-spacing' or 'word-spacing' property/attribute value (e.g., normal | <length>)
type TSpacingValueType xsdt.String

// Set : Since TSpacingValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TSpacingValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TSpacingValueType is just a simple String type, this merely returns the current string value.
func (me TSpacingValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TSpacingValueType's alias type xsdt.String.
func (me TSpacingValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrLetterSpacingTSpacingValueType defines attribute LetterSpacingTSpacingValueType
type XAttrLetterSpacingTSpacingValueType struct {
	LetterSpacing TSpacingValueType `xml:"letter-spacing,attr,omitempty"`
}

// TxsdPresentationAttributesTextContentElementsUnicodeBidi defines type xsdPresentationAttributesTextContentElementsUnicodeBidi
type TxsdPresentationAttributesTextContentElementsUnicodeBidi xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "inherit".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextContentElementsUnicodeBidi is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsUnicodeBidi) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesTextContentElementsUnicodeBidi is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsUnicodeBidi's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsNormal : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "normal".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsNormal() bool {
	return me.String() == "normal"
}

// IsEmbed : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "embed".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsEmbed() bool {
	return me.String() == "embed"
}

// IsBidiOverride : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsUnicodeBidi is "bidi-override".
func (me TxsdPresentationAttributesTextContentElementsUnicodeBidi) IsBidiOverride() bool {
	return me.String() == "bidi-override"
}

// XAttrUnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi defines attribute UnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi
type XAttrUnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi struct {
	UnicodeBidi TxsdPresentationAttributesTextContentElementsUnicodeBidi `xml:"unicode-bidi,attr,omitempty"`
}

// XAttrWordSpacingTSpacingValueType defines attribute WordSpacingTSpacingValueType
type XAttrWordSpacingTSpacingValueType struct {
	WordSpacing TSpacingValueType `xml:"word-spacing,attr,omitempty"`
}

// TxsdPresentationAttributesTextContentElementsDominantBaseline defines type xsdPresentationAttributesTextContentElementsDominantBaseline
type TxsdPresentationAttributesTextContentElementsDominantBaseline xsdt.String

// String : Since TxsdPresentationAttributesTextContentElementsDominantBaseline is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsDominantBaseline's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsHanging : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "hanging".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsHanging() bool {
	return me.String() == "hanging"
}

// IsMathematical : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "mathematical".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsMathematical() bool {
	return me.String() == "mathematical"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "inherit".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextContentElementsDominantBaseline is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsDominantBaseline) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// IsAutosenseScript : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "autosense-script".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsAutosenseScript() bool {
	return me.String() == "autosense-script"
}

// IsNoChange : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "no-change".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsNoChange() bool {
	return me.String() == "no-change"
}

// IsReset : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "reset".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsReset() bool {
	return me.String() == "reset"
}

// IsIdeographic : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "ideographic".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsIdeographic() bool {
	return me.String() == "ideographic"
}

// IsLower : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "lower".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsLower() bool {
	return me.String() == "lower"
}

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDominantBaseline is "auto".
func (me TxsdPresentationAttributesTextContentElementsDominantBaseline) IsAuto() bool {
	return me.String() == "auto"
}

// XAttrDominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline defines attribute DominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline
type XAttrDominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline struct {
	DominantBaseline TxsdPresentationAttributesTextContentElementsDominantBaseline `xml:"dominant-baseline,attr,omitempty"`
}

// TBaselineShiftValueType The actual definition is
// baseline | sub | super | <percentage> | <length> | inherit
// not sure that union can do this
type TBaselineShiftValueType xsdt.String

// Set : Since TBaselineShiftValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TBaselineShiftValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TBaselineShiftValueType is just a simple String type, this merely returns the current string value.
func (me TBaselineShiftValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TBaselineShiftValueType's alias type xsdt.String.
func (me TBaselineShiftValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrBaselineShiftTBaselineShiftValueType defines attribute BaselineShiftTBaselineShiftValueType
type XAttrBaselineShiftTBaselineShiftValueType struct {
	BaselineShift TBaselineShiftValueType `xml:"baseline-shift,attr,omitempty"`
}

// TxsdPresentationAttributesTextContentElementsDirection defines type xsdPresentationAttributesTextContentElementsDirection
type TxsdPresentationAttributesTextContentElementsDirection xsdt.String

// String : Since TxsdPresentationAttributesTextContentElementsDirection is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsDirection) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsDirection's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsDirection) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsLtr : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "ltr".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsLtr() bool {
	return me.String() == "ltr"
}

// IsRtl : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "rtl".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsRtl() bool {
	return me.String() == "rtl"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsDirection is "inherit".
func (me TxsdPresentationAttributesTextContentElementsDirection) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextContentElementsDirection is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsDirection) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// XAttrDirectionTxsdPresentationAttributesTextContentElementsDirection defines attribute DirectionTxsdPresentationAttributesTextContentElementsDirection
type XAttrDirectionTxsdPresentationAttributesTextContentElementsDirection struct {
	Direction TxsdPresentationAttributesTextContentElementsDirection `xml:"direction,attr,omitempty"`
}

// TxsdPresentationAttributesTextContentElementsTextAnchor defines type xsdPresentationAttributesTextContentElementsTextAnchor
type TxsdPresentationAttributesTextContentElementsTextAnchor xsdt.String

// Set : Since TxsdPresentationAttributesTextContentElementsTextAnchor is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsTextAnchor) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// String : Since TxsdPresentationAttributesTextContentElementsTextAnchor is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsTextAnchor's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsStart : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "start".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsStart() bool {
	return me.String() == "start"
}

// IsMiddle : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "middle".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsMiddle() bool {
	return me.String() == "middle"
}

// IsEnd : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "end".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsEnd() bool {
	return me.String() == "end"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsTextAnchor is "inherit".
func (me TxsdPresentationAttributesTextContentElementsTextAnchor) IsInherit() bool {
	return me.String() == "inherit"
}

// XAttrTextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor defines attribute TextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor
type XAttrTextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor struct {
	TextAnchor TxsdPresentationAttributesTextContentElementsTextAnchor `xml:"text-anchor,attr,omitempty"`
}

// TextDecorationValueType 'text-decoration' property/attribute value (e.g., 'none', 'underline')
type TextDecorationValueType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TextDecorationValueType's alias type xsdt.String.
func (me TextDecorationValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TextDecorationValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TextDecorationValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TextDecorationValueType is just a simple String type, this merely returns the current string value.
func (me TextDecorationValueType) String() string { return xsdt.String(me).String() }

// XAttrTextDecorationTextDecorationValueType defines attribute TextDecorationTextDecorationValueType
type XAttrTextDecorationTextDecorationValueType struct {
	TextDecoration TextDecorationValueType `xml:"text-decoration,attr,omitempty"`
}

// TxsdPresentationAttributesTextContentElementsAlignmentBaseline defines type xsdPresentationAttributesTextContentElementsAlignmentBaseline
type TxsdPresentationAttributesTextContentElementsAlignmentBaseline xsdt.String

// Set : Since TxsdPresentationAttributesTextContentElementsAlignmentBaseline is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextContentElementsAlignmentBaseline) Set(s string) {
	(*xsdt.String)(me).Set(s)
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextContentElementsAlignmentBaseline's alias type xsdt.String.
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsMiddle : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "middle".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsMiddle() bool {
	return me.String() == "middle"
}

// IsBottom : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "bottom".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBottom() bool {
	return me.String() == "bottom"
}

// IsTextAfterEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-after-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextAfterEdge() bool {
	return me.String() == "text-after-edge"
}

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "inherit".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsInherit() bool {
	return me.String() == "inherit"
}

// String : Since TxsdPresentationAttributesTextContentElementsAlignmentBaseline is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) String() string {
	return xsdt.String(me).String()
}

// IsBaseline : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "baseline".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBaseline() bool {
	return me.String() == "baseline"
}

// IsAfterEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "after-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsAfterEdge() bool {
	return me.String() == "after-edge"
}

// IsLower : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "lower".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsLower() bool {
	return me.String() == "lower"
}

// IsMathematical : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "mathematical".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsMathematical() bool {
	return me.String() == "mathematical"
}

// IsTop : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "top".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTop() bool {
	return me.String() == "top"
}

// IsTextTop : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-top".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextTop() bool {
	return me.String() == "text-top"
}

// IsTextBeforeEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-before-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextBeforeEdge() bool {
	return me.String() == "text-before-edge"
}

// IsTextBottom : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "text-bottom".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsTextBottom() bool {
	return me.String() == "text-bottom"
}

// IsIdeographic : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "ideographic".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsIdeographic() bool {
	return me.String() == "ideographic"
}

// IsBeforeEdge : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "before-edge".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsBeforeEdge() bool {
	return me.String() == "before-edge"
}

// IsHanging : Returns true if the value of this enumerated TxsdPresentationAttributesTextContentElementsAlignmentBaseline is "hanging".
func (me TxsdPresentationAttributesTextContentElementsAlignmentBaseline) IsHanging() bool {
	return me.String() == "hanging"
}

// XAttrAlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline defines attribute AlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline
type XAttrAlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline struct {
	AlignmentBaseline TxsdPresentationAttributesTextContentElementsAlignmentBaseline `xml:"alignment-baseline,attr,omitempty"`
}

// XAttsPresentationAttributesTextContentElements defines XAttsPresentationAttributesTextContentElements
type XAttsPresentationAttributesTextContentElements struct {
	XAttrWordSpacingTSpacingValueType
	XAttrDominantBaselineTxsdPresentationAttributesTextContentElementsDominantBaseline
	XAttrGlyphOrientationHorizontalTGlyphOrientationHorizontalValueType
	XAttrGlyphOrientationVerticalTGlyphOrientationVerticalValueType
	XAttrLetterSpacingTSpacingValueType
	XAttrUnicodeBidiTxsdPresentationAttributesTextContentElementsUnicodeBidi
	XAttrAlignmentBaselineTxsdPresentationAttributesTextContentElementsAlignmentBaseline
	XAttrBaselineShiftTBaselineShiftValueType
	XAttrDirectionTxsdPresentationAttributesTextContentElementsDirection
	XAttrTextAnchorTxsdPresentationAttributesTextContentElementsTextAnchor
	XAttrTextDecorationTextDecorationValueType
}

// TxsdPresentationAttributesTextElementsWritingMode The following presentation attributes apply to 'text' elements
type TxsdPresentationAttributesTextElementsWritingMode xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "inherit".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesTextElementsWritingMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesTextElementsWritingMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// IsLrTb : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "lr-tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsLrTb() bool {
	return me.String() == "lr-tb"
}

// IsLr : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "lr".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsLr() bool { return me.String() == "lr" }

// IsRl : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "rl".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsRl() bool { return me.String() == "rl" }

// IsTb : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsTb() bool { return me.String() == "tb" }

// String : Since TxsdPresentationAttributesTextElementsWritingMode is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesTextElementsWritingMode) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesTextElementsWritingMode's alias type xsdt.String.
func (me TxsdPresentationAttributesTextElementsWritingMode) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsRlTb : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "rl-tb".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsRlTb() bool {
	return me.String() == "rl-tb"
}

// IsTbRl : Returns true if the value of this enumerated TxsdPresentationAttributesTextElementsWritingMode is "tb-rl".
func (me TxsdPresentationAttributesTextElementsWritingMode) IsTbRl() bool {
	return me.String() == "tb-rl"
}

// XAttrWritingModeTxsdPresentationAttributesTextElementsWritingMode defines attribute WritingModeTxsdPresentationAttributesTextElementsWritingMode
type XAttrWritingModeTxsdPresentationAttributesTextElementsWritingMode struct {
	WritingMode TxsdPresentationAttributesTextElementsWritingMode `xml:"writing-mode,attr,omitempty"`
}

// XAttsPresentationAttributesTextElements defines XAttsPresentationAttributesTextElements
type XAttsPresentationAttributesTextElements struct {
	XAttrWritingModeTxsdPresentationAttributesTextElementsWritingMode
}

// TClipValueType The following presentation attributes apply to elements that establish viewports
// <shape> | auto | inherit
type TClipValueType xsdt.String

// Set : Since TClipValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClipValueType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClipValueType is just a simple String type, this merely returns the current string value.
func (me TClipValueType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TClipValueType's alias type xsdt.String.
func (me TClipValueType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrClipTClipValueType defines attribute ClipTClipValueType
type XAttrClipTClipValueType struct {
	Clip TClipValueType `xml:"clip,attr,omitempty"`
}

// TxsdPresentationAttributesViewportsOverflow defines type xsdPresentationAttributesViewportsOverflow
type TxsdPresentationAttributesViewportsOverflow xsdt.String

// IsInherit : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "inherit".
func (me TxsdPresentationAttributesViewportsOverflow) IsInherit() bool {
	return me.String() == "inherit"
}

// Set : Since TxsdPresentationAttributesViewportsOverflow is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdPresentationAttributesViewportsOverflow) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdPresentationAttributesViewportsOverflow is just a simple String type, this merely returns the current string value.
func (me TxsdPresentationAttributesViewportsOverflow) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdPresentationAttributesViewportsOverflow's alias type xsdt.String.
func (me TxsdPresentationAttributesViewportsOverflow) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsVisible : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "visible".
func (me TxsdPresentationAttributesViewportsOverflow) IsVisible() bool {
	return me.String() == "visible"
}

// IsHidden : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "hidden".
func (me TxsdPresentationAttributesViewportsOverflow) IsHidden() bool { return me.String() == "hidden" }

// IsScroll : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "scroll".
func (me TxsdPresentationAttributesViewportsOverflow) IsScroll() bool { return me.String() == "scroll" }

// IsAuto : Returns true if the value of this enumerated TxsdPresentationAttributesViewportsOverflow is "auto".
func (me TxsdPresentationAttributesViewportsOverflow) IsAuto() bool { return me.String() == "auto" }

// XAttrOverflowTxsdPresentationAttributesViewportsOverflow defines attribute OverflowTxsdPresentationAttributesViewportsOverflow
type XAttrOverflowTxsdPresentationAttributesViewportsOverflow struct {
	Overflow TxsdPresentationAttributesViewportsOverflow `xml:"overflow,attr,omitempty"`
}

// XAttsPresentationAttributesViewports defines XAttsPresentationAttributesViewports
type XAttsPresentationAttributesViewports struct {
	XAttrClipTClipValueType
	XAttrOverflowTxsdPresentationAttributesViewportsOverflow
}

// XAttsPresentationAttributesAll The following represents the complete list of presentation attributes
type XAttsPresentationAttributesAll struct {
	XAttsPresentationAttributesColor
	XAttsPresentationAttributesFeFlood
	XAttsPresentationAttributesContainers
	XAttsPresentationAttributesFilterPrimitives
	XAttsPresentationAttributesGradients
	XAttsPresentationAttributesMarkers
	XAttsPresentationAttributesTextElements
	XAttsPresentationAttributesFillStroke
	XAttsPresentationAttributesGraphics
	XAttsPresentationAttributesImages
	XAttsPresentationAttributesLightingEffects
	XAttsPresentationAttributesFontSpecification
	XAttsPresentationAttributesTextContentElements
	XAttsPresentationAttributesViewports
}

// XAttrResultXsdtString defines attribute Result
type XAttrResultXsdtString struct {
	Result xsdt.String `xml:"result,attr,omitempty"`
}

// TCoordinateType a <co-ordinate>
// a coordinate, which is a number optionally followed immediately by a unit identifier. Perhaps it is possible to represent this as a union by declaring unit idenifiers as a type?
type TCoordinateType xsdt.String

// Set : Since TCoordinateType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCoordinateType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TCoordinateType is just a simple String type, this merely returns the current string value.
func (me TCoordinateType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TCoordinateType's alias type xsdt.String.
func (me TCoordinateType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrXTCoordinateType defines attribute XTCoordinateType
type XAttrXTCoordinateType struct {
	X TCoordinateType `xml:"x,attr,omitempty"`
}

// XAttrYTCoordinateType defines attribute YTCoordinateType
type XAttrYTCoordinateType struct {
	Y TCoordinateType `xml:"y,attr,omitempty"`
}

// TLengthType a <length>
type TLengthType xsdt.String

// Set : Since TLengthType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLengthType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLengthType is just a simple String type, this merely returns the current string value.
func (me TLengthType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLengthType's alias type xsdt.String.
func (me TLengthType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrWidthTLengthType defines attribute WidthTLengthType
type XAttrWidthTLengthType struct {
	Width TLengthType `xml:"width,attr,omitempty"`
}

// XAttrHeightTLengthType defines attribute HeightTLengthType
type XAttrHeightTLengthType struct {
	Height TLengthType `xml:"height,attr,omitempty"`
}

// XAttsFilterPrimitiveAttributes defines XAttsFilterPrimitiveAttributes
type XAttsFilterPrimitiveAttributes struct {
	XAttrWidthTLengthType
	XAttrHeightTLengthType
	XAttrResultXsdtString
	XAttrXTCoordinateType
	XAttrYTCoordinateType
}

// XAttrInXsdtString defines attribute In
type XAttrInXsdtString struct {
	In xsdt.String `xml:"in,attr,omitempty"`
}

// XAttsFilterPrimitiveAttributesWithIn defines XAttsFilterPrimitiveAttributesWithIn
type XAttsFilterPrimitiveAttributesWithIn struct {
	XAttsFilterPrimitiveAttributes
	XAttrInXsdtString
}

// XAttrSlopeXsdtDouble defines attribute Slope
type XAttrSlopeXsdtDouble struct {
	Slope xsdt.Double `xml:"slope,attr,omitempty"`
}

// XAttrInterceptXsdtDouble defines attribute Intercept
type XAttrInterceptXsdtDouble struct {
	Intercept xsdt.Double `xml:"intercept,attr,omitempty"`
}

// XAttrAmplitudeXsdtDouble defines attribute Amplitude
type XAttrAmplitudeXsdtDouble struct {
	Amplitude xsdt.Double `xml:"amplitude,attr,omitempty"`
}

// XAttrExponentXsdtDouble defines attribute Exponent
type XAttrExponentXsdtDouble struct {
	Exponent xsdt.Double `xml:"exponent,attr,omitempty"`
}

// XAttrOffsetXsdtDouble defines attribute Offset
type XAttrOffsetXsdtDouble struct {
	Offset xsdt.Double `xml:"offset,attr,omitempty"`
}

// TxsdComponentTransferFunctionAttributesType defines type xsdComponentTransferFunctionAttributesType
type TxsdComponentTransferFunctionAttributesType xsdt.String

// Set : Since TxsdComponentTransferFunctionAttributesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdComponentTransferFunctionAttributesType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdComponentTransferFunctionAttributesType is just a simple String type, this merely returns the current string value.
func (me TxsdComponentTransferFunctionAttributesType) String() string {
	return xsdt.String(me).String()
}

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdComponentTransferFunctionAttributesType's alias type xsdt.String.
func (me TxsdComponentTransferFunctionAttributesType) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsIdentity : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "identity".
func (me TxsdComponentTransferFunctionAttributesType) IsIdentity() bool {
	return me.String() == "identity"
}

// IsTable : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "table".
func (me TxsdComponentTransferFunctionAttributesType) IsTable() bool { return me.String() == "table" }

// IsDiscrete : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "discrete".
func (me TxsdComponentTransferFunctionAttributesType) IsDiscrete() bool {
	return me.String() == "discrete"
}

// IsLinear : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "linear".
func (me TxsdComponentTransferFunctionAttributesType) IsLinear() bool { return me.String() == "linear" }

// IsGamma : Returns true if the value of this enumerated TxsdComponentTransferFunctionAttributesType is "gamma".
func (me TxsdComponentTransferFunctionAttributesType) IsGamma() bool { return me.String() == "gamma" }

// XAttrTypeTxsdComponentTransferFunctionAttributesType defines attribute TypeTxsdComponentTransferFunctionAttributesType
type XAttrTypeTxsdComponentTransferFunctionAttributesType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"type,attr,omitempty"`
}

// XAttrTableValuesXsdtString defines attribute TableValues
type XAttrTableValuesXsdtString struct {
	TableValues xsdt.String `xml:"tableValues,attr,omitempty"`
}

// XAttsComponentTransferFunctionAttributes defines XAttsComponentTransferFunctionAttributes
type XAttsComponentTransferFunctionAttributes struct {
	XAttrAmplitudeXsdtDouble
	XAttrExponentXsdtDouble
	XAttrOffsetXsdtDouble
	XAttrTypeTxsdComponentTransferFunctionAttributesType
	XAttrTableValuesXsdtString
	XAttrSlopeXsdtDouble
	XAttrInterceptXsdtDouble
}

// XAttsAnimElementAttrs defines XAttsAnimElementAttrs
type XAttsAnimElementAttrs struct {
	XAttsXlinkRefAttrs
	xlink.XAttrHref
}

// XAttrAttributeNameXsdtString defines attribute AttributeName
type XAttrAttributeNameXsdtString struct {
	AttributeName xsdt.String `xml:"attributeName,attr,omitempty"`
}

// XAttrAttributeTypeXsdtString defines attribute AttributeType
type XAttrAttributeTypeXsdtString struct {
	AttributeType xsdt.String `xml:"attributeType,attr,omitempty"`
}

// XAttsAnimAttributeAttrs defines XAttsAnimAttributeAttrs
type XAttsAnimAttributeAttrs struct {
	XAttrAttributeNameXsdtString
	XAttrAttributeTypeXsdtString
}

// XAttsAnimTargetAttrs defines XAttsAnimTargetAttrs
type XAttsAnimTargetAttrs struct {
	XAttsAnimAttributeAttrs
	XAttsAnimElementAttrs
}

// XAttrBeginXsdtString defines attribute Begin
type XAttrBeginXsdtString struct {
	Begin xsdt.String `xml:"begin,attr,omitempty"`
}

// XAttrEndXsdtString defines attribute End
type XAttrEndXsdtString struct {
	End xsdt.String `xml:"end,attr,omitempty"`
}

// XAttrMaxXsdtString defines attribute Max
type XAttrMaxXsdtString struct {
	Max xsdt.String `xml:"max,attr,omitempty"`
}

// TxsdAnimTimingAttrsRestart defines type xsdAnimTimingAttrsRestart
type TxsdAnimTimingAttrsRestart xsdt.String

// IsAlways : Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "always".
func (me TxsdAnimTimingAttrsRestart) IsAlways() bool { return me.String() == "always" }

// IsNever : Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "never".
func (me TxsdAnimTimingAttrsRestart) IsNever() bool { return me.String() == "never" }

// IsWhenNotActive : Returns true if the value of this enumerated TxsdAnimTimingAttrsRestart is "whenNotActive".
func (me TxsdAnimTimingAttrsRestart) IsWhenNotActive() bool { return me.String() == "whenNotActive" }

// Set : Since TxsdAnimTimingAttrsRestart is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimTimingAttrsRestart) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimTimingAttrsRestart is just a simple String type, this merely returns the current string value.
func (me TxsdAnimTimingAttrsRestart) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimTimingAttrsRestart's alias type xsdt.String.
func (me TxsdAnimTimingAttrsRestart) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrRestartTxsdAnimTimingAttrsRestartAlways defines attribute RestartTxsdAnimTimingAttrsRestartAlways
type XAttrRestartTxsdAnimTimingAttrsRestartAlways struct {
	Restart TxsdAnimTimingAttrsRestart `xml:"restart,attr,omitempty"`
}

// RestartDefault : Returns the default value for Restart -- "always"
func (me XAttrRestartTxsdAnimTimingAttrsRestartAlways) RestartDefault() TxsdAnimTimingAttrsRestart {
	return TxsdAnimTimingAttrsRestart("always")
}

// XAttrRepeatCountXsdtString defines attribute RepeatCount
type XAttrRepeatCountXsdtString struct {
	RepeatCount xsdt.String `xml:"repeatCount,attr,omitempty"`
}

// XAttrRepeatDurXsdtString defines attribute RepeatDur
type XAttrRepeatDurXsdtString struct {
	RepeatDur xsdt.String `xml:"repeatDur,attr,omitempty"`
}

// XAttrDurXsdtString defines attribute Dur
type XAttrDurXsdtString struct {
	Dur xsdt.String `xml:"dur,attr,omitempty"`
}

// XAttrMinXsdtString defines attribute Min
type XAttrMinXsdtString struct {
	Min xsdt.String `xml:"min,attr,omitempty"`
}

// TxsdAnimTimingAttrsFill defines type xsdAnimTimingAttrsFill
type TxsdAnimTimingAttrsFill xsdt.String

// IsRemove : Returns true if the value of this enumerated TxsdAnimTimingAttrsFill is "remove".
func (me TxsdAnimTimingAttrsFill) IsRemove() bool { return me.String() == "remove" }

// IsFreeze : Returns true if the value of this enumerated TxsdAnimTimingAttrsFill is "freeze".
func (me TxsdAnimTimingAttrsFill) IsFreeze() bool { return me.String() == "freeze" }

// Set : Since TxsdAnimTimingAttrsFill is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimTimingAttrsFill) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimTimingAttrsFill is just a simple String type, this merely returns the current string value.
func (me TxsdAnimTimingAttrsFill) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimTimingAttrsFill's alias type xsdt.String.
func (me TxsdAnimTimingAttrsFill) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrFillTxsdAnimTimingAttrsFillRemove defines attribute FillTxsdAnimTimingAttrsFillRemove
type XAttrFillTxsdAnimTimingAttrsFillRemove struct {
	Fill TxsdAnimTimingAttrsFill `xml:"fill,attr,omitempty"`
}

// FillDefault : Returns the default value for Fill -- "remove"
func (me XAttrFillTxsdAnimTimingAttrsFillRemove) FillDefault() TxsdAnimTimingAttrsFill {
	return TxsdAnimTimingAttrsFill("remove")
}

// XAttsAnimTimingAttrs defines XAttsAnimTimingAttrs
type XAttsAnimTimingAttrs struct {
	XAttrDurXsdtString
	XAttrMinXsdtString
	XAttrFillTxsdAnimTimingAttrsFillRemove
	XAttrRepeatDurXsdtString
	XAttrBeginXsdtString
	XAttrEndXsdtString
	XAttrMaxXsdtString
	XAttrRestartTxsdAnimTimingAttrsRestartAlways
	XAttrRepeatCountXsdtString
}

// XAttrKeySplinesXsdtString defines attribute KeySplines
type XAttrKeySplinesXsdtString struct {
	KeySplines xsdt.String `xml:"keySplines,attr,omitempty"`
}

// XAttrFromXsdtString defines attribute From
type XAttrFromXsdtString struct {
	From xsdt.String `xml:"from,attr,omitempty"`
}

// XAttrToXsdtString defines attribute To
type XAttrToXsdtString struct {
	To xsdt.String `xml:"to,attr,omitempty"`
}

// XAttrByXsdtString defines attribute By
type XAttrByXsdtString struct {
	By xsdt.String `xml:"by,attr,omitempty"`
}

// TxsdAnimValueAttrsCalcMode defines type xsdAnimValueAttrsCalcMode
type TxsdAnimValueAttrsCalcMode xsdt.String

// String : Since TxsdAnimValueAttrsCalcMode is just a simple String type, this merely returns the current string value.
func (me TxsdAnimValueAttrsCalcMode) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimValueAttrsCalcMode's alias type xsdt.String.
func (me TxsdAnimValueAttrsCalcMode) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsDiscrete : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "discrete".
func (me TxsdAnimValueAttrsCalcMode) IsDiscrete() bool { return me.String() == "discrete" }

// IsLinear : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "linear".
func (me TxsdAnimValueAttrsCalcMode) IsLinear() bool { return me.String() == "linear" }

// IsPaced : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "paced".
func (me TxsdAnimValueAttrsCalcMode) IsPaced() bool { return me.String() == "paced" }

// IsSpline : Returns true if the value of this enumerated TxsdAnimValueAttrsCalcMode is "spline".
func (me TxsdAnimValueAttrsCalcMode) IsSpline() bool { return me.String() == "spline" }

// Set : Since TxsdAnimValueAttrsCalcMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimValueAttrsCalcMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// XAttrCalcModeTxsdAnimValueAttrsCalcModeLinear defines attribute CalcModeTxsdAnimValueAttrsCalcModeLinear
type XAttrCalcModeTxsdAnimValueAttrsCalcModeLinear struct {
	CalcMode TxsdAnimValueAttrsCalcMode `xml:"calcMode,attr,omitempty"`
}

// CalcModeDefault : Returns the default value for CalcMode -- "linear"
func (me XAttrCalcModeTxsdAnimValueAttrsCalcModeLinear) CalcModeDefault() TxsdAnimValueAttrsCalcMode {
	return TxsdAnimValueAttrsCalcMode("linear")
}

// XAttrValuesXsdtString defines attribute Values
type XAttrValuesXsdtString struct {
	Values xsdt.String `xml:"values,attr,omitempty"`
}

// XAttrKeyTimesXsdtString defines attribute KeyTimes
type XAttrKeyTimesXsdtString struct {
	KeyTimes xsdt.String `xml:"keyTimes,attr,omitempty"`
}

// XAttsAnimValueAttrs defines XAttsAnimValueAttrs
type XAttsAnimValueAttrs struct {
	XAttrCalcModeTxsdAnimValueAttrsCalcModeLinear
	XAttrValuesXsdtString
	XAttrKeyTimesXsdtString
	XAttrKeySplinesXsdtString
	XAttrFromXsdtString
	XAttrToXsdtString
	XAttrByXsdtString
}

// TxsdAnimAdditionAttrsAccumulate defines type xsdAnimAdditionAttrsAccumulate
type TxsdAnimAdditionAttrsAccumulate xsdt.String

// IsSum : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAccumulate is "sum".
func (me TxsdAnimAdditionAttrsAccumulate) IsSum() bool { return me.String() == "sum" }

// Set : Since TxsdAnimAdditionAttrsAccumulate is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimAdditionAttrsAccumulate) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimAdditionAttrsAccumulate is just a simple String type, this merely returns the current string value.
func (me TxsdAnimAdditionAttrsAccumulate) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimAdditionAttrsAccumulate's alias type xsdt.String.
func (me TxsdAnimAdditionAttrsAccumulate) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsNone : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAccumulate is "none".
func (me TxsdAnimAdditionAttrsAccumulate) IsNone() bool { return me.String() == "none" }

// XAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone defines attribute AccumulateTxsdAnimAdditionAttrsAccumulateNone
type XAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone struct {
	Accumulate TxsdAnimAdditionAttrsAccumulate `xml:"accumulate,attr,omitempty"`
}

// AccumulateDefault : Returns the default value for Accumulate -- "none"
func (me XAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone) AccumulateDefault() TxsdAnimAdditionAttrsAccumulate {
	return TxsdAnimAdditionAttrsAccumulate("none")
}

// TxsdAnimAdditionAttrsAdditive defines type xsdAnimAdditionAttrsAdditive
type TxsdAnimAdditionAttrsAdditive xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimAdditionAttrsAdditive's alias type xsdt.String.
func (me TxsdAnimAdditionAttrsAdditive) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsReplace : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAdditive is "replace".
func (me TxsdAnimAdditionAttrsAdditive) IsReplace() bool { return me.String() == "replace" }

// IsSum : Returns true if the value of this enumerated TxsdAnimAdditionAttrsAdditive is "sum".
func (me TxsdAnimAdditionAttrsAdditive) IsSum() bool { return me.String() == "sum" }

// Set : Since TxsdAnimAdditionAttrsAdditive is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimAdditionAttrsAdditive) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimAdditionAttrsAdditive is just a simple String type, this merely returns the current string value.
func (me TxsdAnimAdditionAttrsAdditive) String() string { return xsdt.String(me).String() }

// XAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace defines attribute AdditiveTxsdAnimAdditionAttrsAdditiveReplace
type XAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace struct {
	Additive TxsdAnimAdditionAttrsAdditive `xml:"additive,attr,omitempty"`
}

// AdditiveDefault : Returns the default value for Additive -- "replace"
func (me XAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace) AdditiveDefault() TxsdAnimAdditionAttrsAdditive {
	return TxsdAnimAdditionAttrsAdditive("replace")
}

// XAttsAnimAdditionAttrs defines XAttsAnimAdditionAttrs
type XAttsAnimAdditionAttrs struct {
	XAttrAdditiveTxsdAnimAdditionAttrsAdditiveReplace
	XAttrAccumulateTxsdAnimAdditionAttrsAccumulateNone
}

// TClassListType Space-separated list of classes
type TClassListType xsdt.String

// Set : Since TClassListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TClassListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TClassListType is just a simple String type, this merely returns the current string value.
func (me TClassListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TClassListType's alias type xsdt.String.
func (me TClassListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Values : TClassListType declares a String containing a whitespace-separated list of xsdt.String values. This Values() method creates and returns a slice of all elements in that list.
func (me TClassListType) Values() (list []xsdt.String) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.String, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

// XAttrClassTClassListType defines attribute ClassTClassListType
type XAttrClassTClassListType struct {
	Class TClassListType `xml:"class,attr,omitempty"`
}

// TStyleSheetType style sheet data
type TStyleSheetType xsdt.String

// Set : Since TStyleSheetType is just a simple String type, this merely sets the current value from the specified string.
func (me *TStyleSheetType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TStyleSheetType is just a simple String type, this merely returns the current string value.
func (me TStyleSheetType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TStyleSheetType's alias type xsdt.String.
func (me TStyleSheetType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrStyleTStyleSheetType defines attribute StyleTStyleSheetType
type XAttrStyleTStyleSheetType struct {
	Style TStyleSheetType `xml:"style,attr,omitempty"`
}

// XAttrExternalResourcesRequiredXsdtBoolean defines attribute ExternalResourcesRequired
type XAttrExternalResourcesRequiredXsdtBoolean struct {
	ExternalResourcesRequired xsdt.Boolean `xml:"externalResourcesRequired,attr,omitempty"`
}

// XAttrContentXsdtStringStructuredText A bit simpler than the DTD, but see commented-out alternative
type XAttrContentXsdtStringStructuredText struct {
	Content xsdt.String `xml:"content,attr,omitempty"`
}

// ContentFixed : Returns the fixed value for Content -- "structured text"
func (me XAttrContentXsdtStringStructuredText) ContentFixed() xsdt.String {
	return xsdt.String("structured text")
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TdescType defines type descType
type TdescType struct {
	XAttsLangSpaceAttrs
	XAttrClassTClassListType
	XAttrStyleTStyleSheetType
	XAttrContentXsdtStringStructuredText
	XCdata
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TdescType function is not nil (ie. was set by outside code), calls it with this TdescType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TdescType instance.
func (me *TdescType) Walk() (err error) {
	if fn := WalkHandlers.TdescType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDescalldescTitleMetadataschemaDescTdescType defines element DescalldescTitleMetadataschemaDescTdescType
type XElemDescalldescTitleMetadataschemaDescTdescType struct {
	Desc *TdescType `xml:"http://www.w3.org/2000/svg desc"`
}

// Walk : if the WalkHandlers.XElemDescalldescTitleMetadataschemaDescTdescType function is not nil (ie. was set by outside code), calls it with this XElemDescalldescTitleMetadataschemaDescTdescType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDescalldescTitleMetadataschemaDescTdescType instance.
func (me *XElemDescalldescTitleMetadataschemaDescTdescType) Walk() (err error) {
	if fn := WalkHandlers.XElemDescalldescTitleMetadataschemaDescTdescType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Desc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TtitleType defines type titleType
type TtitleType struct {
	XCdata
	XAttsStdAttrs
	XAttsLangSpaceAttrs
	XAttrStyleTStyleSheetType
	XAttrContentXsdtStringStructuredText
	XAttrClassTClassListType
}

// Walk : if the WalkHandlers.TtitleType function is not nil (ie. was set by outside code), calls it with this TtitleType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TtitleType instance.
func (me *TtitleType) Walk() (err error) {
	if fn := WalkHandlers.TtitleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTitlealldescTitleMetadataschemaTitleTtitleType defines element TitlealldescTitleMetadataschemaTitleTtitleType
type XElemTitlealldescTitleMetadataschemaTitleTtitleType struct {
	Title *TtitleType `xml:"http://www.w3.org/2000/svg title"`
}

// Walk : if the WalkHandlers.XElemTitlealldescTitleMetadataschemaTitleTtitleType function is not nil (ie. was set by outside code), calls it with this XElemTitlealldescTitleMetadataschemaTitleTtitleType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTitlealldescTitleMetadataschemaTitleTtitleType instance.
func (me *XElemTitlealldescTitleMetadataschemaTitleTtitleType) Walk() (err error) {
	if fn := WalkHandlers.XElemTitlealldescTitleMetadataschemaTitleTtitleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Title.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TmetadataType defines type metadataType
type TmetadataType struct {
	XCdata
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TmetadataType function is not nil (ie. was set by outside code), calls it with this TmetadataType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TmetadataType instance.
func (me *TmetadataType) Walk() (err error) {
	if fn := WalkHandlers.TmetadataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType defines element MetadataalldescTitleMetadataschemaMetadataTmetadataType
type XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType struct {
	Metadata *TmetadataType `xml:"http://www.w3.org/2000/svg metadata"`
}

// Walk : if the WalkHandlers.XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType function is not nil (ie. was set by outside code), calls it with this XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType instance.
func (me *XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType) Walk() (err error) {
	if fn := WalkHandlers.XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Metadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XGroupDescTitleMetadata defines XGroupDescTitleMetadata
type XGroupDescTitleMetadata struct {
	XElemDescalldescTitleMetadataschemaDescTdescType
	XElemTitlealldescTitleMetadataschemaTitleTtitleType
	XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType
}

// Walk : if the WalkHandlers.XGroupDescTitleMetadata function is not nil (ie. was set by outside code), calls it with this XGroupDescTitleMetadata instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this XGroupDescTitleMetadata instance.
func (me *XGroupDescTitleMetadata) Walk() (err error) {
	if fn := WalkHandlers.XGroupDescTitleMetadata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemDescalldescTitleMetadataschemaDescTdescType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemTitlealldescTitleMetadataschemaTitleTtitleType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TsetType defines type setType
type TsetType struct {
	XAttsAnimationEvents
	XAttsAnimTargetAttrs
	XAttsAnimTimingAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrToXsdtString
	XGroupDescTitleMetadata
	XAttsStdAttrs
	XAttsTestAttrs
}

// Walk : if the WalkHandlers.TsetType function is not nil (ie. was set by outside code), calls it with this TsetType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TsetType instance.
func (me *TsetType) Walk() (err error) {
	if fn := WalkHandlers.TsetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSet defines element Set
type XElemsSet struct {
	Sets []*TsetType `xml:"http://www.w3.org/2000/svg set"`
}

// Walk : if the WalkHandlers.XElemsSet function is not nil (ie. was set by outside code), calls it with this XElemsSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSet instance.
func (me *XElemsSet) Walk() (err error) {
	if fn := WalkHandlers.XElemsSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Sets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TransformListType Yes, of course this was generated by a program!
// list of transforms
type TransformListType xsdt.String

// Set : Since TransformListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TransformListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TransformListType is just a simple String type, this merely returns the current string value.
func (me TransformListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TransformListType's alias type xsdt.String.
func (me TransformListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrTransformTransformListType defines attribute TransformTransformListType
type XAttrTransformTransformListType struct {
	Transform TransformListType `xml:"transform,attr,omitempty"`
}

// TanimateColorType defines type animateColorType
type TanimateColorType struct {
	XAttrExternalResourcesRequiredXsdtBoolean
	XGroupDescTitleMetadata
	XAttsAnimTargetAttrs
	XAttsAnimTimingAttrs
	XAttsStdAttrs
	XAttsTestAttrs
	XAttsAnimationEvents
	XAttsAnimValueAttrs
	XAttsAnimAdditionAttrs
}

// Walk : if the WalkHandlers.TanimateColorType function is not nil (ie. was set by outside code), calls it with this TanimateColorType instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TanimateColorType instance.
func (me *TanimateColorType) Walk() (err error) {
	if fn := WalkHandlers.TanimateColorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAnimateColor defines element AnimateColor
type XElemsAnimateColor struct {
	AnimateColors []*TanimateColorType `xml:"http://www.w3.org/2000/svg animateColor"`
}

// Walk : if the WalkHandlers.XElemsAnimateColor function is not nil (ie. was set by outside code), calls it with this XElemsAnimateColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAnimateColor instance.
func (me *XElemsAnimateColor) Walk() (err error) {
	if fn := WalkHandlers.XElemsAnimateColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimateColors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdAnimateTransformTypeType defines type xsdAnimateTransformTypeType
type TxsdAnimateTransformTypeType xsdt.String

// IsSkewY : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "skewY".
func (me TxsdAnimateTransformTypeType) IsSkewY() bool { return me.String() == "skewY" }

// Set : Since TxsdAnimateTransformTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAnimateTransformTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdAnimateTransformTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdAnimateTransformTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdAnimateTransformTypeType's alias type xsdt.String.
func (me TxsdAnimateTransformTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsTranslate : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "translate".
func (me TxsdAnimateTransformTypeType) IsTranslate() bool { return me.String() == "translate" }

// IsScale : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "scale".
func (me TxsdAnimateTransformTypeType) IsScale() bool { return me.String() == "scale" }

// IsRotate : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "rotate".
func (me TxsdAnimateTransformTypeType) IsRotate() bool { return me.String() == "rotate" }

// IsSkewX : Returns true if the value of this enumerated TxsdAnimateTransformTypeType is "skewX".
func (me TxsdAnimateTransformTypeType) IsSkewX() bool { return me.String() == "skewX" }

// XAttrTypeTxsdAnimateTransformTypeTypeTranslate defines attribute TypeTxsdAnimateTransformTypeTypeTranslate
type XAttrTypeTxsdAnimateTransformTypeTypeTranslate struct {
	Type TxsdAnimateTransformTypeType `xml:"type,attr,omitempty"`
}

// TypeDefault : Returns the default value for Type -- "translate"
func (me XAttrTypeTxsdAnimateTransformTypeTypeTranslate) TypeDefault() TxsdAnimateTransformTypeType {
	return TxsdAnimateTransformTypeType("translate")
}

// TanimateTransformType defines type animateTransformType
type TanimateTransformType struct {
	XAttsAnimTargetAttrs
	XAttsAnimTimingAttrs
	XAttsAnimAdditionAttrs
	XGroupDescTitleMetadata
	XAttsAnimationEvents
	XAttsStdAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrTypeTxsdAnimateTransformTypeTypeTranslate
	XAttsTestAttrs
	XAttsAnimValueAttrs
}

// Walk : if the WalkHandlers.TanimateTransformType function is not nil (ie. was set by outside code), calls it with this TanimateTransformType instance as the single argument. Then calls the Walk() method on 1/10 embed(s) and 0/0 field(s) belonging to this TanimateTransformType instance.
func (me *TanimateTransformType) Walk() (err error) {
	if fn := WalkHandlers.TanimateTransformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAnimateTransform defines element AnimateTransform
type XElemsAnimateTransform struct {
	AnimateTransforms []*TanimateTransformType `xml:"http://www.w3.org/2000/svg animateTransform"`
}

// Walk : if the WalkHandlers.XElemsAnimateTransform function is not nil (ie. was set by outside code), calls it with this XElemsAnimateTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAnimateTransform instance.
func (me *XElemsAnimateTransform) Walk() (err error) {
	if fn := WalkHandlers.XElemsAnimateTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimateTransforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrRotateXsdtString defines attribute Rotate
type XAttrRotateXsdtString struct {
	Rotate xsdt.String `xml:"rotate,attr,omitempty"`
}

// XAttrOriginXsdtString defines attribute Origin
type XAttrOriginXsdtString struct {
	Origin xsdt.String `xml:"origin,attr,omitempty"`
}

// XAttrPathXsdtString defines attribute Path
type XAttrPathXsdtString struct {
	Path xsdt.String `xml:"path,attr,omitempty"`
}

// TmpathType defines type mpathType
type TmpathType struct {
	xlink.XAttrHref
	XAttrExternalResourcesRequiredXsdtBoolean
	XGroupDescTitleMetadata
	XAttsStdAttrs
	XAttsXlinkRefAttrs
}

// Walk : if the WalkHandlers.TmpathType function is not nil (ie. was set by outside code), calls it with this TmpathType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TmpathType instance.
func (me *TmpathType) Walk() (err error) {
	if fn := WalkHandlers.TmpathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemMpath defines element Mpath
type XElemMpath struct {
	Mpath *TmpathType `xml:"http://www.w3.org/2000/svg mpath"`
}

// Walk : if the WalkHandlers.XElemMpath function is not nil (ie. was set by outside code), calls it with this XElemMpath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemMpath instance.
func (me *XElemMpath) Walk() (err error) {
	if fn := WalkHandlers.XElemMpath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mpath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrKeyPointsXsdtString defines attribute KeyPoints
type XAttrKeyPointsXsdtString struct {
	KeyPoints xsdt.String `xml:"keyPoints,attr,omitempty"`
}

// TanimateMotionType defines type animateMotionType
type TanimateMotionType struct {
	XAttsTestAttrs
	XAttsAnimElementAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttsAnimValueAttrs
	XAttsAnimAdditionAttrs
	XElemMpath
	XAttsAnimationEvents
	XAttsAnimTimingAttrs
	XAttrKeyPointsXsdtString
	XAttrRotateXsdtString
	XAttrOriginXsdtString
	XAttrPathXsdtString
	XGroupDescTitleMetadata
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TanimateMotionType function is not nil (ie. was set by outside code), calls it with this TanimateMotionType instance as the single argument. Then calls the Walk() method on 2/14 embed(s) and 0/0 field(s) belonging to this TanimateMotionType instance.
func (me *TanimateMotionType) Walk() (err error) {
	if fn := WalkHandlers.TanimateMotionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemMpath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAnimateMotion defines element AnimateMotion
type XElemsAnimateMotion struct {
	AnimateMotions []*TanimateMotionType `xml:"http://www.w3.org/2000/svg animateMotion"`
}

// Walk : if the WalkHandlers.XElemsAnimateMotion function is not nil (ie. was set by outside code), calls it with this XElemsAnimateMotion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAnimateMotion instance.
func (me *XElemsAnimateMotion) Walk() (err error) {
	if fn := WalkHandlers.XElemsAnimateMotion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AnimateMotions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrCxTCoordinateType defines attribute CxTCoordinateType
type XAttrCxTCoordinateType struct {
	Cx TCoordinateType `xml:"cx,attr,omitempty"`
}

// XAttrCyTCoordinateType defines attribute CyTCoordinateType
type XAttrCyTCoordinateType struct {
	Cy TCoordinateType `xml:"cy,attr,omitempty"`
}

// XAttrRTLengthType defines attribute RTLengthType
type XAttrRTLengthType struct {
	R TLengthType `xml:"r,attr,omitempty"`
}

// TanimateType defines type animateType
type TanimateType struct {
	XGroupDescTitleMetadata
	XAttsAnimAdditionAttrs
	XAttsTestAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttsAnimTargetAttrs
	XAttsAnimTimingAttrs
	XAttsAnimValueAttrs
	XAttsStdAttrs
	XAttsAnimationEvents
}

// Walk : if the WalkHandlers.TanimateType function is not nil (ie. was set by outside code), calls it with this TanimateType instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TanimateType instance.
func (me *TanimateType) Walk() (err error) {
	if fn := WalkHandlers.TanimateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAnimate defines element Animate
type XElemsAnimate struct {
	Animates []*TanimateType `xml:"http://www.w3.org/2000/svg animate"`
}

// Walk : if the WalkHandlers.XElemsAnimate function is not nil (ie. was set by outside code), calls it with this XElemsAnimate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAnimate instance.
func (me *XElemsAnimate) Walk() (err error) {
	if fn := WalkHandlers.XElemsAnimate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Animates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TcircleType defines type circleType
type TcircleType struct {
	XAttsPresentationAttributesGraphics
	XAttsGraphicsElementEvents
	XAttsStdAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsTestAttrs
	XAttrCxTCoordinateType
	XAttrCyTCoordinateType
	XAttrRTLengthType
	XElemsAnimate
	XElemsAnimateMotion
	XAttsPresentationAttributesColor
	XAttrClassTClassListType
	XAttrStyleTStyleSheetType
	XElemsSet
	XAttsLangSpaceAttrs
	XAttrTransformTransformListType
	XElemsAnimateColor
	XAttsPresentationAttributesFillStroke
}

// Walk : if the WalkHandlers.TcircleType function is not nil (ie. was set by outside code), calls it with this TcircleType instance as the single argument. Then calls the Walk() method on 6/20 embed(s) and 0/0 field(s) belonging to this TcircleType instance.
func (me *TcircleType) Walk() (err error) {
	if fn := WalkHandlers.TcircleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCircle defines element Circle
type XElemsCircle struct {
	Circles []*TcircleType `xml:"http://www.w3.org/2000/svg circle"`
}

// Walk : if the WalkHandlers.XElemsCircle function is not nil (ie. was set by outside code), calls it with this XElemsCircle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCircle instance.
func (me *XElemsCircle) Walk() (err error) {
	if fn := WalkHandlers.XElemsCircle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Circles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrLocalXsdtString defines attribute Local
type XAttrLocalXsdtString struct {
	Local xsdt.String `xml:"local,attr,omitempty"`
}

// XAttrNameXsdtString defines attribute Name
type XAttrNameXsdtString struct {
	Name xsdt.String `xml:"name,attr,omitempty"`
}

// TxsdColorProfileTypeRenderingIntent defines type xsdColorProfileTypeRenderingIntent
type TxsdColorProfileTypeRenderingIntent xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdColorProfileTypeRenderingIntent's alias type xsdt.String.
func (me TxsdColorProfileTypeRenderingIntent) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsAuto : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "auto".
func (me TxsdColorProfileTypeRenderingIntent) IsAuto() bool { return me.String() == "auto" }

// IsPerceptual : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "perceptual".
func (me TxsdColorProfileTypeRenderingIntent) IsPerceptual() bool { return me.String() == "perceptual" }

// IsRelativeColorimetric : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "relative-colorimetric".
func (me TxsdColorProfileTypeRenderingIntent) IsRelativeColorimetric() bool {
	return me.String() == "relative-colorimetric"
}

// IsSaturation : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "saturation".
func (me TxsdColorProfileTypeRenderingIntent) IsSaturation() bool { return me.String() == "saturation" }

// IsAbsoluteColorimetric : Returns true if the value of this enumerated TxsdColorProfileTypeRenderingIntent is "absolute-colorimetric".
func (me TxsdColorProfileTypeRenderingIntent) IsAbsoluteColorimetric() bool {
	return me.String() == "absolute-colorimetric"
}

// Set : Since TxsdColorProfileTypeRenderingIntent is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdColorProfileTypeRenderingIntent) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdColorProfileTypeRenderingIntent is just a simple String type, this merely returns the current string value.
func (me TxsdColorProfileTypeRenderingIntent) String() string { return xsdt.String(me).String() }

// XAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto defines attribute RenderingIntentTxsdColorProfileTypeRenderingIntentAuto
type XAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto struct {
	RenderingIntent TxsdColorProfileTypeRenderingIntent `xml:"rendering-intent,attr,omitempty"`
}

// RenderingIntentDefault : Returns the default value for RenderingIntent -- "auto"
func (me XAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto) RenderingIntentDefault() TxsdColorProfileTypeRenderingIntent {
	return TxsdColorProfileTypeRenderingIntent("auto")
}

// TcolorProfileType defines type colorProfileType
type TcolorProfileType struct {
	XAttsXlinkRefAttrs
	xlink.XAttrHref
	XAttrLocalXsdtString
	XAttrNameXsdtString
	XAttrRenderingIntentTxsdColorProfileTypeRenderingIntentAuto
	XGroupDescTitleMetadata
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TcolorProfileType function is not nil (ie. was set by outside code), calls it with this TcolorProfileType instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TcolorProfileType instance.
func (me *TcolorProfileType) Walk() (err error) {
	if fn := WalkHandlers.TcolorProfileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsColorProfile defines element ColorProfile
type XElemsColorProfile struct {
	ColorProfiles []*TcolorProfileType `xml:"http://www.w3.org/2000/svg color-profile"`
}

// Walk : if the WalkHandlers.XElemsColorProfile function is not nil (ie. was set by outside code), calls it with this XElemsColorProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsColorProfile instance.
func (me *XElemsColorProfile) Walk() (err error) {
	if fn := WalkHandlers.XElemsColorProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ColorProfiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TViewBoxSpecType 'viewBox' attribute specification
type TViewBoxSpecType xsdt.String

// Set : Since TViewBoxSpecType is just a simple String type, this merely sets the current value from the specified string.
func (me *TViewBoxSpecType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TViewBoxSpecType is just a simple String type, this merely returns the current string value.
func (me TViewBoxSpecType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TViewBoxSpecType's alias type xsdt.String.
func (me TViewBoxSpecType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrViewBoxTViewBoxSpecType defines attribute ViewBoxTViewBoxSpecType
type XAttrViewBoxTViewBoxSpecType struct {
	ViewBox TViewBoxSpecType `xml:"viewBox,attr,omitempty"`
}

// XAttrRyTLengthType defines attribute RyTLengthType
type XAttrRyTLengthType struct {
	Ry TLengthType `xml:"ry,attr,omitempty"`
}

// XAttrRxTLengthType defines attribute RxTLengthType
type XAttrRxTLengthType struct {
	Rx TLengthType `xml:"rx,attr,omitempty"`
}

// TrectType defines type rectType
type TrectType struct {
	XAttrYTCoordinateType
	XAttrWidthTLengthType
	XAttrTransformTransformListType
	XAttrXTCoordinateType
	XElemsSet
	XAttsTestAttrs
	XAttsLangSpaceAttrs
	XAttsPresentationAttributesColor
	XGroupDescTitleMetadata
	XAttsPresentationAttributesGraphics
	XAttrClassTClassListType
	XAttrHeightTLengthType
	XAttsStdAttrs
	XAttrRxTLengthType
	XAttsPresentationAttributesFillStroke
	XAttsGraphicsElementEvents
	XAttrRyTLengthType
	XAttrStyleTStyleSheetType
	XElemsAnimate
	XElemsAnimateMotion
	XElemsAnimateColor
	XElemsAnimateTransform
	XAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TrectType function is not nil (ie. was set by outside code), calls it with this TrectType instance as the single argument. Then calls the Walk() method on 6/23 embed(s) and 0/0 field(s) belonging to this TrectType instance.
func (me *TrectType) Walk() (err error) {
	if fn := WalkHandlers.TrectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRect defines element Rect
type XElemsRect struct {
	Rects []*TrectType `xml:"http://www.w3.org/2000/svg rect"`
}

// Walk : if the WalkHandlers.XElemsRect function is not nil (ie. was set by outside code), calls it with this XElemsRect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRect instance.
func (me *XElemsRect) Walk() (err error) {
	if fn := WalkHandlers.XElemsRect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Rects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPointsType a list of points
type TPointsType xsdt.String

// Set : Since TPointsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPointsType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPointsType is just a simple String type, this merely returns the current string value.
func (me TPointsType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TPointsType's alias type xsdt.String.
func (me TPointsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrPointsTPointsType defines attribute PointsTPointsType
type XAttrPointsTPointsType struct {
	Points TPointsType `xml:"points,attr,omitempty"`
}

// TpolygonType defines type polygonType
type TpolygonType struct {
	XElemsAnimate
	XAttsGraphicsElementEvents
	XAttsLangSpaceAttrs
	XAttsPresentationAttributesFillStroke
	XAttsPresentationAttributesGraphics
	XAttrClassTClassListType
	XElemsSet
	XElemsAnimateMotion
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsTestAttrs
	XAttrTransformTransformListType
	XAttrPointsTPointsType
	XElemsAnimateColor
	XAttsPresentationAttributesMarkers
	XAttsStdAttrs
	XAttsPresentationAttributesColor
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrStyleTStyleSheetType
}

// Walk : if the WalkHandlers.TpolygonType function is not nil (ie. was set by outside code), calls it with this TpolygonType instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TpolygonType instance.
func (me *TpolygonType) Walk() (err error) {
	if fn := WalkHandlers.TpolygonType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPolygon defines element Polygon
type XElemsPolygon struct {
	Polygons []*TpolygonType `xml:"http://www.w3.org/2000/svg polygon"`
}

// Walk : if the WalkHandlers.XElemsPolygon function is not nil (ie. was set by outside code), calls it with this XElemsPolygon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPolygon instance.
func (me *XElemsPolygon) Walk() (err error) {
	if fn := WalkHandlers.XElemsPolygon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polygons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TimageType defines type imageType
type TimageType struct {
	XElemsSet
	XElemsAnimateTransform
	XAttsGraphicsElementEvents
	XAttsPresentationAttributesGraphics
	XAttsPresentationAttributesViewports
	XAttrTransformTransformListType
	XAttrStyleTStyleSheetType
	XAttrHeightTLengthType
	XElemsAnimateMotion
	XAttsStdAttrs
	XAttsLangSpaceAttrs
	xlink.XAttrHref
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrClassTClassListType
	XAttrXTCoordinateType
	XElemsAnimate
	XElemsAnimateColor
	XAttsXlinkRefAttrs
	XAttsTestAttrs
	XAttsPresentationAttributesColor
	XAttrWidthTLengthType
	XGroupDescTitleMetadata
	XAttrYTCoordinateType
}

// Walk : if the WalkHandlers.TimageType function is not nil (ie. was set by outside code), calls it with this TimageType instance as the single argument. Then calls the Walk() method on 6/23 embed(s) and 0/0 field(s) belonging to this TimageType instance.
func (me *TimageType) Walk() (err error) {
	if fn := WalkHandlers.TimageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsImage defines element Image
type XElemsImage struct {
	Images []*TimageType `xml:"http://www.w3.org/2000/svg image"`
}

// Walk : if the WalkHandlers.XElemsImage function is not nil (ie. was set by outside code), calls it with this XElemsImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsImage instance.
func (me *XElemsImage) Walk() (err error) {
	if fn := WalkHandlers.XElemsImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Images {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrPathLengthXsdtDouble defines attribute PathLength
type XAttrPathLengthXsdtDouble struct {
	PathLength xsdt.Double `xml:"pathLength,attr,omitempty"`
}

// TPathDataType a path data specification
// Yes, of course this was generated by a program!
type TPathDataType xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TPathDataType's alias type xsdt.String.
func (me TPathDataType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TPathDataType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPathDataType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPathDataType is just a simple String type, this merely returns the current string value.
func (me TPathDataType) String() string { return xsdt.String(me).String() }

// XAttrDTPathDataType defines attribute DTPathDataType
type XAttrDTPathDataType struct {
	D TPathDataType `xml:"d,attr,omitempty"`
}

// TpathType defines type pathType
type TpathType struct {
	XAttrStyleTStyleSheetType
	XElemsAnimateTransform
	XAttsPresentationAttributesMarkers
	XAttsStdAttrs
	XAttrTransformTransformListType
	XAttrDTPathDataType
	XElemsAnimateMotion
	XAttsPresentationAttributesFillStroke
	XAttsPresentationAttributesGraphics
	XElemsAnimateColor
	XGroupDescTitleMetadata
	XAttrClassTClassListType
	XAttsPresentationAttributesColor
	XAttsGraphicsElementEvents
	XAttsTestAttrs
	XAttrPathLengthXsdtDouble
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsAnimate
	XElemsSet
	XAttsLangSpaceAttrs
}

// Walk : if the WalkHandlers.TpathType function is not nil (ie. was set by outside code), calls it with this TpathType instance as the single argument. Then calls the Walk() method on 6/20 embed(s) and 0/0 field(s) belonging to this TpathType instance.
func (me *TpathType) Walk() (err error) {
	if fn := WalkHandlers.TpathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPath defines element Path
type XElemsPath struct {
	Paths []*TpathType `xml:"http://www.w3.org/2000/svg path"`
}

// Walk : if the WalkHandlers.XElemsPath function is not nil (ie. was set by outside code), calls it with this XElemsPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPath instance.
func (me *XElemsPath) Walk() (err error) {
	if fn := WalkHandlers.XElemsPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Paths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TellipseType defines type ellipseType
type TellipseType struct {
	XAttsPresentationAttributesFillStroke
	XAttrCyTCoordinateType
	XAttsTestAttrs
	XAttsStdAttrs
	XAttrRxTLengthType
	XAttrRyTLengthType
	XAttrStyleTStyleSheetType
	XAttrTransformTransformListType
	XAttrCxTCoordinateType
	XElemsAnimateTransform
	XElemsSet
	XElemsAnimateMotion
	XElemsAnimateColor
	XGroupDescTitleMetadata
	XAttsPresentationAttributesColor
	XElemsAnimate
	XAttsGraphicsElementEvents
	XAttsLangSpaceAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrClassTClassListType
	XAttsPresentationAttributesGraphics
}

// Walk : if the WalkHandlers.TellipseType function is not nil (ie. was set by outside code), calls it with this TellipseType instance as the single argument. Then calls the Walk() method on 6/21 embed(s) and 0/0 field(s) belonging to this TellipseType instance.
func (me *TellipseType) Walk() (err error) {
	if fn := WalkHandlers.TellipseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEllipse defines element Ellipse
type XElemsEllipse struct {
	Ellipses []*TellipseType `xml:"http://www.w3.org/2000/svg ellipse"`
}

// Walk : if the WalkHandlers.XElemsEllipse function is not nil (ie. was set by outside code), calls it with this XElemsEllipse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEllipse instance.
func (me *XElemsEllipse) Walk() (err error) {
	if fn := WalkHandlers.XElemsEllipse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Ellipses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TpolylineType defines type polylineType
type TpolylineType struct {
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrStyleTStyleSheetType
	XAttrPointsTPointsType
	XElemsAnimate
	XAttsPresentationAttributesGraphics
	XAttsGraphicsElementEvents
	XAttrClassTClassListType
	XAttrTransformTransformListType
	XAttsTestAttrs
	XElemsSet
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsPresentationAttributesColor
	XAttsPresentationAttributesMarkers
	XElemsAnimateMotion
	XElemsAnimateColor
	XAttsPresentationAttributesFillStroke
	XAttsStdAttrs
	XAttsLangSpaceAttrs
}

// Walk : if the WalkHandlers.TpolylineType function is not nil (ie. was set by outside code), calls it with this TpolylineType instance as the single argument. Then calls the Walk() method on 6/19 embed(s) and 0/0 field(s) belonging to this TpolylineType instance.
func (me *TpolylineType) Walk() (err error) {
	if fn := WalkHandlers.TpolylineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPolyline defines element Polyline
type XElemsPolyline struct {
	Polylines []*TpolylineType `xml:"http://www.w3.org/2000/svg polyline"`
}

// Walk : if the WalkHandlers.XElemsPolyline function is not nil (ie. was set by outside code), calls it with this XElemsPolyline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPolyline instance.
func (me *XElemsPolyline) Walk() (err error) {
	if fn := WalkHandlers.XElemsPolyline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Polylines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdClipPathTypeClipPathUnits defines type xsdClipPathTypeClipPathUnits
type TxsdClipPathTypeClipPathUnits xsdt.String

// Set : Since TxsdClipPathTypeClipPathUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdClipPathTypeClipPathUnits) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdClipPathTypeClipPathUnits is just a simple String type, this merely returns the current string value.
func (me TxsdClipPathTypeClipPathUnits) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdClipPathTypeClipPathUnits's alias type xsdt.String.
func (me TxsdClipPathTypeClipPathUnits) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsUserSpaceOnUse : Returns true if the value of this enumerated TxsdClipPathTypeClipPathUnits is "userSpaceOnUse".
func (me TxsdClipPathTypeClipPathUnits) IsUserSpaceOnUse() bool {
	return me.String() == "userSpaceOnUse"
}

// IsUserSpace : Returns true if the value of this enumerated TxsdClipPathTypeClipPathUnits is "userSpace".
func (me TxsdClipPathTypeClipPathUnits) IsUserSpace() bool { return me.String() == "userSpace" }

// IsObjectBoundingBox : Returns true if the value of this enumerated TxsdClipPathTypeClipPathUnits is "objectBoundingBox".
func (me TxsdClipPathTypeClipPathUnits) IsObjectBoundingBox() bool {
	return me.String() == "objectBoundingBox"
}

// XAttrClipPathUnitsTxsdClipPathTypeClipPathUnits defines attribute ClipPathUnitsTxsdClipPathTypeClipPathUnits
type XAttrClipPathUnitsTxsdClipPathTypeClipPathUnits struct {
	ClipPathUnits TxsdClipPathTypeClipPathUnits `xml:"clipPathUnits,attr,omitempty"`
}

// XElemsDesc defines element Desc
type XElemsDesc struct {
	Descs []*TdescType `xml:"http://www.w3.org/2000/svg desc"`
}

// Walk : if the WalkHandlers.XElemsDesc function is not nil (ie. was set by outside code), calls it with this XElemsDesc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDesc instance.
func (me *XElemsDesc) Walk() (err error) {
	if fn := WalkHandlers.XElemsDesc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Descs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTitle defines element Title
type XElemsTitle struct {
	Titles []*TtitleType `xml:"http://www.w3.org/2000/svg title"`
}

// Walk : if the WalkHandlers.XElemsTitle function is not nil (ie. was set by outside code), calls it with this XElemsTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTitle instance.
func (me *XElemsTitle) Walk() (err error) {
	if fn := WalkHandlers.XElemsTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Titles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdTspanTypeLengthAdjust defines type xsdTspanTypeLengthAdjust
type TxsdTspanTypeLengthAdjust xsdt.String

// Set : Since TxsdTspanTypeLengthAdjust is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTspanTypeLengthAdjust) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdTspanTypeLengthAdjust is just a simple String type, this merely returns the current string value.
func (me TxsdTspanTypeLengthAdjust) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdTspanTypeLengthAdjust's alias type xsdt.String.
func (me TxsdTspanTypeLengthAdjust) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsSpacing : Returns true if the value of this enumerated TxsdTspanTypeLengthAdjust is "spacing".
func (me TxsdTspanTypeLengthAdjust) IsSpacing() bool { return me.String() == "spacing" }

// IsSpacingAndGlyphs : Returns true if the value of this enumerated TxsdTspanTypeLengthAdjust is "spacingAndGlyphs".
func (me TxsdTspanTypeLengthAdjust) IsSpacingAndGlyphs() bool {
	return me.String() == "spacingAndGlyphs"
}

// XAttrLengthAdjustTxsdTspanTypeLengthAdjust defines attribute LengthAdjustTxsdTspanTypeLengthAdjust
type XAttrLengthAdjustTxsdTspanTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"lengthAdjust,attr,omitempty"`
}

// TCoordinatesType a space separated list of CoordinateType. Punt to 'string' for now
type TCoordinatesType xsdt.String

// Set : Since TCoordinatesType is just a simple String type, this merely sets the current value from the specified string.
func (me *TCoordinatesType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TCoordinatesType is just a simple String type, this merely returns the current string value.
func (me TCoordinatesType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TCoordinatesType's alias type xsdt.String.
func (me TCoordinatesType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrYTCoordinatesType defines attribute YTCoordinatesType
type XAttrYTCoordinatesType struct {
	Y TCoordinatesType `xml:"y,attr,omitempty"`
}

// TLengthsType a list of <length>s
type TLengthsType xsdt.String

// Set : Since TLengthsType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLengthsType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLengthsType is just a simple String type, this merely returns the current string value.
func (me TLengthsType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLengthsType's alias type xsdt.String.
func (me TLengthsType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrDxTLengthsType defines attribute DxTLengthsType
type XAttrDxTLengthsType struct {
	Dx TLengthsType `xml:"dx,attr,omitempty"`
}

// XAttrTextLengthTLengthType defines attribute TextLengthTLengthType
type XAttrTextLengthTLengthType struct {
	TextLength TLengthType `xml:"textLength,attr,omitempty"`
}

// XAttrXTCoordinatesType defines attribute XTCoordinatesType
type XAttrXTCoordinatesType struct {
	X TCoordinatesType `xml:"x,attr,omitempty"`
}

// XElemsMetadata defines element Metadata
type XElemsMetadata struct {
	Metadatas []*TmetadataType `xml:"http://www.w3.org/2000/svg metadata"`
}

// Walk : if the WalkHandlers.XElemsMetadata function is not nil (ie. was set by outside code), calls it with this XElemsMetadata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsMetadata instance.
func (me *XElemsMetadata) Walk() (err error) {
	if fn := WalkHandlers.XElemsMetadata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Metadatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrLengthAdjustTxsdTrefTypeLengthAdjust defines attribute LengthAdjustTxsdTrefTypeLengthAdjust
type XAttrLengthAdjustTxsdTrefTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"lengthAdjust,attr,omitempty"`
}

// XAttrDyTLengthsType defines attribute DyTLengthsType
type XAttrDyTLengthsType struct {
	Dy TLengthsType `xml:"dy,attr,omitempty"`
}

// TtrefType defines type trefType
type TtrefType struct {
	XAttsPresentationAttributesColor
	XAttsPresentationAttributesFontSpecification
	XAttsPresentationAttributesTextContentElements
	XAttrXTCoordinatesType
	XElemsMetadata
	XElemsAnimate
	XAttrClassTClassListType
	xlink.XAttrHref
	XElemsTitle
	XAttsXlinkRefAttrs
	XAttsTestAttrs
	XAttsLangSpaceAttrs
	XElemsSet
	XAttsStdAttrs
	XAttrLengthAdjustTxsdTrefTypeLengthAdjust
	XAttrDyTLengthsType
	XElemsDesc
	XElemsAnimateColor
	XAttsPresentationAttributesFillStroke
	XAttrStyleTStyleSheetType
	XAttsPresentationAttributesGraphics
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrYTCoordinatesType
	XAttrDxTLengthsType
	XAttrRotateXsdtString
	XAttrTextLengthTLengthType
	XAttsGraphicsElementEvents
}

// Walk : if the WalkHandlers.TtrefType function is not nil (ie. was set by outside code), calls it with this TtrefType instance as the single argument. Then calls the Walk() method on 6/27 embed(s) and 0/0 field(s) belonging to this TtrefType instance.
func (me *TtrefType) Walk() (err error) {
	if fn := WalkHandlers.TtrefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTref defines element Tref
type XElemsTref struct {
	Trefs []*TtrefType `xml:"http://www.w3.org/2000/svg tref"`
}

// Walk : if the WalkHandlers.XElemsTref function is not nil (ie. was set by outside code), calls it with this XElemsTref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTref instance.
func (me *XElemsTref) Walk() (err error) {
	if fn := WalkHandlers.XElemsTref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Trefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSvg defines element Svg
type XElemsSvg struct {
	Svgs []*TsvgType `xml:"http://www.w3.org/2000/svg svg"`
}

// Walk : if the WalkHandlers.XElemsSvg function is not nil (ie. was set by outside code), calls it with this XElemsSvg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSvg instance.
func (me *XElemsSvg) Walk() (err error) {
	if fn := WalkHandlers.XElemsSvg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TContentTypeType media type, as per [RFC2045]
// media type, as per [RFC2045]
type TContentTypeType xsdt.String

// Set : Since TContentTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContentTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TContentTypeType is just a simple String type, this merely returns the current string value.
func (me TContentTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TContentTypeType's alias type xsdt.String.
func (me TContentTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrTypeTContentTypeType defines attribute TypeTContentTypeType
type XAttrTypeTContentTypeType struct {
	Type TContentTypeType `xml:"type,attr,omitempty"`
}

// TscriptType defines type scriptType
type TscriptType struct {
	XCdata
	XAttsStdAttrs
	XAttsXlinkRefAttrs
	xlink.XAttrHref
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrTypeTContentTypeType
}

// Walk : if the WalkHandlers.TscriptType function is not nil (ie. was set by outside code), calls it with this TscriptType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TscriptType instance.
func (me *TscriptType) Walk() (err error) {
	if fn := WalkHandlers.TscriptType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsScript defines element Script
type XElemsScript struct {
	Scripts []*TscriptType `xml:"http://www.w3.org/2000/svg script"`
}

// Walk : if the WalkHandlers.XElemsScript function is not nil (ie. was set by outside code), calls it with this XElemsScript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsScript instance.
func (me *XElemsScript) Walk() (err error) {
	if fn := WalkHandlers.XElemsScript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scripts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TuseType defines type useType
type TuseType struct {
	XAttrWidthTLengthType
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrTransformTransformListType
	XAttrHeightTLengthType
	XAttrClassTClassListType
	XElemsSet
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsXlinkRefAttrs
	XAttsStdAttrs
	XAttrStyleTStyleSheetType
	xlink.XAttrHref
	XAttrXTCoordinateType
	XElemsAnimate
	XElemsAnimateMotion
	XAttsTestAttrs
	XAttsLangSpaceAttrs
	XElemsAnimateColor
	XAttsPresentationAttributesAll
	XAttsGraphicsElementEvents
	XAttrYTCoordinateType
}

// Walk : if the WalkHandlers.TuseType function is not nil (ie. was set by outside code), calls it with this TuseType instance as the single argument. Then calls the Walk() method on 6/21 embed(s) and 0/0 field(s) belonging to this TuseType instance.
func (me *TuseType) Walk() (err error) {
	if fn := WalkHandlers.TuseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsUse defines element Use
type XElemsUse struct {
	Uses []*TuseType `xml:"http://www.w3.org/2000/svg use"`
}

// Walk : if the WalkHandlers.XElemsUse function is not nil (ie. was set by outside code), calls it with this XElemsUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsUse instance.
func (me *XElemsUse) Walk() (err error) {
	if fn := WalkHandlers.XElemsUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Uses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TMediaDescType comma-separated list of media descriptors.
type TMediaDescType xsdt.String

// Set : Since TMediaDescType is just a simple String type, this merely sets the current value from the specified string.
func (me *TMediaDescType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TMediaDescType is just a simple String type, this merely returns the current string value.
func (me TMediaDescType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TMediaDescType's alias type xsdt.String.
func (me TMediaDescType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrMediaTMediaDescType defines attribute MediaTMediaDescType
type XAttrMediaTMediaDescType struct {
	Media TMediaDescType `xml:"media,attr,omitempty"`
}

// XAttrTitleXsdtString defines attribute Title
type XAttrTitleXsdtString struct {
	Title xsdt.String `xml:"title,attr,omitempty"`
}

// TstyleType defines type styleType
type TstyleType struct {
	XCdata
	XAttsStdAttrs
	xml.XAttrSpace
	XAttrTypeTContentTypeType
	XAttrMediaTMediaDescType
	XAttrTitleXsdtString
}

// Walk : if the WalkHandlers.TstyleType function is not nil (ie. was set by outside code), calls it with this TstyleType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TstyleType instance.
func (me *TstyleType) Walk() (err error) {
	if fn := WalkHandlers.TstyleType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsStyle defines element Style
type XElemsStyle struct {
	Styles []*TstyleType `xml:"http://www.w3.org/2000/svg style"`
}

// Walk : if the WalkHandlers.XElemsStyle function is not nil (ie. was set by outside code), calls it with this XElemsStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStyle instance.
func (me *XElemsStyle) Walk() (err error) {
	if fn := WalkHandlers.XElemsStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Styles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TcursorType defines type cursorType
type TcursorType struct {
	XAttsXlinkRefAttrs
	XAttsTestAttrs
	XAttrXTCoordinateType
	XAttrYTCoordinateType
	xlink.XAttrHref
	XAttrExternalResourcesRequiredXsdtBoolean
	XGroupDescTitleMetadata
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TcursorType function is not nil (ie. was set by outside code), calls it with this TcursorType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TcursorType instance.
func (me *TcursorType) Walk() (err error) {
	if fn := WalkHandlers.TcursorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCursor defines element Cursor
type XElemsCursor struct {
	Cursors []*TcursorType `xml:"http://www.w3.org/2000/svg cursor"`
}

// Walk : if the WalkHandlers.XElemsCursor function is not nil (ie. was set by outside code), calls it with this XElemsCursor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCursor instance.
func (me *XElemsCursor) Walk() (err error) {
	if fn := WalkHandlers.XElemsCursor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Cursors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TdefinitionSrcType defines type definitionSrcType
type TdefinitionSrcType struct {
	XAttsStdAttrs
	XAttsXlinkRefAttrs
	xlink.XAttrHref
}

// Walk : if the WalkHandlers.TdefinitionSrcType function is not nil (ie. was set by outside code), calls it with this TdefinitionSrcType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TdefinitionSrcType instance.
func (me *TdefinitionSrcType) Walk() (err error) {
	if fn := WalkHandlers.TdefinitionSrcType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDefinitionSrc defines element DefinitionSrc
type XElemDefinitionSrc struct {
	DefinitionSrc *TdefinitionSrcType `xml:"http://www.w3.org/2000/svg definition-src"`
}

// Walk : if the WalkHandlers.XElemDefinitionSrc function is not nil (ie. was set by outside code), calls it with this XElemDefinitionSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDefinitionSrc instance.
func (me *XElemDefinitionSrc) Walk() (err error) {
	if fn := WalkHandlers.XElemDefinitionSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DefinitionSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrStemhXsdtDouble defines attribute Stemh
type XAttrStemhXsdtDouble struct {
	Stemh xsdt.Double `xml:"stemh,attr,omitempty"`
}

// XAttrCapHeightXsdtDouble defines attribute CapHeight
type XAttrCapHeightXsdtDouble struct {
	CapHeight xsdt.Double `xml:"cap-height,attr,omitempty"`
}

// XAttrDescentXsdtDouble defines attribute Descent
type XAttrDescentXsdtDouble struct {
	Descent xsdt.Double `xml:"descent,attr,omitempty"`
}

// XAttrFontStyleXsdtString defines attribute FontStyle
type XAttrFontStyleXsdtString struct {
	FontStyle xsdt.String `xml:"font-style,attr,omitempty"`
}

// XAttrAscentXsdtDouble defines attribute Ascent
type XAttrAscentXsdtDouble struct {
	Ascent xsdt.Double `xml:"ascent,attr,omitempty"`
}

// XAttrUnicodeRangeXsdtString defines attribute UnicodeRange
type XAttrUnicodeRangeXsdtString struct {
	UnicodeRange xsdt.String `xml:"unicode-range,attr,omitempty"`
}

// XAttrPanose1XsdtString defines attribute Panose1
type XAttrPanose1XsdtString struct {
	Panose1 xsdt.String `xml:"panose-1,attr,omitempty"`
}

// XAttrIDeographicXsdtDouble defines attribute Ideographic
type XAttrIDeographicXsdtDouble struct {
	Ideographic xsdt.Double `xml:"ideographic,attr,omitempty"`
}

// XAttrBaselineXsdtDouble defines attribute Baseline
type XAttrBaselineXsdtDouble struct {
	Baseline xsdt.Double `xml:"baseline,attr,omitempty"`
}

// XAttrStrikethroughPositionXsdtDouble defines attribute StrikethroughPosition
type XAttrStrikethroughPositionXsdtDouble struct {
	StrikethroughPosition xsdt.Double `xml:"strikethrough-position,attr,omitempty"`
}

// XAttrOverlinePositionXsdtDouble defines attribute OverlinePosition
type XAttrOverlinePositionXsdtDouble struct {
	OverlinePosition xsdt.Double `xml:"overline-position,attr,omitempty"`
}

// XAttrUnderlinePositionXsdtDouble defines attribute UnderlinePosition
type XAttrUnderlinePositionXsdtDouble struct {
	UnderlinePosition xsdt.Double `xml:"underline-position,attr,omitempty"`
}

// XAttrXHeightXsdtDouble defines attribute XHeight
type XAttrXHeightXsdtDouble struct {
	XHeight xsdt.Double `xml:"x-height,attr,omitempty"`
}

// XAttrStrikethroughThicknessXsdtDouble defines attribute StrikethroughThickness
type XAttrStrikethroughThicknessXsdtDouble struct {
	StrikethroughThickness xsdt.Double `xml:"strikethrough-thickness,attr,omitempty"`
}

// XAttrHangingXsdtDouble defines attribute Hanging
type XAttrHangingXsdtDouble struct {
	Hanging xsdt.Double `xml:"hanging,attr,omitempty"`
}

// XAttrCenterlineXsdtDouble defines attribute Centerline
type XAttrCenterlineXsdtDouble struct {
	Centerline xsdt.Double `xml:"centerline,attr,omitempty"`
}

// XAttrStemvXsdtDouble defines attribute Stemv
type XAttrStemvXsdtDouble struct {
	Stemv xsdt.Double `xml:"stemv,attr,omitempty"`
}

// XAttrFontVariantXsdtString defines attribute FontVariant
type XAttrFontVariantXsdtString struct {
	FontVariant xsdt.String `xml:"font-variant,attr,omitempty"`
}

// XAttrFontStretchXsdtString defines attribute FontStretch
type XAttrFontStretchXsdtString struct {
	FontStretch xsdt.String `xml:"font-stretch,attr,omitempty"`
}

// XAttrAccentHeightXsdtDouble defines attribute AccentHeight
type XAttrAccentHeightXsdtDouble struct {
	AccentHeight xsdt.Double `xml:"accent-height,attr,omitempty"`
}

// XAttrStringXsdtString defines attribute String
type XAttrStringXsdtString struct {
	String xsdt.String `xml:"string,attr,omitempty"`
}

// TfontFaceFormatType defines type fontFaceFormatType
type TfontFaceFormatType struct {
	XAttsStdAttrs
	XAttrStringXsdtString
}

// Walk : if the WalkHandlers.TfontFaceFormatType function is not nil (ie. was set by outside code), calls it with this TfontFaceFormatType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfontFaceFormatType instance.
func (me *TfontFaceFormatType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceFormatType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFontFaceFormat defines element FontFaceFormat
type XElemFontFaceFormat struct {
	FontFaceFormat *TfontFaceFormatType `xml:"http://www.w3.org/2000/svg font-face-format"`
}

// Walk : if the WalkHandlers.XElemFontFaceFormat function is not nil (ie. was set by outside code), calls it with this XElemFontFaceFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFontFaceFormat instance.
func (me *XElemFontFaceFormat) Walk() (err error) {
	if fn := WalkHandlers.XElemFontFaceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfontFaceURIType defines type fontFaceURIType
type TfontFaceURIType struct {
	xlink.XAttrHref
	XElemFontFaceFormat
	XAttsXlinkRefAttrs
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TfontFaceURIType function is not nil (ie. was set by outside code), calls it with this TfontFaceURIType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TfontFaceURIType instance.
func (me *TfontFaceURIType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceURIType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemFontFaceFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFontFaceURI defines element FontFaceURI
type XElemsFontFaceURI struct {
	FontFaceURIs []*TfontFaceURIType `xml:"http://www.w3.org/2000/svg font-face-uri"`
}

// Walk : if the WalkHandlers.XElemsFontFaceURI function is not nil (ie. was set by outside code), calls it with this XElemsFontFaceURI instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFontFaceURI instance.
func (me *XElemsFontFaceURI) Walk() (err error) {
	if fn := WalkHandlers.XElemsFontFaceURI; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceURIs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfontFaceNameType defines type fontFaceNameType
type TfontFaceNameType struct {
	XAttsStdAttrs
	XAttrNameXsdtString
}

// Walk : if the WalkHandlers.TfontFaceNameType function is not nil (ie. was set by outside code), calls it with this TfontFaceNameType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TfontFaceNameType instance.
func (me *TfontFaceNameType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFontFaceName defines element FontFaceName
type XElemsFontFaceName struct {
	FontFaceNames []*TfontFaceNameType `xml:"http://www.w3.org/2000/svg font-face-name"`
}

// Walk : if the WalkHandlers.XElemsFontFaceName function is not nil (ie. was set by outside code), calls it with this XElemsFontFaceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFontFaceName instance.
func (me *XElemsFontFaceName) Walk() (err error) {
	if fn := WalkHandlers.XElemsFontFaceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfontFaceSrcType defines type fontFaceSrcType
type TfontFaceSrcType struct {
	XElemsFontFaceURI
	XElemsFontFaceName
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TfontFaceSrcType function is not nil (ie. was set by outside code), calls it with this TfontFaceSrcType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TfontFaceSrcType instance.
func (me *TfontFaceSrcType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceSrcType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsFontFaceURI.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFaceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFontFaceSrc defines element FontFaceSrc
type XElemFontFaceSrc struct {
	FontFaceSrc *TfontFaceSrcType `xml:"http://www.w3.org/2000/svg font-face-src"`
}

// Walk : if the WalkHandlers.XElemFontFaceSrc function is not nil (ie. was set by outside code), calls it with this XElemFontFaceSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFontFaceSrc instance.
func (me *XElemFontFaceSrc) Walk() (err error) {
	if fn := WalkHandlers.XElemFontFaceSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrFontWeightXsdtString defines attribute FontWeight
type XAttrFontWeightXsdtString struct {
	FontWeight xsdt.String `xml:"font-weight,attr,omitempty"`
}

// XAttrUnitsPerEmXsdtDouble defines attribute UnitsPerEm
type XAttrUnitsPerEmXsdtDouble struct {
	UnitsPerEm xsdt.Double `xml:"units-per-em,attr,omitempty"`
}

// XAttrWidthsXsdtString defines attribute Widths
type XAttrWidthsXsdtString struct {
	Widths xsdt.String `xml:"widths,attr,omitempty"`
}

// XAttrToplineXsdtDouble defines attribute Topline
type XAttrToplineXsdtDouble struct {
	Topline xsdt.Double `xml:"topline,attr,omitempty"`
}

// XAttrOverlineThicknessXsdtDouble defines attribute OverlineThickness
type XAttrOverlineThicknessXsdtDouble struct {
	OverlineThickness xsdt.Double `xml:"overline-thickness,attr,omitempty"`
}

// XAttrMathlineXsdtDouble defines attribute Mathline
type XAttrMathlineXsdtDouble struct {
	Mathline xsdt.Double `xml:"mathline,attr,omitempty"`
}

// XAttrUnderlineThicknessXsdtDouble defines attribute UnderlineThickness
type XAttrUnderlineThicknessXsdtDouble struct {
	UnderlineThickness xsdt.Double `xml:"underline-thickness,attr,omitempty"`
}

// XAttrBboxXsdtString defines attribute Bbox
type XAttrBboxXsdtString struct {
	Bbox xsdt.String `xml:"bbox,attr,omitempty"`
}

// TfontFaceType defines type fontFaceType
type TfontFaceType struct {
	XElemFontFaceSrc
	XGroupDescTitleMetadata
	XAttrFontWeightXsdtString
	XAttrUnitsPerEmXsdtDouble
	XAttrBboxXsdtString
	XAttrWidthsXsdtString
	XAttrToplineXsdtDouble
	XAttrOverlineThicknessXsdtDouble
	XAttrMathlineXsdtDouble
	XAttrUnderlineThicknessXsdtDouble
	XAttrFontStyleXsdtString
	XElemDefinitionSrc
	XAttrSlopeXsdtDouble
	XAttrStemhXsdtDouble
	XAttrCapHeightXsdtDouble
	XAttrDescentXsdtDouble
	XAttrBaselineXsdtDouble
	XAttrStrikethroughPositionXsdtDouble
	XAttrOverlinePositionXsdtDouble
	XAttrAscentXsdtDouble
	XAttrUnicodeRangeXsdtString
	XAttrPanose1XsdtString
	XAttrFontFamilyTFontFamilyValueType
	XAttrIDeographicXsdtDouble
	XAttrUnderlinePositionXsdtDouble
	XAttrFontSizeTFontSizeValueType
	XAttrXHeightXsdtDouble
	XAttrStrikethroughThicknessXsdtDouble
	XAttrHangingXsdtDouble
	XAttrCenterlineXsdtDouble
	XAttrStemvXsdtDouble
	XAttrFontVariantXsdtString
	XAttrFontStretchXsdtString
	XAttsStdAttrs
	XAttrAccentHeightXsdtDouble
}

// Walk : if the WalkHandlers.TfontFaceType function is not nil (ie. was set by outside code), calls it with this TfontFaceType instance as the single argument. Then calls the Walk() method on 3/35 embed(s) and 0/0 field(s) belonging to this TfontFaceType instance.
func (me *TfontFaceType) Walk() (err error) {
	if fn := WalkHandlers.TfontFaceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemFontFaceSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemDefinitionSrc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFontFace defines element FontFace
type XElemsFontFace struct {
	FontFaces []*TfontFaceType `xml:"http://www.w3.org/2000/svg font-face"`
}

// Walk : if the WalkHandlers.XElemsFontFace function is not nil (ie. was set by outside code), calls it with this XElemsFontFace instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFontFace instance.
func (me *XElemsFontFace) Walk() (err error) {
	if fn := WalkHandlers.XElemsFontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaces {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPreserveAspectRatioSpecType 'preserveAspectRatio' attribute specification
type TPreserveAspectRatioSpecType xsdt.String

// Set : Since TPreserveAspectRatioSpecType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPreserveAspectRatioSpecType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TPreserveAspectRatioSpecType is just a simple String type, this merely returns the current string value.
func (me TPreserveAspectRatioSpecType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TPreserveAspectRatioSpecType's alias type xsdt.String.
func (me TPreserveAspectRatioSpecType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet defines attribute PreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
type XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet struct {
	PreserveAspectRatio TPreserveAspectRatioSpecType `xml:"preserveAspectRatio,attr,omitempty"`
}

// PreserveAspectRatioDefault : Returns the default value for PreserveAspectRatio -- "xMidYMid meet"
func (me XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet) PreserveAspectRatioDefault() TPreserveAspectRatioSpecType {
	return TPreserveAspectRatioSpecType("xMidYMid meet")
}

// TxsdMarkerTypeMarkerUnits defines type xsdMarkerTypeMarkerUnits
type TxsdMarkerTypeMarkerUnits xsdt.String

// String : Since TxsdMarkerTypeMarkerUnits is just a simple String type, this merely returns the current string value.
func (me TxsdMarkerTypeMarkerUnits) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdMarkerTypeMarkerUnits's alias type xsdt.String.
func (me TxsdMarkerTypeMarkerUnits) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsStrokeWidth : Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "strokeWidth".
func (me TxsdMarkerTypeMarkerUnits) IsStrokeWidth() bool { return me.String() == "strokeWidth" }

// IsUserSpaceOnUse : Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "userSpaceOnUse".
func (me TxsdMarkerTypeMarkerUnits) IsUserSpaceOnUse() bool { return me.String() == "userSpaceOnUse" }

// IsUserSpace : Returns true if the value of this enumerated TxsdMarkerTypeMarkerUnits is "userSpace".
func (me TxsdMarkerTypeMarkerUnits) IsUserSpace() bool { return me.String() == "userSpace" }

// Set : Since TxsdMarkerTypeMarkerUnits is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdMarkerTypeMarkerUnits) Set(s string) { (*xsdt.String)(me).Set(s) }

// XAttrMarkerUnitsTxsdMarkerTypeMarkerUnits defines attribute MarkerUnitsTxsdMarkerTypeMarkerUnits
type XAttrMarkerUnitsTxsdMarkerTypeMarkerUnits struct {
	MarkerUnits TxsdMarkerTypeMarkerUnits `xml:"markerUnits,attr,omitempty"`
}

// XAttrY1TCoordinateType defines attribute Y1TCoordinateType
type XAttrY1TCoordinateType struct {
	Y1 TCoordinateType `xml:"y1,attr,omitempty"`
}

// TxsdLinearGradientTypeSpreadMethod defines type xsdLinearGradientTypeSpreadMethod
type TxsdLinearGradientTypeSpreadMethod xsdt.String

// Set : Since TxsdLinearGradientTypeSpreadMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdLinearGradientTypeSpreadMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdLinearGradientTypeSpreadMethod is just a simple String type, this merely returns the current string value.
func (me TxsdLinearGradientTypeSpreadMethod) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdLinearGradientTypeSpreadMethod's alias type xsdt.String.
func (me TxsdLinearGradientTypeSpreadMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsPad : Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "pad".
func (me TxsdLinearGradientTypeSpreadMethod) IsPad() bool { return me.String() == "pad" }

// IsReflect : Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "reflect".
func (me TxsdLinearGradientTypeSpreadMethod) IsReflect() bool { return me.String() == "reflect" }

// IsRepeat : Returns true if the value of this enumerated TxsdLinearGradientTypeSpreadMethod is "repeat".
func (me TxsdLinearGradientTypeSpreadMethod) IsRepeat() bool { return me.String() == "repeat" }

// XAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad defines attribute SpreadMethodTxsdLinearGradientTypeSpreadMethodPad
type XAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad struct {
	SpreadMethod TxsdLinearGradientTypeSpreadMethod `xml:"spreadMethod,attr,omitempty"`
}

// SpreadMethodDefault : Returns the default value for SpreadMethod -- "pad"
func (me XAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad) SpreadMethodDefault() TxsdLinearGradientTypeSpreadMethod {
	return TxsdLinearGradientTypeSpreadMethod("pad")
}

// XAttrY2TCoordinateType defines attribute Y2TCoordinateType
type XAttrY2TCoordinateType struct {
	Y2 TCoordinateType `xml:"y2,attr,omitempty"`
}

// XAttrX1TCoordinateType defines attribute X1TCoordinateType
type XAttrX1TCoordinateType struct {
	X1 TCoordinateType `xml:"x1,attr,omitempty"`
}

// XAttrOffsetTLengthType defines attribute OffsetTLengthType
type XAttrOffsetTLengthType struct {
	Offset TLengthType `xml:"offset,attr,omitempty"`
}

// TstopType defines type stopType
type TstopType struct {
	XElemsAnimateColor
	XAttsPresentationAttributesGradients
	XAttsStdAttrs
	XAttrClassTClassListType
	XAttrStyleTStyleSheetType
	XAttrOffsetTLengthType
	XElemsAnimate
	XElemsSet
}

// Walk : if the WalkHandlers.TstopType function is not nil (ie. was set by outside code), calls it with this TstopType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TstopType instance.
func (me *TstopType) Walk() (err error) {
	if fn := WalkHandlers.TstopType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsStop defines element Stop
type XElemsStop struct {
	Stops []*TstopType `xml:"http://www.w3.org/2000/svg stop"`
}

// Walk : if the WalkHandlers.XElemsStop function is not nil (ie. was set by outside code), calls it with this XElemsStop instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStop instance.
func (me *XElemsStop) Walk() (err error) {
	if fn := WalkHandlers.XElemsStop; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Stops {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrGradientUnitsTxsdLinearGradientTypeGradientUnits defines attribute GradientUnitsTxsdLinearGradientTypeGradientUnits
type XAttrGradientUnitsTxsdLinearGradientTypeGradientUnits struct {
	GradientUnits TxsdClipPathTypeClipPathUnits `xml:"gradientUnits,attr,omitempty"`
}

// XAttrX2TCoordinateType defines attribute X2TCoordinateType
type XAttrX2TCoordinateType struct {
	X2 TCoordinateType `xml:"x2,attr,omitempty"`
}

// XAttrGradientTransformTransformListType defines attribute GradientTransformTransformListType
type XAttrGradientTransformTransformListType struct {
	GradientTransform TransformListType `xml:"gradientTransform,attr,omitempty"`
}

// TlinearGradientType defines type linearGradientType
type TlinearGradientType struct {
	XAttrSpreadMethodTxsdLinearGradientTypeSpreadMethodPad
	xlink.XAttrHref
	XAttrY2TCoordinateType
	XAttrX1TCoordinateType
	XElemsStop
	XAttrGradientUnitsTxsdLinearGradientTypeGradientUnits
	XAttrX2TCoordinateType
	XAttsXlinkRefAttrs
	XAttrGradientTransformTransformListType
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsStdAttrs
	XAttrClassTClassListType
	XAttrStyleTStyleSheetType
	XAttrY1TCoordinateType
	XElemsAnimate
	XElemsSet
	XAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TlinearGradientType function is not nil (ie. was set by outside code), calls it with this TlinearGradientType instance as the single argument. Then calls the Walk() method on 5/18 embed(s) and 0/0 field(s) belonging to this TlinearGradientType instance.
func (me *TlinearGradientType) Walk() (err error) {
	if fn := WalkHandlers.TlinearGradientType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsStop.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsLinearGradient defines element LinearGradient
type XElemsLinearGradient struct {
	LinearGradients []*TlinearGradientType `xml:"http://www.w3.org/2000/svg linearGradient"`
}

// Walk : if the WalkHandlers.XElemsLinearGradient function is not nil (ie. was set by outside code), calls it with this XElemsLinearGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsLinearGradient instance.
func (me *XElemsLinearGradient) Walk() (err error) {
	if fn := WalkHandlers.XElemsLinearGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LinearGradients {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeBlendTypeMode defines type xsdFeBlendTypeMode
type TxsdFeBlendTypeMode xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeBlendTypeMode's alias type xsdt.String.
func (me TxsdFeBlendTypeMode) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsNormal : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "normal".
func (me TxsdFeBlendTypeMode) IsNormal() bool { return me.String() == "normal" }

// IsMultiply : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "multiply".
func (me TxsdFeBlendTypeMode) IsMultiply() bool { return me.String() == "multiply" }

// IsScreen : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "screen".
func (me TxsdFeBlendTypeMode) IsScreen() bool { return me.String() == "screen" }

// IsDarken : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "darken".
func (me TxsdFeBlendTypeMode) IsDarken() bool { return me.String() == "darken" }

// IsLighten : Returns true if the value of this enumerated TxsdFeBlendTypeMode is "lighten".
func (me TxsdFeBlendTypeMode) IsLighten() bool { return me.String() == "lighten" }

// Set : Since TxsdFeBlendTypeMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeBlendTypeMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeBlendTypeMode is just a simple String type, this merely returns the current string value.
func (me TxsdFeBlendTypeMode) String() string { return xsdt.String(me).String() }

// XAttrModeTxsdFeBlendTypeModeNormal defines attribute ModeTxsdFeBlendTypeModeNormal
type XAttrModeTxsdFeBlendTypeModeNormal struct {
	Mode TxsdFeBlendTypeMode `xml:"mode,attr,omitempty"`
}

// ModeDefault : Returns the default value for Mode -- "normal"
func (me XAttrModeTxsdFeBlendTypeModeNormal) ModeDefault() TxsdFeBlendTypeMode {
	return TxsdFeBlendTypeMode("normal")
}

// XAttrIn2XsdtString defines attribute In2
type XAttrIn2XsdtString struct {
	In2 xsdt.String `xml:"in2,attr,omitempty"`
}

// TfeBlendType defines type feBlendType
type TfeBlendType struct {
	XAttrIn2XsdtString
	XAttrModeTxsdFeBlendTypeModeNormal
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeBlendType function is not nil (ie. was set by outside code), calls it with this TfeBlendType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeBlendType instance.
func (me *TfeBlendType) Walk() (err error) {
	if fn := WalkHandlers.TfeBlendType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeBlend defines element FeBlend
type XElemsFeBlend struct {
	FeBlends []*TfeBlendType `xml:"http://www.w3.org/2000/svg feBlend"`
}

// Walk : if the WalkHandlers.XElemsFeBlend function is not nil (ie. was set by outside code), calls it with this XElemsFeBlend instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeBlend instance.
func (me *XElemsFeBlend) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeBlend; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeBlends {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTypeTxsdFeFuncRTypeType defines attribute TypeTxsdFeFuncRTypeType
type XAttrTypeTxsdFeFuncRTypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"type,attr,omitempty"`
}

// TfeFuncRType defines type feFuncRType
type TfeFuncRType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsComponentTransferFunctionAttributes
	XAttrTypeTxsdFeFuncRTypeType
}

// Walk : if the WalkHandlers.TfeFuncRType function is not nil (ie. was set by outside code), calls it with this TfeFuncRType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncRType instance.
func (me *TfeFuncRType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncRType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeFuncR defines element FeFuncR
type XElemFeFuncR struct {
	FeFuncR *TfeFuncRType `xml:"http://www.w3.org/2000/svg feFuncR"`
}

// Walk : if the WalkHandlers.XElemFeFuncR function is not nil (ie. was set by outside code), calls it with this XElemFeFuncR instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeFuncR instance.
func (me *XElemFeFuncR) Walk() (err error) {
	if fn := WalkHandlers.XElemFeFuncR; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncR.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTypeTxsdFeFuncGTypeType defines attribute TypeTxsdFeFuncGTypeType
type XAttrTypeTxsdFeFuncGTypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"type,attr,omitempty"`
}

// TfeFuncGType defines type feFuncGType
type TfeFuncGType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsComponentTransferFunctionAttributes
	XAttrTypeTxsdFeFuncGTypeType
}

// Walk : if the WalkHandlers.TfeFuncGType function is not nil (ie. was set by outside code), calls it with this TfeFuncGType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncGType instance.
func (me *TfeFuncGType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncGType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeFuncG defines element FeFuncG
type XElemFeFuncG struct {
	FeFuncG *TfeFuncGType `xml:"http://www.w3.org/2000/svg feFuncG"`
}

// Walk : if the WalkHandlers.XElemFeFuncG function is not nil (ie. was set by outside code), calls it with this XElemFeFuncG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeFuncG instance.
func (me *XElemFeFuncG) Walk() (err error) {
	if fn := WalkHandlers.XElemFeFuncG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTypeTxsdFeFuncBTypeType defines attribute TypeTxsdFeFuncBTypeType
type XAttrTypeTxsdFeFuncBTypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"type,attr,omitempty"`
}

// TfeFuncBType defines type feFuncBType
type TfeFuncBType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsComponentTransferFunctionAttributes
	XAttrTypeTxsdFeFuncBTypeType
}

// Walk : if the WalkHandlers.TfeFuncBType function is not nil (ie. was set by outside code), calls it with this TfeFuncBType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncBType instance.
func (me *TfeFuncBType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncBType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeFuncB defines element FeFuncB
type XElemFeFuncB struct {
	FeFuncB *TfeFuncBType `xml:"http://www.w3.org/2000/svg feFuncB"`
}

// Walk : if the WalkHandlers.XElemFeFuncB function is not nil (ie. was set by outside code), calls it with this XElemFeFuncB instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeFuncB instance.
func (me *XElemFeFuncB) Walk() (err error) {
	if fn := WalkHandlers.XElemFeFuncB; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncB.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTypeTxsdFeFuncATypeType defines attribute TypeTxsdFeFuncATypeType
type XAttrTypeTxsdFeFuncATypeType struct {
	Type TxsdComponentTransferFunctionAttributesType `xml:"type,attr,omitempty"`
}

// TfeFuncAType defines type feFuncAType
type TfeFuncAType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsComponentTransferFunctionAttributes
	XAttrTypeTxsdFeFuncATypeType
}

// Walk : if the WalkHandlers.TfeFuncAType function is not nil (ie. was set by outside code), calls it with this TfeFuncAType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeFuncAType instance.
func (me *TfeFuncAType) Walk() (err error) {
	if fn := WalkHandlers.TfeFuncAType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeFuncA defines element FeFuncA
type XElemFeFuncA struct {
	FeFuncA *TfeFuncAType `xml:"http://www.w3.org/2000/svg feFuncA"`
}

// Walk : if the WalkHandlers.XElemFeFuncA function is not nil (ie. was set by outside code), calls it with this XElemFeFuncA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeFuncA instance.
func (me *XElemFeFuncA) Walk() (err error) {
	if fn := WalkHandlers.XElemFeFuncA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFuncA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeComponentTransferType defines type feComponentTransferType
type TfeComponentTransferType struct {
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
	XElemFeFuncR
	XElemFeFuncG
	XElemFeFuncB
	XElemFeFuncA
}

// Walk : if the WalkHandlers.TfeComponentTransferType function is not nil (ie. was set by outside code), calls it with this TfeComponentTransferType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TfeComponentTransferType instance.
func (me *TfeComponentTransferType) Walk() (err error) {
	if fn := WalkHandlers.TfeComponentTransferType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemFeFuncR.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFeFuncG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFeFuncB.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFeFuncA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeComponentTransfer defines element FeComponentTransfer
type XElemsFeComponentTransfer struct {
	FeComponentTransfers []*TfeComponentTransferType `xml:"http://www.w3.org/2000/svg feComponentTransfer"`
}

// Walk : if the WalkHandlers.XElemsFeComponentTransfer function is not nil (ie. was set by outside code), calls it with this XElemsFeComponentTransfer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeComponentTransfer instance.
func (me *XElemsFeComponentTransfer) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeComponentTransfer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeComponentTransfers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeConvolveMatrixTypeEdgeMode defines type xsdFeConvolveMatrixTypeEdgeMode
type TxsdFeConvolveMatrixTypeEdgeMode xsdt.String

// Set : Since TxsdFeConvolveMatrixTypeEdgeMode is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeConvolveMatrixTypeEdgeMode) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeConvolveMatrixTypeEdgeMode is just a simple String type, this merely returns the current string value.
func (me TxsdFeConvolveMatrixTypeEdgeMode) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeConvolveMatrixTypeEdgeMode's alias type xsdt.String.
func (me TxsdFeConvolveMatrixTypeEdgeMode) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsDuplicate : Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "duplicate".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsDuplicate() bool { return me.String() == "duplicate" }

// IsWrap : Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "wrap".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsWrap() bool { return me.String() == "wrap" }

// IsNone : Returns true if the value of this enumerated TxsdFeConvolveMatrixTypeEdgeMode is "none".
func (me TxsdFeConvolveMatrixTypeEdgeMode) IsNone() bool { return me.String() == "none" }

// XAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate defines attribute EdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate
type XAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate struct {
	EdgeMode TxsdFeConvolveMatrixTypeEdgeMode `xml:"edgeMode,attr,omitempty"`
}

// EdgeModeDefault : Returns the default value for EdgeMode -- "duplicate"
func (me XAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate) EdgeModeDefault() TxsdFeConvolveMatrixTypeEdgeMode {
	return TxsdFeConvolveMatrixTypeEdgeMode("duplicate")
}

// XAttrPreserveAlphaXsdtBoolean defines attribute PreserveAlpha
type XAttrPreserveAlphaXsdtBoolean struct {
	PreserveAlpha xsdt.Boolean `xml:"preserveAlpha,attr,omitempty"`
}

// XAttrBiasXsdtDouble defines attribute Bias
type XAttrBiasXsdtDouble struct {
	Bias xsdt.Double `xml:"bias,attr,omitempty"`
}

// XAttrTargetXXsdtInteger defines attribute TargetX
type XAttrTargetXXsdtInteger struct {
	TargetX xsdt.Integer `xml:"targetX,attr,omitempty"`
}

// XAttrKernelUnitLengthXsdtString defines attribute KernelUnitLength
type XAttrKernelUnitLengthXsdtString struct {
	KernelUnitLength xsdt.String `xml:"kernelUnitLength,attr,omitempty"`
}

// XAttrKernelMatrixXsdtString defines attribute KernelMatrix
type XAttrKernelMatrixXsdtString struct {
	KernelMatrix xsdt.String `xml:"kernelMatrix,attr,omitempty"`
}

// XAttrTargetYXsdtInteger defines attribute TargetY
type XAttrTargetYXsdtInteger struct {
	TargetY xsdt.Integer `xml:"targetY,attr,omitempty"`
}

// XAttrDivisorXsdtDouble defines attribute Divisor
type XAttrDivisorXsdtDouble struct {
	Divisor xsdt.Double `xml:"divisor,attr,omitempty"`
}

// XAttrOrderXsdtString defines attribute Order
type XAttrOrderXsdtString struct {
	Order xsdt.String `xml:"order,attr,omitempty"`
}

// TfeConvolveMatrixType defines type feConvolveMatrixType
type TfeConvolveMatrixType struct {
	XAttrKernelMatrixXsdtString
	XAttrTargetYXsdtInteger
	XAttrEdgeModeTxsdFeConvolveMatrixTypeEdgeModeDuplicate
	XAttrPreserveAlphaXsdtBoolean
	XAttrBiasXsdtDouble
	XAttrTargetXXsdtInteger
	XAttrKernelUnitLengthXsdtString
	XElemsAnimate
	XAttsFilterPrimitiveAttributesWithIn
	XAttrOrderXsdtString
	XAttrDivisorXsdtDouble
	XElemsSet
}

// Walk : if the WalkHandlers.TfeConvolveMatrixType function is not nil (ie. was set by outside code), calls it with this TfeConvolveMatrixType instance as the single argument. Then calls the Walk() method on 2/12 embed(s) and 0/0 field(s) belonging to this TfeConvolveMatrixType instance.
func (me *TfeConvolveMatrixType) Walk() (err error) {
	if fn := WalkHandlers.TfeConvolveMatrixType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeConvolveMatrix defines element FeConvolveMatrix
type XElemsFeConvolveMatrix struct {
	FeConvolveMatrixs []*TfeConvolveMatrixType `xml:"http://www.w3.org/2000/svg feConvolveMatrix"`
}

// Walk : if the WalkHandlers.XElemsFeConvolveMatrix function is not nil (ie. was set by outside code), calls it with this XElemsFeConvolveMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeConvolveMatrix instance.
func (me *XElemsFeConvolveMatrix) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeConvolveMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeConvolveMatrixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeFloodType defines type feFloodType
type TfeFloodType struct {
	XAttrStyleTStyleSheetType
	XElemsAnimate
	XElemsSet
	XElemsAnimateColor
	XAttsStdAttrs
	XAttsPresentationAttributesFeFlood
	XAttsFilterPrimitiveAttributesWithIn
	XAttrClassTClassListType
}

// Walk : if the WalkHandlers.TfeFloodType function is not nil (ie. was set by outside code), calls it with this TfeFloodType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TfeFloodType instance.
func (me *TfeFloodType) Walk() (err error) {
	if fn := WalkHandlers.TfeFloodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeFlood defines element FeFlood
type XElemsFeFlood struct {
	FeFloods []*TfeFloodType `xml:"http://www.w3.org/2000/svg feFlood"`
}

// Walk : if the WalkHandlers.XElemsFeFlood function is not nil (ie. was set by outside code), calls it with this XElemsFeFlood instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeFlood instance.
func (me *XElemsFeFlood) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeFlood; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFloods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrPrimitiveUnitsTxsdFilterTypePrimitiveUnits defines attribute PrimitiveUnitsTxsdFilterTypePrimitiveUnits
type XAttrPrimitiveUnitsTxsdFilterTypePrimitiveUnits struct {
	PrimitiveUnits TxsdClipPathTypeClipPathUnits `xml:"primitiveUnits,attr,omitempty"`
}

// XAttrStdDeviationXsdtString defines attribute StdDeviation
type XAttrStdDeviationXsdtString struct {
	StdDeviation xsdt.String `xml:"stdDeviation,attr,omitempty"`
}

// TfeGaussianBlurType defines type feGaussianBlurType
type TfeGaussianBlurType struct {
	XAttrStdDeviationXsdtString
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeGaussianBlurType function is not nil (ie. was set by outside code), calls it with this TfeGaussianBlurType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeGaussianBlurType instance.
func (me *TfeGaussianBlurType) Walk() (err error) {
	if fn := WalkHandlers.TfeGaussianBlurType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeGaussianBlur defines element FeGaussianBlur
type XElemsFeGaussianBlur struct {
	FeGaussianBlurs []*TfeGaussianBlurType `xml:"http://www.w3.org/2000/svg feGaussianBlur"`
}

// Walk : if the WalkHandlers.XElemsFeGaussianBlur function is not nil (ie. was set by outside code), calls it with this XElemsFeGaussianBlur instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeGaussianBlur instance.
func (me *XElemsFeGaussianBlur) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeGaussianBlur; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeGaussianBlurs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAzimuthXsdtDouble defines attribute Azimuth
type XAttrAzimuthXsdtDouble struct {
	Azimuth xsdt.Double `xml:"azimuth,attr,omitempty"`
}

// XAttrElevationXsdtDouble defines attribute Elevation
type XAttrElevationXsdtDouble struct {
	Elevation xsdt.Double `xml:"elevation,attr,omitempty"`
}

// TfeDistantLightType defines type feDistantLightType
type TfeDistantLightType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttrAzimuthXsdtDouble
	XAttrElevationXsdtDouble
}

// Walk : if the WalkHandlers.TfeDistantLightType function is not nil (ie. was set by outside code), calls it with this TfeDistantLightType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TfeDistantLightType instance.
func (me *TfeDistantLightType) Walk() (err error) {
	if fn := WalkHandlers.TfeDistantLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeDistantLight defines element FeDistantLight
type XElemFeDistantLight struct {
	FeDistantLight *TfeDistantLightType `xml:"http://www.w3.org/2000/svg feDistantLight"`
}

// Walk : if the WalkHandlers.XElemFeDistantLight function is not nil (ie. was set by outside code), calls it with this XElemFeDistantLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeDistantLight instance.
func (me *XElemFeDistantLight) Walk() (err error) {
	if fn := WalkHandlers.XElemFeDistantLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeDistantLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrYXsdtDouble defines attribute Y
type XAttrYXsdtDouble struct {
	Y xsdt.Double `xml:"y,attr,omitempty"`
}

// XAttrPointsAtYXsdtDouble defines attribute PointsAtY
type XAttrPointsAtYXsdtDouble struct {
	PointsAtY xsdt.Double `xml:"pointsAtY,attr,omitempty"`
}

// XAttrSpecularExponentXsdtDouble defines attribute SpecularExponent
type XAttrSpecularExponentXsdtDouble struct {
	SpecularExponent xsdt.Double `xml:"specularExponent,attr,omitempty"`
}

// XAttrLimitingConeAngleXsdtDouble defines attribute LimitingConeAngle
type XAttrLimitingConeAngleXsdtDouble struct {
	LimitingConeAngle xsdt.Double `xml:"limitingConeAngle,attr,omitempty"`
}

// XAttrXXsdtDouble defines attribute X
type XAttrXXsdtDouble struct {
	X xsdt.Double `xml:"x,attr,omitempty"`
}

// XAttrZXsdtDouble defines attribute Z
type XAttrZXsdtDouble struct {
	Z xsdt.Double `xml:"z,attr,omitempty"`
}

// XAttrPointsAtXXsdtDouble defines attribute PointsAtX
type XAttrPointsAtXXsdtDouble struct {
	PointsAtX xsdt.Double `xml:"pointsAtX,attr,omitempty"`
}

// XAttrPointsAtZXsdtDouble defines attribute PointsAtZ
type XAttrPointsAtZXsdtDouble struct {
	PointsAtZ xsdt.Double `xml:"pointsAtZ,attr,omitempty"`
}

// TfeSpotLightType defines type feSpotLightType
type TfeSpotLightType struct {
	XElemsSet
	XAttrPointsAtXXsdtDouble
	XAttrPointsAtZXsdtDouble
	XAttrSpecularExponentXsdtDouble
	XAttrLimitingConeAngleXsdtDouble
	XAttrXXsdtDouble
	XAttrZXsdtDouble
	XElemsAnimate
	XAttsStdAttrs
	XAttrPointsAtYXsdtDouble
	XAttrYXsdtDouble
}

// Walk : if the WalkHandlers.TfeSpotLightType function is not nil (ie. was set by outside code), calls it with this TfeSpotLightType instance as the single argument. Then calls the Walk() method on 2/11 embed(s) and 0/0 field(s) belonging to this TfeSpotLightType instance.
func (me *TfeSpotLightType) Walk() (err error) {
	if fn := WalkHandlers.TfeSpotLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeSpotLight defines element FeSpotLight
type XElemFeSpotLight struct {
	FeSpotLight *TfeSpotLightType `xml:"http://www.w3.org/2000/svg feSpotLight"`
}

// Walk : if the WalkHandlers.XElemFeSpotLight function is not nil (ie. was set by outside code), calls it with this XElemFeSpotLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeSpotLight instance.
func (me *XElemFeSpotLight) Walk() (err error) {
	if fn := WalkHandlers.XElemFeSpotLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeSpotLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrSpecularConstantXsdtDouble defines attribute SpecularConstant
type XAttrSpecularConstantXsdtDouble struct {
	SpecularConstant xsdt.Double `xml:"specularConstant,attr,omitempty"`
}

// TfePointLightType defines type fePointLightType
type TfePointLightType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttrXXsdtDouble
	XAttrYXsdtDouble
	XAttrZXsdtDouble
}

// Walk : if the WalkHandlers.TfePointLightType function is not nil (ie. was set by outside code), calls it with this TfePointLightType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfePointLightType instance.
func (me *TfePointLightType) Walk() (err error) {
	if fn := WalkHandlers.TfePointLightType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFePointLight defines element FePointLight
type XElemFePointLight struct {
	FePointLight *TfePointLightType `xml:"http://www.w3.org/2000/svg fePointLight"`
}

// Walk : if the WalkHandlers.XElemFePointLight function is not nil (ie. was set by outside code), calls it with this XElemFePointLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFePointLight instance.
func (me *XElemFePointLight) Walk() (err error) {
	if fn := WalkHandlers.XElemFePointLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FePointLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrSurfaceScaleXsdtDouble defines attribute SurfaceScale
type XAttrSurfaceScaleXsdtDouble struct {
	SurfaceScale xsdt.Double `xml:"surfaceScale,attr,omitempty"`
}

// TfeSpecularLightingType defines type feSpecularLightingType
type TfeSpecularLightingType struct {
	XElemFePointLight
	XAttrClassTClassListType
	XAttrSurfaceScaleXsdtDouble
	XAttrSpecularExponentXsdtDouble
	XElemsAnimate
	XElemsSet
	XElemsAnimateColor
	XAttrStyleTStyleSheetType
	XElemFeDistantLight
	XElemFeSpotLight
	XAttsPresentationAttributesLightingEffects
	XAttsFilterPrimitiveAttributesWithIn
	XAttsStdAttrs
	XAttrSpecularConstantXsdtDouble
}

// Walk : if the WalkHandlers.TfeSpecularLightingType function is not nil (ie. was set by outside code), calls it with this TfeSpecularLightingType instance as the single argument. Then calls the Walk() method on 6/14 embed(s) and 0/0 field(s) belonging to this TfeSpecularLightingType instance.
func (me *TfeSpecularLightingType) Walk() (err error) {
	if fn := WalkHandlers.TfeSpecularLightingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemFePointLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFeDistantLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFeSpotLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeSpecularLighting defines element FeSpecularLighting
type XElemsFeSpecularLighting struct {
	FeSpecularLightings []*TfeSpecularLightingType `xml:"http://www.w3.org/2000/svg feSpecularLighting"`
}

// Walk : if the WalkHandlers.XElemsFeSpecularLighting function is not nil (ie. was set by outside code), calls it with this XElemsFeSpecularLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeSpecularLighting instance.
func (me *XElemsFeSpecularLighting) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeSpecularLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeSpecularLightings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeTurbulenceTypeType defines type xsdFeTurbulenceTypeType
type TxsdFeTurbulenceTypeType xsdt.String

// Set : Since TxsdFeTurbulenceTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeTurbulenceTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeTurbulenceTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdFeTurbulenceTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeTurbulenceTypeType's alias type xsdt.String.
func (me TxsdFeTurbulenceTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsFractalNoise : Returns true if the value of this enumerated TxsdFeTurbulenceTypeType is "fractalNoise".
func (me TxsdFeTurbulenceTypeType) IsFractalNoise() bool { return me.String() == "fractalNoise" }

// IsTurbulence : Returns true if the value of this enumerated TxsdFeTurbulenceTypeType is "turbulence".
func (me TxsdFeTurbulenceTypeType) IsTurbulence() bool { return me.String() == "turbulence" }

// XAttrTypeTxsdFeTurbulenceTypeTypeTurbulence defines attribute TypeTxsdFeTurbulenceTypeTypeTurbulence
type XAttrTypeTxsdFeTurbulenceTypeTypeTurbulence struct {
	Type TxsdFeTurbulenceTypeType `xml:"type,attr,omitempty"`
}

// TypeDefault : Returns the default value for Type -- "turbulence"
func (me XAttrTypeTxsdFeTurbulenceTypeTypeTurbulence) TypeDefault() TxsdFeTurbulenceTypeType {
	return TxsdFeTurbulenceTypeType("turbulence")
}

// XAttrBaseFrequencyXsdtString defines attribute BaseFrequency
type XAttrBaseFrequencyXsdtString struct {
	BaseFrequency xsdt.String `xml:"baseFrequency,attr,omitempty"`
}

// XAttrSeedXsdtDouble defines attribute Seed
type XAttrSeedXsdtDouble struct {
	Seed xsdt.Double `xml:"seed,attr,omitempty"`
}

// TxsdFeTurbulenceTypeStitchTiles defines type xsdFeTurbulenceTypeStitchTiles
type TxsdFeTurbulenceTypeStitchTiles xsdt.String

// String : Since TxsdFeTurbulenceTypeStitchTiles is just a simple String type, this merely returns the current string value.
func (me TxsdFeTurbulenceTypeStitchTiles) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeTurbulenceTypeStitchTiles's alias type xsdt.String.
func (me TxsdFeTurbulenceTypeStitchTiles) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsStitch : Returns true if the value of this enumerated TxsdFeTurbulenceTypeStitchTiles is "stitch".
func (me TxsdFeTurbulenceTypeStitchTiles) IsStitch() bool { return me.String() == "stitch" }

// IsNoStitch : Returns true if the value of this enumerated TxsdFeTurbulenceTypeStitchTiles is "noStitch".
func (me TxsdFeTurbulenceTypeStitchTiles) IsNoStitch() bool { return me.String() == "noStitch" }

// Set : Since TxsdFeTurbulenceTypeStitchTiles is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeTurbulenceTypeStitchTiles) Set(s string) { (*xsdt.String)(me).Set(s) }

// XAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch defines attribute StitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch
type XAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch struct {
	StitchTiles TxsdFeTurbulenceTypeStitchTiles `xml:"stitchTiles,attr,omitempty"`
}

// StitchTilesDefault : Returns the default value for StitchTiles -- "noStitch"
func (me XAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch) StitchTilesDefault() TxsdFeTurbulenceTypeStitchTiles {
	return TxsdFeTurbulenceTypeStitchTiles("noStitch")
}

// XAttrNumOctavesXsdtInteger defines attribute NumOctaves
type XAttrNumOctavesXsdtInteger struct {
	NumOctaves xsdt.Integer `xml:"numOctaves,attr,omitempty"`
}

// TfeTurbulenceType defines type feTurbulenceType
type TfeTurbulenceType struct {
	XAttrStitchTilesTxsdFeTurbulenceTypeStitchTilesNoStitch
	XAttrTypeTxsdFeTurbulenceTypeTypeTurbulence
	XAttrBaseFrequencyXsdtString
	XAttrSeedXsdtDouble
	XAttsFilterPrimitiveAttributes
	XElemsSet
	XAttsStdAttrs
	XAttrNumOctavesXsdtInteger
	XElemsAnimate
}

// Walk : if the WalkHandlers.TfeTurbulenceType function is not nil (ie. was set by outside code), calls it with this TfeTurbulenceType instance as the single argument. Then calls the Walk() method on 2/9 embed(s) and 0/0 field(s) belonging to this TfeTurbulenceType instance.
func (me *TfeTurbulenceType) Walk() (err error) {
	if fn := WalkHandlers.TfeTurbulenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeTurbulence defines element FeTurbulence
type XElemsFeTurbulence struct {
	FeTurbulences []*TfeTurbulenceType `xml:"http://www.w3.org/2000/svg feTurbulence"`
}

// Walk : if the WalkHandlers.XElemsFeTurbulence function is not nil (ie. was set by outside code), calls it with this XElemsFeTurbulence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeTurbulence instance.
func (me *XElemsFeTurbulence) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeTurbulence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeTurbulences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrK4XsdtDouble defines attribute K4
type XAttrK4XsdtDouble struct {
	K4 xsdt.Double `xml:"k4,attr,omitempty"`
}

// TxsdFeCompositeTypeOperator defines type xsdFeCompositeTypeOperator
type TxsdFeCompositeTypeOperator xsdt.String

// IsArithmetic : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "arithmetic".
func (me TxsdFeCompositeTypeOperator) IsArithmetic() bool { return me.String() == "arithmetic" }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeCompositeTypeOperator's alias type xsdt.String.
func (me TxsdFeCompositeTypeOperator) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsOut : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "out".
func (me TxsdFeCompositeTypeOperator) IsOut() bool { return me.String() == "out" }

// IsAtop : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "atop".
func (me TxsdFeCompositeTypeOperator) IsAtop() bool { return me.String() == "atop" }

// IsIn : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "in".
func (me TxsdFeCompositeTypeOperator) IsIn() bool { return me.String() == "in" }

// IsXor : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "xor".
func (me TxsdFeCompositeTypeOperator) IsXor() bool { return me.String() == "xor" }

// Set : Since TxsdFeCompositeTypeOperator is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeCompositeTypeOperator) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeCompositeTypeOperator is just a simple String type, this merely returns the current string value.
func (me TxsdFeCompositeTypeOperator) String() string { return xsdt.String(me).String() }

// IsOver : Returns true if the value of this enumerated TxsdFeCompositeTypeOperator is "over".
func (me TxsdFeCompositeTypeOperator) IsOver() bool { return me.String() == "over" }

// XAttrOperatorTxsdFeCompositeTypeOperatorOver defines attribute OperatorTxsdFeCompositeTypeOperatorOver
type XAttrOperatorTxsdFeCompositeTypeOperatorOver struct {
	Operator TxsdFeCompositeTypeOperator `xml:"operator,attr,omitempty"`
}

// OperatorDefault : Returns the default value for Operator -- "over"
func (me XAttrOperatorTxsdFeCompositeTypeOperatorOver) OperatorDefault() TxsdFeCompositeTypeOperator {
	return TxsdFeCompositeTypeOperator("over")
}

// XAttrK1XsdtDouble defines attribute K1
type XAttrK1XsdtDouble struct {
	K1 xsdt.Double `xml:"k1,attr,omitempty"`
}

// XAttrK3XsdtDouble defines attribute K3
type XAttrK3XsdtDouble struct {
	K3 xsdt.Double `xml:"k3,attr,omitempty"`
}

// XAttrK2XsdtDouble defines attribute K2
type XAttrK2XsdtDouble struct {
	K2 xsdt.Double `xml:"k2,attr,omitempty"`
}

// TfeCompositeType defines type feCompositeType
type TfeCompositeType struct {
	XAttsFilterPrimitiveAttributesWithIn
	XAttrIn2XsdtString
	XAttrOperatorTxsdFeCompositeTypeOperatorOver
	XAttrK1XsdtDouble
	XAttrK4XsdtDouble
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttrK2XsdtDouble
	XAttrK3XsdtDouble
}

// Walk : if the WalkHandlers.TfeCompositeType function is not nil (ie. was set by outside code), calls it with this TfeCompositeType instance as the single argument. Then calls the Walk() method on 2/10 embed(s) and 0/0 field(s) belonging to this TfeCompositeType instance.
func (me *TfeCompositeType) Walk() (err error) {
	if fn := WalkHandlers.TfeCompositeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeComposite defines element FeComposite
type XElemsFeComposite struct {
	FeComposites []*TfeCompositeType `xml:"http://www.w3.org/2000/svg feComposite"`
}

// Walk : if the WalkHandlers.XElemsFeComposite function is not nil (ie. was set by outside code), calls it with this XElemsFeComposite instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeComposite instance.
func (me *XElemsFeComposite) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeComposite; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeComposites {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrScaleXsdtDouble defines attribute Scale
type XAttrScaleXsdtDouble struct {
	Scale xsdt.Double `xml:"scale,attr,omitempty"`
}

// TxsdFeDisplacementMapTypeXChannelSelector defines type xsdFeDisplacementMapTypeXChannelSelector
type TxsdFeDisplacementMapTypeXChannelSelector xsdt.String

// IsB : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "B".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsB() bool { return me.String() == "B" }

// IsA : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "A".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsA() bool { return me.String() == "A" }

// Set : Since TxsdFeDisplacementMapTypeXChannelSelector is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeDisplacementMapTypeXChannelSelector) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeDisplacementMapTypeXChannelSelector is just a simple String type, this merely returns the current string value.
func (me TxsdFeDisplacementMapTypeXChannelSelector) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeDisplacementMapTypeXChannelSelector's alias type xsdt.String.
func (me TxsdFeDisplacementMapTypeXChannelSelector) ToXsdtString() xsdt.String {
	return xsdt.String(me)
}

// IsR : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "R".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsR() bool { return me.String() == "R" }

// IsG : Returns true if the value of this enumerated TxsdFeDisplacementMapTypeXChannelSelector is "G".
func (me TxsdFeDisplacementMapTypeXChannelSelector) IsG() bool { return me.String() == "G" }

// XAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA defines attribute XChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA
type XAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA struct {
	XChannelSelector TxsdFeDisplacementMapTypeXChannelSelector `xml:"xChannelSelector,attr,omitempty"`
}

// XChannelSelectorDefault : Returns the default value for XChannelSelector -- "A"
func (me XAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA) XChannelSelectorDefault() TxsdFeDisplacementMapTypeXChannelSelector {
	return TxsdFeDisplacementMapTypeXChannelSelector("A")
}

// XAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA defines attribute YChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA
type XAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA struct {
	YChannelSelector TxsdFeDisplacementMapTypeXChannelSelector `xml:"yChannelSelector,attr,omitempty"`
}

// YChannelSelectorDefault : Returns the default value for YChannelSelector -- "A"
func (me XAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA) YChannelSelectorDefault() TxsdFeDisplacementMapTypeXChannelSelector {
	return TxsdFeDisplacementMapTypeXChannelSelector("A")
}

// TfeDisplacementMapType defines type feDisplacementMapType
type TfeDisplacementMapType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
	XAttrIn2XsdtString
	XAttrScaleXsdtDouble
	XAttrXChannelSelectorTxsdFeDisplacementMapTypeXChannelSelectorA
	XAttrYChannelSelectorTxsdFeDisplacementMapTypeYChannelSelectorA
}

// Walk : if the WalkHandlers.TfeDisplacementMapType function is not nil (ie. was set by outside code), calls it with this TfeDisplacementMapType instance as the single argument. Then calls the Walk() method on 2/8 embed(s) and 0/0 field(s) belonging to this TfeDisplacementMapType instance.
func (me *TfeDisplacementMapType) Walk() (err error) {
	if fn := WalkHandlers.TfeDisplacementMapType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeDisplacementMap defines element FeDisplacementMap
type XElemsFeDisplacementMap struct {
	FeDisplacementMaps []*TfeDisplacementMapType `xml:"http://www.w3.org/2000/svg feDisplacementMap"`
}

// Walk : if the WalkHandlers.XElemsFeDisplacementMap function is not nil (ie. was set by outside code), calls it with this XElemsFeDisplacementMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeDisplacementMap instance.
func (me *XElemsFeDisplacementMap) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeDisplacementMap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeDisplacementMaps {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeColorMatrixTypeType defines type xsdFeColorMatrixTypeType
type TxsdFeColorMatrixTypeType xsdt.String

// IsLuminanceToAlpha : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "luminanceToAlpha".
func (me TxsdFeColorMatrixTypeType) IsLuminanceToAlpha() bool {
	return me.String() == "luminanceToAlpha"
}

// Set : Since TxsdFeColorMatrixTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeColorMatrixTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeColorMatrixTypeType is just a simple String type, this merely returns the current string value.
func (me TxsdFeColorMatrixTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeColorMatrixTypeType's alias type xsdt.String.
func (me TxsdFeColorMatrixTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsMatrix : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "matrix".
func (me TxsdFeColorMatrixTypeType) IsMatrix() bool { return me.String() == "matrix" }

// IsSaturate : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "saturate".
func (me TxsdFeColorMatrixTypeType) IsSaturate() bool { return me.String() == "saturate" }

// IsHueRotate : Returns true if the value of this enumerated TxsdFeColorMatrixTypeType is "hueRotate".
func (me TxsdFeColorMatrixTypeType) IsHueRotate() bool { return me.String() == "hueRotate" }

// XAttrTypeTxsdFeColorMatrixTypeTypeMatrix defines attribute TypeTxsdFeColorMatrixTypeTypeMatrix
type XAttrTypeTxsdFeColorMatrixTypeTypeMatrix struct {
	Type TxsdFeColorMatrixTypeType `xml:"type,attr,omitempty"`
}

// TypeDefault : Returns the default value for Type -- "matrix"
func (me XAttrTypeTxsdFeColorMatrixTypeTypeMatrix) TypeDefault() TxsdFeColorMatrixTypeType {
	return TxsdFeColorMatrixTypeType("matrix")
}

// TfeColorMatrixType defines type feColorMatrixType
type TfeColorMatrixType struct {
	XAttrValuesXsdtString
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
	XAttrTypeTxsdFeColorMatrixTypeTypeMatrix
}

// Walk : if the WalkHandlers.TfeColorMatrixType function is not nil (ie. was set by outside code), calls it with this TfeColorMatrixType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeColorMatrixType instance.
func (me *TfeColorMatrixType) Walk() (err error) {
	if fn := WalkHandlers.TfeColorMatrixType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeColorMatrix defines element FeColorMatrix
type XElemsFeColorMatrix struct {
	FeColorMatrixs []*TfeColorMatrixType `xml:"http://www.w3.org/2000/svg feColorMatrix"`
}

// Walk : if the WalkHandlers.XElemsFeColorMatrix function is not nil (ie. was set by outside code), calls it with this XElemsFeColorMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeColorMatrix instance.
func (me *XElemsFeColorMatrix) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeColorMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeColorMatrixs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TxsdFeMorphologyTypeOperator defines type xsdFeMorphologyTypeOperator
type TxsdFeMorphologyTypeOperator xsdt.String

// IsErode : Returns true if the value of this enumerated TxsdFeMorphologyTypeOperator is "erode".
func (me TxsdFeMorphologyTypeOperator) IsErode() bool { return me.String() == "erode" }

// IsDilate : Returns true if the value of this enumerated TxsdFeMorphologyTypeOperator is "dilate".
func (me TxsdFeMorphologyTypeOperator) IsDilate() bool { return me.String() == "dilate" }

// Set : Since TxsdFeMorphologyTypeOperator is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdFeMorphologyTypeOperator) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdFeMorphologyTypeOperator is just a simple String type, this merely returns the current string value.
func (me TxsdFeMorphologyTypeOperator) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdFeMorphologyTypeOperator's alias type xsdt.String.
func (me TxsdFeMorphologyTypeOperator) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrOperatorTxsdFeMorphologyTypeOperatorErode defines attribute OperatorTxsdFeMorphologyTypeOperatorErode
type XAttrOperatorTxsdFeMorphologyTypeOperatorErode struct {
	Operator TxsdFeMorphologyTypeOperator `xml:"operator,attr,omitempty"`
}

// OperatorDefault : Returns the default value for Operator -- "erode"
func (me XAttrOperatorTxsdFeMorphologyTypeOperatorErode) OperatorDefault() TxsdFeMorphologyTypeOperator {
	return TxsdFeMorphologyTypeOperator("erode")
}

// XAttrRadiusTLengthType defines attribute RadiusTLengthType
type XAttrRadiusTLengthType struct {
	Radius TLengthType `xml:"radius,attr,omitempty"`
}

// TfeMorphologyType defines type feMorphologyType
type TfeMorphologyType struct {
	XElemsSet
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
	XAttrOperatorTxsdFeMorphologyTypeOperatorErode
	XAttrRadiusTLengthType
	XElemsAnimate
}

// Walk : if the WalkHandlers.TfeMorphologyType function is not nil (ie. was set by outside code), calls it with this TfeMorphologyType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeMorphologyType instance.
func (me *TfeMorphologyType) Walk() (err error) {
	if fn := WalkHandlers.TfeMorphologyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeMorphology defines element FeMorphology
type XElemsFeMorphology struct {
	FeMorphologies []*TfeMorphologyType `xml:"http://www.w3.org/2000/svg feMorphology"`
}

// Walk : if the WalkHandlers.XElemsFeMorphology function is not nil (ie. was set by outside code), calls it with this XElemsFeMorphology instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeMorphology instance.
func (me *XElemsFeMorphology) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeMorphology; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeMorphologies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeTileType defines type feTileType
type TfeTileType struct {
	XElemsAnimate
	XElemsSet
	XAttsFilterPrimitiveAttributesWithIn
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TfeTileType function is not nil (ie. was set by outside code), calls it with this TfeTileType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TfeTileType instance.
func (me *TfeTileType) Walk() (err error) {
	if fn := WalkHandlers.TfeTileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeTile defines element FeTile
type XElemsFeTile struct {
	FeTiles []*TfeTileType `xml:"http://www.w3.org/2000/svg feTile"`
}

// Walk : if the WalkHandlers.XElemsFeTile function is not nil (ie. was set by outside code), calls it with this XElemsFeTile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeTile instance.
func (me *XElemsFeTile) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeTile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeTiles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrDiffuseConstantXsdtDouble defines attribute DiffuseConstant
type XAttrDiffuseConstantXsdtDouble struct {
	DiffuseConstant xsdt.Double `xml:"diffuseConstant,attr,omitempty"`
}

// TfeDiffuseLightingType defines type feDiffuseLightingType
type TfeDiffuseLightingType struct {
	XElemsSet
	XElemsAnimateColor
	XAttsPresentationAttributesLightingEffects
	XElemFeDistantLight
	XElemFeSpotLight
	XElemsAnimate
	XAttrClassTClassListType
	XAttrStyleTStyleSheetType
	XAttrSurfaceScaleXsdtDouble
	XAttrDiffuseConstantXsdtDouble
	XElemFePointLight
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeDiffuseLightingType function is not nil (ie. was set by outside code), calls it with this TfeDiffuseLightingType instance as the single argument. Then calls the Walk() method on 6/13 embed(s) and 0/0 field(s) belonging to this TfeDiffuseLightingType instance.
func (me *TfeDiffuseLightingType) Walk() (err error) {
	if fn := WalkHandlers.TfeDiffuseLightingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemFeDistantLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFeSpotLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFePointLight.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeDiffuseLighting defines element FeDiffuseLighting
type XElemsFeDiffuseLighting struct {
	FeDiffuseLightings []*TfeDiffuseLightingType `xml:"http://www.w3.org/2000/svg feDiffuseLighting"`
}

// Walk : if the WalkHandlers.XElemsFeDiffuseLighting function is not nil (ie. was set by outside code), calls it with this XElemsFeDiffuseLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeDiffuseLighting instance.
func (me *XElemsFeDiffuseLighting) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeDiffuseLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeDiffuseLightings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeImageType defines type feImageType
type TfeImageType struct {
	XElemsAnimate
	XElemsAnimateTransform
	XAttsFilterPrimitiveAttributes
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrStyleTStyleSheetType
	XAttrTransformTransformListType
	XAttrClassTClassListType
	XElemsSet
	XAttsStdAttrs
	XAttsXlinkRefAttrs
	XAttsLangSpaceAttrs
	XAttsPresentationAttributesAll
	xlink.XAttrHref
}

// Walk : if the WalkHandlers.TfeImageType function is not nil (ie. was set by outside code), calls it with this TfeImageType instance as the single argument. Then calls the Walk() method on 3/13 embed(s) and 0/0 field(s) belonging to this TfeImageType instance.
func (me *TfeImageType) Walk() (err error) {
	if fn := WalkHandlers.TfeImageType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeImage defines element FeImage
type XElemsFeImage struct {
	FeImages []*TfeImageType `xml:"http://www.w3.org/2000/svg feImage"`
}

// Walk : if the WalkHandlers.XElemsFeImage function is not nil (ie. was set by outside code), calls it with this XElemsFeImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeImage instance.
func (me *XElemsFeImage) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeImages {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrDxTLengthType defines attribute DxTLengthType
type XAttrDxTLengthType struct {
	Dx TLengthType `xml:"dx,attr,omitempty"`
}

// XAttrDyTLengthType defines attribute DyTLengthType
type XAttrDyTLengthType struct {
	Dy TLengthType `xml:"dy,attr,omitempty"`
}

// TfeOffsetType defines type feOffsetType
type TfeOffsetType struct {
	XAttrDxTLengthType
	XAttrDyTLengthType
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributesWithIn
}

// Walk : if the WalkHandlers.TfeOffsetType function is not nil (ie. was set by outside code), calls it with this TfeOffsetType instance as the single argument. Then calls the Walk() method on 2/6 embed(s) and 0/0 field(s) belonging to this TfeOffsetType instance.
func (me *TfeOffsetType) Walk() (err error) {
	if fn := WalkHandlers.TfeOffsetType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeOffset defines element FeOffset
type XElemsFeOffset struct {
	FeOffsets []*TfeOffsetType `xml:"http://www.w3.org/2000/svg feOffset"`
}

// Walk : if the WalkHandlers.XElemsFeOffset function is not nil (ie. was set by outside code), calls it with this XElemsFeOffset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeOffset instance.
func (me *XElemsFeOffset) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeOffsets {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrFilterResXsdtString defines attribute FilterRes
type XAttrFilterResXsdtString struct {
	FilterRes xsdt.String `xml:"filterRes,attr,omitempty"`
}

// TfeMergeNodeType defines type feMergeNodeType
type TfeMergeNodeType struct {
	XElemsAnimate
	XElemsSet
	XAttsStdAttrs
	XAttrInXsdtString
}

// Walk : if the WalkHandlers.TfeMergeNodeType function is not nil (ie. was set by outside code), calls it with this TfeMergeNodeType instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TfeMergeNodeType instance.
func (me *TfeMergeNodeType) Walk() (err error) {
	if fn := WalkHandlers.TfeMergeNodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeMergeNode defines element FeMergeNode
type XElemsFeMergeNode struct {
	FeMergeNodes []*TfeMergeNodeType `xml:"http://www.w3.org/2000/svg feMergeNode"`
}

// Walk : if the WalkHandlers.XElemsFeMergeNode function is not nil (ie. was set by outside code), calls it with this XElemsFeMergeNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeMergeNode instance.
func (me *XElemsFeMergeNode) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeMergeNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeMergeNodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TfeMergeType defines type feMergeType
type TfeMergeType struct {
	XElemsFeMergeNode
	XAttsStdAttrs
	XAttsFilterPrimitiveAttributes
}

// Walk : if the WalkHandlers.TfeMergeType function is not nil (ie. was set by outside code), calls it with this TfeMergeType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TfeMergeType instance.
func (me *TfeMergeType) Walk() (err error) {
	if fn := WalkHandlers.TfeMergeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsFeMergeNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeMerge defines element FeMerge
type XElemsFeMerge struct {
	FeMerges []*TfeMergeType `xml:"http://www.w3.org/2000/svg feMerge"`
}

// Walk : if the WalkHandlers.XElemsFeMerge function is not nil (ie. was set by outside code), calls it with this XElemsFeMerge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeMerge instance.
func (me *XElemsFeMerge) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeMerge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeMerges {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrFilterUnitsTxsdFilterTypeFilterUnits defines attribute FilterUnitsTxsdFilterTypeFilterUnits
type XAttrFilterUnitsTxsdFilterTypeFilterUnits struct {
	FilterUnits TxsdClipPathTypeClipPathUnits `xml:"filterUnits,attr,omitempty"`
}

// TfilterType defines type filterType
type TfilterType struct {
	XElemsFeGaussianBlur
	XElemsFeSpecularLighting
	XElemsFeTurbulence
	XAttsXlinkRefAttrs
	XAttsLangSpaceAttrs
	XAttrPrimitiveUnitsTxsdFilterTypePrimitiveUnits
	XElemsFeComposite
	XElemsFeDisplacementMap
	XAttrStyleTStyleSheetType
	XElemsFeColorMatrix
	XElemsFeMorphology
	XAttrHeightTLengthType
	XElemsFeDiffuseLighting
	XElemsFeImage
	XElemsFeOffset
	XElemsFeTile
	XElemsSet
	XAttsStdAttrs
	XAttrWidthTLengthType
	XElemsFeMerge
	XAttsPresentationAttributesAll
	XAttrFilterUnitsTxsdFilterTypeFilterUnits
	XAttrYTCoordinateType
	XAttrFilterResXsdtString
	XElemsFeBlend
	XElemsAnimate
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrClassTClassListType
	xlink.XAttrHref
	XElemsFeComponentTransfer
	XElemsFeConvolveMatrix
	XGroupDescTitleMetadata
	XElemsFeFlood
	XAttrXTCoordinateType
}

// Walk : if the WalkHandlers.TfilterType function is not nil (ie. was set by outside code), calls it with this TfilterType instance as the single argument. Then calls the Walk() method on 19/34 embed(s) and 0/0 field(s) belonging to this TfilterType instance.
func (me *TfilterType) Walk() (err error) {
	if fn := WalkHandlers.TfilterType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsFeColorMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeMorphology.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeDiffuseLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeTile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeMerge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeBlend.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeComponentTransfer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeConvolveMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeFlood.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeGaussianBlur.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeSpecularLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeTurbulence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeComposite.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFeDisplacementMap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFilter defines element Filter
type XElemsFilter struct {
	Filters []*TfilterType `xml:"http://www.w3.org/2000/svg filter"`
}

// Walk : if the WalkHandlers.XElemsFilter function is not nil (ie. was set by outside code), calls it with this XElemsFilter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFilter instance.
func (me *XElemsFilter) Walk() (err error) {
	if fn := WalkHandlers.XElemsFilter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Filters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrMarkerWidthTLengthType defines attribute MarkerWidthTLengthType
type XAttrMarkerWidthTLengthType struct {
	MarkerWidth TLengthType `xml:"markerWidth,attr,omitempty"`
}

// XAttrRefYTCoordinateType defines attribute RefYTCoordinateType
type XAttrRefYTCoordinateType struct {
	RefY TCoordinateType `xml:"refY,attr,omitempty"`
}

// XAttrOrientXsdtString defines attribute Orient
type XAttrOrientXsdtString struct {
	Orient xsdt.String `xml:"orient,attr,omitempty"`
}

// TforeignObjectType defines type foreignObjectType
type TforeignObjectType struct {
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrXTCoordinateType
	XAttsStdAttrs
	XAttrClassTClassListType
	XAttrHeightTLengthType
	XCdata
	XAttsGraphicsElementEvents
	XAttsTestAttrs
	XAttrYTCoordinateType
	XAttrContentXsdtStringStructuredText
	XAttrStyleTStyleSheetType
	XAttrWidthTLengthType
	XAttsPresentationAttributesAll
	XAttsLangSpaceAttrs
	XAttrTransformTransformListType
}

// Walk : if the WalkHandlers.TforeignObjectType function is not nil (ie. was set by outside code), calls it with this TforeignObjectType instance as the single argument. Then calls the Walk() method on 1/15 embed(s) and 0/0 field(s) belonging to this TforeignObjectType instance.
func (me *TforeignObjectType) Walk() (err error) {
	if fn := WalkHandlers.TforeignObjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsForeignObject defines element ForeignObject
type XElemsForeignObject struct {
	ForeignObjects []*TforeignObjectType `xml:"http://www.w3.org/2000/svg foreignObject"`
}

// Walk : if the WalkHandlers.XElemsForeignObject function is not nil (ie. was set by outside code), calls it with this XElemsForeignObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsForeignObject instance.
func (me *XElemsForeignObject) Walk() (err error) {
	if fn := WalkHandlers.XElemsForeignObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ForeignObjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TlineType defines type lineType
type TlineType struct {
	XElemsAnimateMotion
	XAttrY1TCoordinateType
	XAttrX2TCoordinateType
	XAttrClassTClassListType
	XAttsTestAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsAnimateColor
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsPresentationAttributesFillStroke
	XAttsPresentationAttributesGraphics
	XAttsStdAttrs
	XAttrTransformTransformListType
	XAttsPresentationAttributesColor
	XAttsPresentationAttributesMarkers
	XAttsGraphicsElementEvents
	XElemsAnimate
	XElemsSet
	XAttsLangSpaceAttrs
	XAttrX1TCoordinateType
	XAttrY2TCoordinateType
	XAttrStyleTStyleSheetType
}

// Walk : if the WalkHandlers.TlineType function is not nil (ie. was set by outside code), calls it with this TlineType instance as the single argument. Then calls the Walk() method on 6/22 embed(s) and 0/0 field(s) belonging to this TlineType instance.
func (me *TlineType) Walk() (err error) {
	if fn := WalkHandlers.TlineType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsLine defines element Line
type XElemsLine struct {
	Lines []*TlineType `xml:"http://www.w3.org/2000/svg line"`
}

// Walk : if the WalkHandlers.XElemsLine function is not nil (ie. was set by outside code), calls it with this XElemsLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsLine instance.
func (me *XElemsLine) Walk() (err error) {
	if fn := WalkHandlers.XElemsLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Lines {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TswitchType defines type switchType
type TswitchType struct {
	XElemsEllipse
	XElemsG
	XElemsForeignObject
	XAttsTestAttrs
	XElemsLine
	XElemsUse
	XAttsStdAttrs
	XAttsLangSpaceAttrs
	XAttsGraphicsElementEvents
	XAttrClassTClassListType
	XElemsText
	XElemsRect
	XElemsPolyline
	XElemsSet
	XElemsAnimateMotion
	XElemsAnimateTransform
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsPath
	XAttsPresentationAttributesAll
	XAttrStyleTStyleSheetType
	XElemsAnimateColor
	XElemsSvg
	XGroupDescTitleMetadata
	XElemsCircle
	XElemsPolygon
	XElemsImage
	XElemsSwitch
	XElemsA
	XElemsAnimate
	XAttrTransformTransformListType
}

// Walk : if the WalkHandlers.TswitchType function is not nil (ie. was set by outside code), calls it with this TswitchType instance as the single argument. Then calls the Walk() method on 17/30 embed(s) and 0/0 field(s) belonging to this TswitchType instance.
func (me *TswitchType) Walk() (err error) {
	if fn := WalkHandlers.TswitchType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsForeignObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSwitch defines element Switch
type XElemsSwitch struct {
	Switchs []*TswitchType `xml:"http://www.w3.org/2000/svg switch"`
}

// Walk : if the WalkHandlers.XElemsSwitch function is not nil (ie. was set by outside code), calls it with this XElemsSwitch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSwitch instance.
func (me *XElemsSwitch) Walk() (err error) {
	if fn := WalkHandlers.XElemsSwitch; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Switchs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrGradientUnitsTxsdRadialGradientTypeGradientUnits defines attribute GradientUnitsTxsdRadialGradientTypeGradientUnits
type XAttrGradientUnitsTxsdRadialGradientTypeGradientUnits struct {
	GradientUnits TxsdClipPathTypeClipPathUnits `xml:"gradientUnits,attr,omitempty"`
}

// XAttrFxTCoordinateType defines attribute FxTCoordinateType
type XAttrFxTCoordinateType struct {
	Fx TCoordinateType `xml:"fx,attr,omitempty"`
}

// XAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad defines attribute SpreadMethodTxsdRadialGradientTypeSpreadMethodPad
type XAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad struct {
	SpreadMethod TxsdLinearGradientTypeSpreadMethod `xml:"spreadMethod,attr,omitempty"`
}

// SpreadMethodDefault : Returns the default value for SpreadMethod -- "pad"
func (me XAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad) SpreadMethodDefault() TxsdLinearGradientTypeSpreadMethod {
	return TxsdLinearGradientTypeSpreadMethod("pad")
}

// XAttrFyTCoordinateType defines attribute FyTCoordinateType
type XAttrFyTCoordinateType struct {
	Fy TCoordinateType `xml:"fy,attr,omitempty"`
}

// TradialGradientType defines type radialGradientType
type TradialGradientType struct {
	XAttrSpreadMethodTxsdRadialGradientTypeSpreadMethodPad
	XAttrCxTCoordinateType
	XAttrFyTCoordinateType
	xlink.XAttrHref
	XAttsStdAttrs
	XAttsXlinkRefAttrs
	XAttrFxTCoordinateType
	XElemsStop
	XElemsAnimateTransform
	XAttrGradientTransformTransformListType
	XAttrCyTCoordinateType
	XAttrGradientUnitsTxsdRadialGradientTypeGradientUnits
	XElemsSet
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrRTLengthType
	XElemsAnimate
	XGroupDescTitleMetadata
}

// Walk : if the WalkHandlers.TradialGradientType function is not nil (ie. was set by outside code), calls it with this TradialGradientType instance as the single argument. Then calls the Walk() method on 5/17 embed(s) and 0/0 field(s) belonging to this TradialGradientType instance.
func (me *TradialGradientType) Walk() (err error) {
	if fn := WalkHandlers.TradialGradientType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsStop.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRadialGradient defines element RadialGradient
type XElemsRadialGradient struct {
	RadialGradients []*TradialGradientType `xml:"http://www.w3.org/2000/svg radialGradient"`
}

// Walk : if the WalkHandlers.XElemsRadialGradient function is not nil (ie. was set by outside code), calls it with this XElemsRadialGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRadialGradient instance.
func (me *XElemsRadialGradient) Walk() (err error) {
	if fn := WalkHandlers.XElemsRadialGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RadialGradients {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrGlyphRefXsdtString defines attribute GlyphRef
type XAttrGlyphRefXsdtString struct {
	GlyphRef xsdt.String `xml:"glyphRef,attr,omitempty"`
}

// XAttrFormatXsdtString defines attribute Format
type XAttrFormatXsdtString struct {
	Format xsdt.String `xml:"format,attr,omitempty"`
}

// TglyphRefType defines type glyphRefType
type TglyphRefType struct {
	XAttrStyleTStyleSheetType
	XAttrXTCoordinatesType
	XAttrYTCoordinatesType
	XAttrDxTLengthsType
	XAttrGlyphRefXsdtString
	XAttrDyTLengthsType
	XAttsPresentationAttributesFontSpecification
	xlink.XAttrHref
	XAttrClassTClassListType
	XAttrFormatXsdtString
	XAttsStdAttrs
	XAttsXlinkRefAttrs
}

// Walk : if the WalkHandlers.TglyphRefType function is not nil (ie. was set by outside code), calls it with this TglyphRefType instance as the single argument. Then calls the Walk() method on 0/12 embed(s) and 0/0 field(s) belonging to this TglyphRefType instance.
func (me *TglyphRefType) Walk() (err error) {
	if fn := WalkHandlers.TglyphRefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsGlyphRef defines element GlyphRef
type XElemsGlyphRef struct {
	GlyphRefs []*TglyphRefType `xml:"http://www.w3.org/2000/svg glyphRef"`
}

// Walk : if the WalkHandlers.XElemsGlyphRef function is not nil (ie. was set by outside code), calls it with this XElemsGlyphRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsGlyphRef instance.
func (me *XElemsGlyphRef) Walk() (err error) {
	if fn := WalkHandlers.XElemsGlyphRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.GlyphRefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TaltGlyphItemType defines type altGlyphItemType
type TaltGlyphItemType struct {
	XElemsGlyphRef
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TaltGlyphItemType function is not nil (ie. was set by outside code), calls it with this TaltGlyphItemType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TaltGlyphItemType instance.
func (me *TaltGlyphItemType) Walk() (err error) {
	if fn := WalkHandlers.TaltGlyphItemType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsGlyphRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAltGlyphItem defines element AltGlyphItem
type XElemsAltGlyphItem struct {
	AltGlyphItems []*TaltGlyphItemType `xml:"http://www.w3.org/2000/svg altGlyphItem"`
}

// Walk : if the WalkHandlers.XElemsAltGlyphItem function is not nil (ie. was set by outside code), calls it with this XElemsAltGlyphItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAltGlyphItem instance.
func (me *XElemsAltGlyphItem) Walk() (err error) {
	if fn := WalkHandlers.XElemsAltGlyphItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AltGlyphItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TaltGlyphDefType defines type altGlyphDefType
type TaltGlyphDefType struct {
	XAttsStdAttrs
	XElemsAltGlyphItem
	XElemsGlyphRef
}

// Walk : if the WalkHandlers.TaltGlyphDefType function is not nil (ie. was set by outside code), calls it with this TaltGlyphDefType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TaltGlyphDefType instance.
func (me *TaltGlyphDefType) Walk() (err error) {
	if fn := WalkHandlers.TaltGlyphDefType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAltGlyphItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsGlyphRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAltGlyphDef defines element AltGlyphDef
type XElemsAltGlyphDef struct {
	AltGlyphDefs []*TaltGlyphDefType `xml:"http://www.w3.org/2000/svg altGlyphDef"`
}

// Walk : if the WalkHandlers.XElemsAltGlyphDef function is not nil (ie. was set by outside code), calls it with this XElemsAltGlyphDef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAltGlyphDef instance.
func (me *XElemsAltGlyphDef) Walk() (err error) {
	if fn := WalkHandlers.XElemsAltGlyphDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AltGlyphDefs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrMarkerHeightTLengthType defines attribute MarkerHeightTLengthType
type XAttrMarkerHeightTLengthType struct {
	MarkerHeight TLengthType `xml:"markerHeight,attr,omitempty"`
}

// XAttrU1XsdtString defines attribute U1
type XAttrU1XsdtString struct {
	U1 xsdt.String `xml:"u1,attr,omitempty"`
}

// XAttrG1XsdtString defines attribute G1
type XAttrG1XsdtString struct {
	G1 xsdt.String `xml:"g1,attr,omitempty"`
}

// XAttrU2XsdtString defines attribute U2
type XAttrU2XsdtString struct {
	U2 xsdt.String `xml:"u2,attr,omitempty"`
}

// XAttrG2XsdtString defines attribute G2
type XAttrG2XsdtString struct {
	G2 xsdt.String `xml:"g2,attr,omitempty"`
}

// XAttrKXsdtDouble defines attribute K
type XAttrKXsdtDouble struct {
	K xsdt.Double `xml:"k,attr,omitempty"`
}

// TvkernType defines type vkernType
type TvkernType struct {
	XAttsStdAttrs
	XAttrU1XsdtString
	XAttrG1XsdtString
	XAttrU2XsdtString
	XAttrG2XsdtString
	XAttrKXsdtDouble
}

// Walk : if the WalkHandlers.TvkernType function is not nil (ie. was set by outside code), calls it with this TvkernType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TvkernType instance.
func (me *TvkernType) Walk() (err error) {
	if fn := WalkHandlers.TvkernType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsVkern defines element Vkern
type XElemsVkern struct {
	Vkerns []*TvkernType `xml:"http://www.w3.org/2000/svg vkern"`
}

// Walk : if the WalkHandlers.XElemsVkern function is not nil (ie. was set by outside code), calls it with this XElemsVkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsVkern instance.
func (me *XElemsVkern) Walk() (err error) {
	if fn := WalkHandlers.XElemsVkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Vkerns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrVertAdvYXsdtDouble defines attribute VertAdvY
type XAttrVertAdvYXsdtDouble struct {
	VertAdvY xsdt.Double `xml:"vert-adv-y,attr,omitempty"`
}

// TxsdViewTypeZoomAndPan defines type xsdViewTypeZoomAndPan
type TxsdViewTypeZoomAndPan xsdt.String

// Set : Since TxsdViewTypeZoomAndPan is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdViewTypeZoomAndPan) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdViewTypeZoomAndPan is just a simple String type, this merely returns the current string value.
func (me TxsdViewTypeZoomAndPan) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdViewTypeZoomAndPan's alias type xsdt.String.
func (me TxsdViewTypeZoomAndPan) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsDisable : Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "disable".
func (me TxsdViewTypeZoomAndPan) IsDisable() bool { return me.String() == "disable" }

// IsMagnify : Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "magnify".
func (me TxsdViewTypeZoomAndPan) IsMagnify() bool { return me.String() == "magnify" }

// IsZoom : Returns true if the value of this enumerated TxsdViewTypeZoomAndPan is "zoom".
func (me TxsdViewTypeZoomAndPan) IsZoom() bool { return me.String() == "zoom" }

// XAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify defines attribute ZoomAndPanTxsdViewTypeZoomAndPanMagnify
type XAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify struct {
	ZoomAndPan TxsdViewTypeZoomAndPan `xml:"zoomAndPan,attr,omitempty"`
}

// ZoomAndPanDefault : Returns the default value for ZoomAndPan -- "magnify"
func (me XAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify) ZoomAndPanDefault() TxsdViewTypeZoomAndPan {
	return TxsdViewTypeZoomAndPan("magnify")
}

// XAttrViewTargetXsdtString defines attribute ViewTarget
type XAttrViewTargetXsdtString struct {
	ViewTarget xsdt.String `xml:"viewTarget,attr,omitempty"`
}

// TviewType defines type viewType
type TviewType struct {
	XAttrViewBoxTViewBoxSpecType
	XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
	XAttrZoomAndPanTxsdViewTypeZoomAndPanMagnify
	XAttrViewTargetXsdtString
	XGroupDescTitleMetadata
	XAttsStdAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TviewType function is not nil (ie. was set by outside code), calls it with this TviewType instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TviewType instance.
func (me *TviewType) Walk() (err error) {
	if fn := WalkHandlers.TviewType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsView defines element View
type XElemsView struct {
	Views []*TviewType `xml:"http://www.w3.org/2000/svg view"`
}

// Walk : if the WalkHandlers.XElemsView function is not nil (ie. was set by outside code), calls it with this XElemsView instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsView instance.
func (me *XElemsView) Walk() (err error) {
	if fn := WalkHandlers.XElemsView; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Views {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrHorizAdvXXsdtDouble defines attribute HorizAdvX
type XAttrHorizAdvXXsdtDouble struct {
	HorizAdvX xsdt.Double `xml:"horiz-adv-x,attr,omitempty"`
}

// TmissingGlyphType defines type missingGlyphType
type TmissingGlyphType struct {
	XElemsSymbol
	XElemsLinearGradient
	XElemsFilter
	XElemsAnimateMotion
	XAttrClassTClassListType
	XAttrHorizAdvXXsdtDouble
	XElemsPolygon
	XElemsG
	XElemsAltGlyphDef
	XElemsFont
	XElemsText
	XElemsUse
	XElemsEllipse
	XElemsSvg
	XElemsRadialGradient
	XElemsSet
	XElemsAnimateColor
	XElemsMetadata
	XElemsPath
	XElemsCursor
	XElemsColorProfile
	XElemsFontFace
	XAttsStdAttrs
	XAttrVertAdvYXsdtDouble
	XElemsCircle
	XElemsStyle
	XElemsImage
	XElemsA
	XElemsScript
	XElemsClipPath
	XAttrStyleTStyleSheetType
	XAttrDTPathDataType
	XElemsTitle
	XElemsRect
	XElemsPattern
	XAttsPresentationAttributesAll
	XElemsDesc
	XElemsMarker
	XElemsView
	XElemsSwitch
	XElemsAnimate
	XElemsLine
	XElemsPolyline
	XElemsAnimateTransform
	XElemsDefs
	XElemsMask
}

// Walk : if the WalkHandlers.TmissingGlyphType function is not nil (ie. was set by outside code), calls it with this TmissingGlyphType instance as the single argument. Then calls the Walk() method on 29/46 embed(s) and 0/0 field(s) belonging to this TmissingGlyphType instance.
func (me *TmissingGlyphType) Walk() (err error) {
	if fn := WalkHandlers.TmissingGlyphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemMissingGlyph defines element MissingGlyph
type XElemMissingGlyph struct {
	MissingGlyph *TmissingGlyphType `xml:"http://www.w3.org/2000/svg missing-glyph"`
}

// Walk : if the WalkHandlers.XElemMissingGlyph function is not nil (ie. was set by outside code), calls it with this XElemMissingGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemMissingGlyph instance.
func (me *XElemMissingGlyph) Walk() (err error) {
	if fn := WalkHandlers.XElemMissingGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MissingGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrVertOriginYXsdtDouble defines attribute VertOriginY
type XAttrVertOriginYXsdtDouble struct {
	VertOriginY xsdt.Double `xml:"vert-origin-y,attr,omitempty"`
}

// XAttrHanXsdtString defines attribute Han
type XAttrHanXsdtString struct {
	Han xsdt.String `xml:"han,attr,omitempty"`
}

// XAttrArabicXsdtString defines attribute Arabic
type XAttrArabicXsdtString struct {
	Arabic xsdt.String `xml:"arabic,attr,omitempty"`
}

// XAttrGlyphNameXsdtString defines attribute GlyphName
type XAttrGlyphNameXsdtString struct {
	GlyphName xsdt.String `xml:"glyph-name,attr,omitempty"`
}

// XAttrVertTextOrientXsdtString defines attribute VertTextOrient
type XAttrVertTextOrientXsdtString struct {
	VertTextOrient xsdt.String `xml:"vert-text-orient,attr,omitempty"`
}

// XAttrUnicodeXsdtString defines attribute Unicode
type XAttrUnicodeXsdtString struct {
	Unicode xsdt.String `xml:"unicode,attr,omitempty"`
}

// TglyphType defines type glyphType
type TglyphType struct {
	XElemsCursor
	XAttrClassTClassListType
	XAttrStyleTStyleSheetType
	XElemsTitle
	XElemsMetadata
	XElemsSwitch
	XElemsSymbol
	XElemsClipPath
	XElemsPath
	XElemsStyle
	XElemsFilter
	XAttrHorizAdvXXsdtDouble
	XAttrDTPathDataType
	XElemsAnimateColor
	XAttsStdAttrs
	XAttrHanXsdtString
	XElemsDesc
	XElemsEllipse
	XElemsLine
	XElemsPattern
	XElemsAnimate
	XElemsDefs
	XElemsPolygon
	XElemsSvg
	XElemsColorProfile
	XAttrVertAdvYXsdtDouble
	XAttrArabicXsdtString
	XElemsCircle
	XElemsScript
	XElemsLinearGradient
	XElemsAnimateMotion
	XElemsAnimateTransform
	XElemsText
	XElemsPolyline
	XElemsRadialGradient
	XElemsFont
	XElemsSet
	XElemsFontFace
	XAttsPresentationAttributesAll
	XElemsRect
	XElemsUse
	XElemsG
	XElemsA
	XElemsAltGlyphDef
	XAttrGlyphNameXsdtString
	XAttrVertTextOrientXsdtString
	XElemsImage
	XElemsView
	XElemsMarker
	XElemsMask
	XAttrUnicodeXsdtString
}

// Walk : if the WalkHandlers.TglyphType function is not nil (ie. was set by outside code), calls it with this TglyphType instance as the single argument. Then calls the Walk() method on 29/51 embed(s) and 0/0 field(s) belonging to this TglyphType instance.
func (me *TglyphType) Walk() (err error) {
	if fn := WalkHandlers.TglyphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsGlyph defines element Glyph
type XElemsGlyph struct {
	Glyphs []*TglyphType `xml:"http://www.w3.org/2000/svg glyph"`
}

// Walk : if the WalkHandlers.XElemsGlyph function is not nil (ie. was set by outside code), calls it with this XElemsGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsGlyph instance.
func (me *XElemsGlyph) Walk() (err error) {
	if fn := WalkHandlers.XElemsGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Glyphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFontFace defines element FontFace
type XElemFontFace struct {
	FontFace *TfontFaceType `xml:"http://www.w3.org/2000/svg font-face"`
}

// Walk : if the WalkHandlers.XElemFontFace function is not nil (ie. was set by outside code), calls it with this XElemFontFace instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFontFace instance.
func (me *XElemFontFace) Walk() (err error) {
	if fn := WalkHandlers.XElemFontFace; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// ThkernType defines type hkernType
type ThkernType struct {
	XAttsStdAttrs
	XAttrU2XsdtString
	XAttrG2XsdtString
	XAttrKXsdtDouble
	XAttrU1XsdtString
	XAttrG1XsdtString
}

// Walk : if the WalkHandlers.ThkernType function is not nil (ie. was set by outside code), calls it with this ThkernType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this ThkernType instance.
func (me *ThkernType) Walk() (err error) {
	if fn := WalkHandlers.ThkernType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsHkern defines element Hkern
type XElemsHkern struct {
	Hkerns []*ThkernType `xml:"http://www.w3.org/2000/svg hkern"`
}

// Walk : if the WalkHandlers.XElemsHkern function is not nil (ie. was set by outside code), calls it with this XElemsHkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsHkern instance.
func (me *XElemsHkern) Walk() (err error) {
	if fn := WalkHandlers.XElemsHkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Hkerns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrHorizOriginYXsdtDouble defines attribute HorizOriginY
type XAttrHorizOriginYXsdtDouble struct {
	HorizOriginY xsdt.Double `xml:"horiz-origin-y,attr,omitempty"`
}

// XAttrVertOriginXXsdtDouble defines attribute VertOriginX
type XAttrVertOriginXXsdtDouble struct {
	VertOriginX xsdt.Double `xml:"vert-origin-x,attr,omitempty"`
}

// XAttrHorizOriginXXsdtDouble defines attribute HorizOriginX
type XAttrHorizOriginXXsdtDouble struct {
	HorizOriginX xsdt.Double `xml:"horiz-origin-x,attr,omitempty"`
}

// TfontType defines type fontType
type TfontType struct {
	XAttrHorizOriginXXsdtDouble
	XAttrClassTClassListType
	XElemsVkern
	XElemMissingGlyph
	XAttsPresentationAttributesAll
	XAttsStdAttrs
	XAttrVertOriginYXsdtDouble
	XElemsGlyph
	XElemFontFace
	XGroupDescTitleMetadata
	XAttrHorizAdvXXsdtDouble
	XAttrVertAdvYXsdtDouble
	XElemsHkern
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrStyleTStyleSheetType
	XAttrHorizOriginYXsdtDouble
	XAttrVertOriginXXsdtDouble
}

// Walk : if the WalkHandlers.TfontType function is not nil (ie. was set by outside code), calls it with this TfontType instance as the single argument. Then calls the Walk() method on 6/17 embed(s) and 0/0 field(s) belonging to this TfontType instance.
func (me *TfontType) Walk() (err error) {
	if fn := WalkHandlers.TfontType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsVkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemMissingGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsHkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFont defines element Font
type XElemsFont struct {
	Fonts []*TfontType `xml:"http://www.w3.org/2000/svg font"`
}

// Walk : if the WalkHandlers.XElemsFont function is not nil (ie. was set by outside code), calls it with this XElemsFont instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFont instance.
func (me *XElemsFont) Walk() (err error) {
	if fn := WalkHandlers.XElemsFont; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Fonts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrPatternTransformTransformListType defines attribute PatternTransformTransformListType
type XAttrPatternTransformTransformListType struct {
	PatternTransform TransformListType `xml:"patternTransform,attr,omitempty"`
}

// XAttrPatternUnitsTxsdPatternTypePatternUnits defines attribute PatternUnitsTxsdPatternTypePatternUnits
type XAttrPatternUnitsTxsdPatternTypePatternUnits struct {
	PatternUnits TxsdClipPathTypeClipPathUnits `xml:"patternUnits,attr,omitempty"`
}

// TpatternType defines type patternType
type TpatternType struct {
	XElemsPolyline
	XElemsDesc
	XElemsView
	XElemsA
	XElemsFont
	xlink.XAttrHref
	XElemsAnimateTransform
	XElemsSwitch
	XElemsAnimate
	XAttrPatternTransformTransformListType
	XElemsStyle
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
	XElemsCircle
	XElemsSet
	XElemsRadialGradient
	XElemsCursor
	XElemsMetadata
	XElemsRect
	XElemsSvg
	XElemsFontFace
	XElemsAnimateColor
	XElemsColorProfile
	XAttsXlinkRefAttrs
	XAttsPresentationAttributesAll
	XAttrViewBoxTViewBoxSpecType
	XElemsTitle
	XElemsEllipse
	XElemsLine
	XElemsG
	XElemsPattern
	XElemsImage
	XElemsScript
	XElemsClipPath
	XAttrWidthTLengthType
	XElemsPath
	XElemsPolygon
	XElemsAltGlyphDef
	XAttrStyleTStyleSheetType
	XAttrYTCoordinateType
	XAttsLangSpaceAttrs
	XAttrClassTClassListType
	XAttrPatternUnitsTxsdPatternTypePatternUnits
	XElemsDefs
	XElemsLinearGradient
	XAttsStdAttrs
	XElemsAnimateMotion
	XElemsSymbol
	XElemsMarker
	XAttrHeightTLengthType
	XAttrXTCoordinateType
	XElemsText
	XElemsUse
	XElemsMask
	XElemsFilter
	XAttsTestAttrs
}

// Walk : if the WalkHandlers.TpatternType function is not nil (ie. was set by outside code), calls it with this TpatternType instance as the single argument. Then calls the Walk() method on 30/56 embed(s) and 0/0 field(s) belonging to this TpatternType instance.
func (me *TpatternType) Walk() (err error) {
	if fn := WalkHandlers.TpatternType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPattern defines element Pattern
type XElemsPattern struct {
	Patterns []*TpatternType `xml:"http://www.w3.org/2000/svg pattern"`
}

// Walk : if the WalkHandlers.XElemsPattern function is not nil (ie. was set by outside code), calls it with this XElemsPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPattern instance.
func (me *XElemsPattern) Walk() (err error) {
	if fn := WalkHandlers.XElemsPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Patterns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TdefsType defines type defsType
type TdefsType struct {
	XElemsSymbol
	XElemsAnimateMotion
	XElemsAnimateTransform
	XAttrClassTClassListType
	XElemsMetadata
	XElemsA
	XElemsAltGlyphDef
	XElemsAnimateColor
	XElemsFontFace
	XElemsText
	XElemsLine
	XElemsG
	XElemsView
	XElemsSwitch
	XElemsMarker
	XElemsCursor
	XElemsPath
	XElemsPolygon
	XElemsUse
	XElemsPattern
	XAttsLangSpaceAttrs
	XElemsDefs
	XElemsSvg
	XElemsFilter
	XElemsAnimate
	XAttsPresentationAttributesAll
	XAttrStyleTStyleSheetType
	XAttrTransformTransformListType
	XElemsEllipse
	XElemsPolyline
	XElemsScript
	XElemsStyle
	XElemsClipPath
	XElemsLinearGradient
	XElemsSet
	XAttsStdAttrs
	XAttsGraphicsElementEvents
	XElemsDesc
	XElemsTitle
	XElemsRect
	XElemsCircle
	XElemsImage
	XElemsMask
	XElemsRadialGradient
	XElemsFont
	XElemsColorProfile
	XAttsTestAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TdefsType function is not nil (ie. was set by outside code), calls it with this TdefsType instance as the single argument. Then calls the Walk() method on 31/48 embed(s) and 0/0 field(s) belonging to this TdefsType instance.
func (me *TdefsType) Walk() (err error) {
	if fn := WalkHandlers.TdefsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDefs defines element Defs
type XElemsDefs struct {
	Defses []*TdefsType `xml:"http://www.w3.org/2000/svg defs"`
}

// Walk : if the WalkHandlers.XElemsDefs function is not nil (ie. was set by outside code), calls it with this XElemsDefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDefs instance.
func (me *XElemsDefs) Walk() (err error) {
	if fn := WalkHandlers.XElemsDefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Defses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrRefXTCoordinateType defines attribute RefXTCoordinateType
type XAttrRefXTCoordinateType struct {
	RefX TCoordinateType `xml:"refX,attr,omitempty"`
}

// TmarkerType defines type markerType
type TmarkerType struct {
	XElemsCircle
	XElemsEllipse
	XElemsColorProfile
	XElemsFontFace
	XElemsAnimateTransform
	XElemsMetadata
	XAttsPresentationAttributesAll
	XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
	XElemsImage
	XElemsCursor
	XAttrMarkerUnitsTxsdMarkerTypeMarkerUnits
	XElemsLinearGradient
	XElemsFilter
	XElemsPath
	XElemsPolygon
	XElemsG
	XElemsSymbol
	XAttrMarkerWidthTLengthType
	XAttrRefYTCoordinateType
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsMarker
	XElemsAnimateColor
	XAttsStdAttrs
	XElemsDesc
	XElemsTitle
	XElemsRect
	XElemsScript
	XElemsSwitch
	XElemsRadialGradient
	XAttrOrientXsdtString
	XAttrViewBoxTViewBoxSpecType
	XElemsLine
	XElemsA
	XElemsAltGlyphDef
	XAttrMarkerHeightTLengthType
	XAttrClassTClassListType
	XElemsDefs
	XElemsUse
	XElemsView
	XElemsStyle
	XElemsClipPath
	XElemsPolyline
	XElemsMask
	XElemsPattern
	XAttrRefXTCoordinateType
	XElemsSvg
	XElemsFont
	XElemsSet
	XElemsAnimateMotion
	XAttsLangSpaceAttrs
	XElemsAnimate
	XElemsText
	XAttrStyleTStyleSheetType
}

// Walk : if the WalkHandlers.TmarkerType function is not nil (ie. was set by outside code), calls it with this TmarkerType instance as the single argument. Then calls the Walk() method on 32/53 embed(s) and 0/0 field(s) belonging to this TmarkerType instance.
func (me *TmarkerType) Walk() (err error) {
	if fn := WalkHandlers.TmarkerType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsMarker defines element Marker
type XElemsMarker struct {
	Markers []*TmarkerType `xml:"http://www.w3.org/2000/svg marker"`
}

// Walk : if the WalkHandlers.XElemsMarker function is not nil (ie. was set by outside code), calls it with this XElemsMarker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsMarker instance.
func (me *XElemsMarker) Walk() (err error) {
	if fn := WalkHandlers.XElemsMarker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Markers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TgType defines type gType
type TgType struct {
	XElemsFontFace
	XAttrTransformTransformListType
	XElemsRect
	XElemsImage
	XElemsSymbol
	XElemsCursor
	XElemsFont
	XElemsG
	XElemsMarker
	XElemsClipPath
	XElemsRadialGradient
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsText
	XElemsSvg
	XElemsAltGlyphDef
	XElemsAnimate
	XElemsAnimateMotion
	XElemsAnimateColor
	XAttsPresentationAttributesAll
	XElemsTitle
	XElemsMetadata
	XElemsDefs
	XElemsView
	XElemsLinearGradient
	XElemsSet
	XAttsStdAttrs
	XElemsDesc
	XElemsEllipse
	XElemsSwitch
	XElemsMask
	XElemsAnimateTransform
	XAttrClassTClassListType
	XElemsCircle
	XElemsLine
	XElemsPattern
	XElemsFilter
	XAttrStyleTStyleSheetType
	XElemsPolygon
	XElemsScript
	XAttsLangSpaceAttrs
	XAttsGraphicsElementEvents
	XElemsStyle
	XElemsColorProfile
	XAttsTestAttrs
	XElemsPath
	XElemsPolyline
	XElemsUse
	XElemsA
}

// Walk : if the WalkHandlers.TgType function is not nil (ie. was set by outside code), calls it with this TgType instance as the single argument. Then calls the Walk() method on 33/48 embed(s) and 0/0 field(s) belonging to this TgType instance.
func (me *TgType) Walk() (err error) {
	if fn := WalkHandlers.TgType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsG defines element G
type XElemsG struct {
	Gs []*TgType `xml:"http://www.w3.org/2000/svg g"`
}

// Walk : if the WalkHandlers.XElemsG function is not nil (ie. was set by outside code), calls it with this XElemsG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsG instance.
func (me *XElemsG) Walk() (err error) {
	if fn := WalkHandlers.XElemsG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Gs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrMaskUnitsTxsdMaskTypeMaskUnits defines attribute MaskUnitsTxsdMaskTypeMaskUnits
type XAttrMaskUnitsTxsdMaskTypeMaskUnits struct {
	MaskUnits TxsdClipPathTypeClipPathUnits `xml:"maskUnits,attr,omitempty"`
}

// TmaskType defines type maskType
type TmaskType struct {
	XAttsStdAttrs
	XElemsDefs
	XElemsEllipse
	XElemsAnimateMotion
	XElemsSymbol
	XElemsFilter
	XElemsAnimate
	XAttrTransformTransformListType
	XAttrWidthTLengthType
	XElemsDesc
	XElemsCircle
	XElemsStyle
	XElemsG
	XElemsA
	XElemsAltGlyphDef
	XElemsScript
	XElemsLinearGradient
	XElemsMetadata
	XElemsRect
	XElemsSvg
	XAttrYTCoordinateType
	XElemsPattern
	XAttrStyleTStyleSheetType
	XAttrHeightTLengthType
	XElemsClipPath
	XElemsMask
	XElemsAnimateTransform
	XAttsTestAttrs
	XAttrClassTClassListType
	XElemsPolyline
	XElemsUse
	XElemsMarker
	XElemsColorProfile
	XAttsPresentationAttributesAll
	XElemsLine
	XElemsImage
	XElemsAnimateColor
	XElemsCursor
	XElemsSet
	XElemsText
	XElemsPolygon
	XElemsSwitch
	XAttsLangSpaceAttrs
	XAttrXTCoordinateType
	XElemsView
	XElemsRadialGradient
	XElemsFont
	XAttrMaskUnitsTxsdMaskTypeMaskUnits
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsTitle
	XElemsPath
	XElemsFontFace
}

// Walk : if the WalkHandlers.TmaskType function is not nil (ie. was set by outside code), calls it with this TmaskType instance as the single argument. Then calls the Walk() method on 34/52 embed(s) and 0/0 field(s) belonging to this TmaskType instance.
func (me *TmaskType) Walk() (err error) {
	if fn := WalkHandlers.TmaskType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsMask defines element Mask
type XElemsMask struct {
	Masks []*TmaskType `xml:"http://www.w3.org/2000/svg mask"`
}

// Walk : if the WalkHandlers.XElemsMask function is not nil (ie. was set by outside code), calls it with this XElemsMask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsMask instance.
func (me *XElemsMask) Walk() (err error) {
	if fn := WalkHandlers.XElemsMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Masks {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTargetXsdtNmtoken defines attribute Target
type XAttrTargetXsdtNmtoken struct {
	Target xsdt.Nmtoken `xml:"target,attr,omitempty"`
}

// TaType defines type aType
type TaType struct {
	XCdata
	XElemsDefs
	XElemsPolygon
	XElemsColorProfile
	XElemsPolyline
	XElemsRadialGradient
	XElemsFontFace
	xlink.XAttrActuate
	XElemsMetadata
	XElemsPattern
	XElemsCursor
	XElemsPath
	XElemsText
	XElemsUse
	XElemsView
	XAttrTargetXsdtNmtoken
	XElemsImage
	XElemsSwitch
	XElemsSymbol
	XElemsLinearGradient
	XElemsAnimateMotion
	XAttsTestAttrs
	XElemsLine
	XElemsAnimate
	XAttrStyleTStyleSheetType
	XElemsAnimateColor
	XAttrClassTClassListType
	XElemsScript
	XAttsStdAttrs
	xlink.XAttrType
	xlink.XAttrTitle
	XElemsTitle
	XElemsSet
	XAttsLangSpaceAttrs
	XElemsA
	XElemsClipPath
	XAttsPresentationAttributesAll
	XAttsGraphicsElementEvents
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsDesc
	XElemsMarker
	xlink.XAttrRole
	XElemsRect
	XElemsEllipse
	XElemsSvg
	XElemsMask
	XElemsFilter
	xlink.XAttrShow
	XElemsCircle
	XElemsG
	XElemsFont
	XElemsAnimateTransform
	XAttrTransformTransformListType
	XElemsAltGlyphDef
	XElemsStyle
	xlink.XAttrArcrole
	xlink.XAttrHref
}

// Walk : if the WalkHandlers.TaType function is not nil (ie. was set by outside code), calls it with this TaType instance as the single argument. Then calls the Walk() method on 36/57 embed(s) and 0/0 field(s) belonging to this TaType instance.
func (me *TaType) Walk() (err error) {
	if fn := WalkHandlers.TaType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsA defines element A
type XElemsA struct {
	As []*TaType `xml:"http://www.w3.org/2000/svg a"`
}

// Walk : if the WalkHandlers.XElemsA function is not nil (ie. was set by outside code), calls it with this XElemsA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsA instance.
func (me *XElemsA) Walk() (err error) {
	if fn := WalkHandlers.XElemsA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.As {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TaltGlyphType defines type altGlyphType
type TaltGlyphType struct {
	XAttrDyTLengthsType
	XCdata
	XAttrXTCoordinatesType
	XAttrStyleTStyleSheetType
	XAttrGlyphRefXsdtString
	XAttrDxTLengthsType
	XAttsPresentationAttributesColor
	XAttsPresentationAttributesTextContentElements
	XAttsPresentationAttributesGraphics
	XAttsGraphicsElementEvents
	XAttsXlinkRefAttrs
	XAttsLangSpaceAttrs
	XAttsStdAttrs
	XAttrRotateXsdtString
	XAttsPresentationAttributesFillStroke
	XAttsPresentationAttributesFontSpecification
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrFormatXsdtString
	xlink.XAttrHref
	XAttrYTCoordinatesType
	XAttsTestAttrs
	XAttrClassTClassListType
}

// Walk : if the WalkHandlers.TaltGlyphType function is not nil (ie. was set by outside code), calls it with this TaltGlyphType instance as the single argument. Then calls the Walk() method on 1/22 embed(s) and 0/0 field(s) belonging to this TaltGlyphType instance.
func (me *TaltGlyphType) Walk() (err error) {
	if fn := WalkHandlers.TaltGlyphType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAltGlyph defines element AltGlyph
type XElemsAltGlyph struct {
	AltGlyphs []*TaltGlyphType `xml:"http://www.w3.org/2000/svg altGlyph"`
}

// Walk : if the WalkHandlers.XElemsAltGlyph function is not nil (ie. was set by outside code), calls it with this XElemsAltGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAltGlyph instance.
func (me *XElemsAltGlyph) Walk() (err error) {
	if fn := WalkHandlers.XElemsAltGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AltGlyphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TtspanType defines type tspanType
type TtspanType struct {
	XElemsAltGlyph
	XElemsAnimateColor
	XAttrDxTLengthsType
	XElemsDesc
	XElemsMetadata
	XAttsPresentationAttributesColor
	XCdata
	XAttsPresentationAttributesGraphics
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttsPresentationAttributesFontSpecification
	XAttsPresentationAttributesTextContentElements
	XAttsLangSpaceAttrs
	XAttrStyleTStyleSheetType
	XAttrRotateXsdtString
	XAttrLengthAdjustTxsdTspanTypeLengthAdjust
	XElemsTitle
	XElemsTref
	XElemsA
	XElemsSet
	XAttrYTCoordinatesType
	XAttsPresentationAttributesFillStroke
	XAttsGraphicsElementEvents
	XAttrXTCoordinatesType
	XAttrDyTLengthsType
	XElemsTspan
	XElemsAnimate
	XAttsStdAttrs
	XAttsTestAttrs
	XAttrTextLengthTLengthType
	XAttrClassTClassListType
}

// Walk : if the WalkHandlers.TtspanType function is not nil (ie. was set by outside code), calls it with this TtspanType instance as the single argument. Then calls the Walk() method on 10/30 embed(s) and 0/0 field(s) belonging to this TtspanType instance.
func (me *TtspanType) Walk() (err error) {
	if fn := WalkHandlers.TtspanType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsTref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTspan defines element Tspan
type XElemsTspan struct {
	Tspans []*TtspanType `xml:"http://www.w3.org/2000/svg tspan"`
}

// Walk : if the WalkHandlers.XElemsTspan function is not nil (ie. was set by outside code), calls it with this XElemsTspan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTspan instance.
func (me *XElemsTspan) Walk() (err error) {
	if fn := WalkHandlers.XElemsTspan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Tspans {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrLengthAdjustTxsdTextTypeLengthAdjust defines attribute LengthAdjustTxsdTextTypeLengthAdjust
type XAttrLengthAdjustTxsdTextTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"lengthAdjust,attr,omitempty"`
}

// TxsdTextPathTypeSpacing defines type xsdTextPathTypeSpacing
type TxsdTextPathTypeSpacing xsdt.String

// IsAuto : Returns true if the value of this enumerated TxsdTextPathTypeSpacing is "auto".
func (me TxsdTextPathTypeSpacing) IsAuto() bool { return me.String() == "auto" }

// IsExact : Returns true if the value of this enumerated TxsdTextPathTypeSpacing is "exact".
func (me TxsdTextPathTypeSpacing) IsExact() bool { return me.String() == "exact" }

// Set : Since TxsdTextPathTypeSpacing is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextPathTypeSpacing) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdTextPathTypeSpacing is just a simple String type, this merely returns the current string value.
func (me TxsdTextPathTypeSpacing) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdTextPathTypeSpacing's alias type xsdt.String.
func (me TxsdTextPathTypeSpacing) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrSpacingTxsdTextPathTypeSpacing defines attribute SpacingTxsdTextPathTypeSpacing
type XAttrSpacingTxsdTextPathTypeSpacing struct {
	Spacing TxsdTextPathTypeSpacing `xml:"spacing,attr,omitempty"`
}

// XAttrStartOffsetXsdtString defines attribute StartOffset
type XAttrStartOffsetXsdtString struct {
	StartOffset xsdt.String `xml:"startOffset,attr,omitempty"`
}

// XAttrLengthAdjustTxsdTextPathTypeLengthAdjust defines attribute LengthAdjustTxsdTextPathTypeLengthAdjust
type XAttrLengthAdjustTxsdTextPathTypeLengthAdjust struct {
	LengthAdjust TxsdTspanTypeLengthAdjust `xml:"lengthAdjust,attr,omitempty"`
}

// TxsdTextPathTypeMethod defines type xsdTextPathTypeMethod
type TxsdTextPathTypeMethod xsdt.String

// Set : Since TxsdTextPathTypeMethod is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTextPathTypeMethod) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdTextPathTypeMethod is just a simple String type, this merely returns the current string value.
func (me TxsdTextPathTypeMethod) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdTextPathTypeMethod's alias type xsdt.String.
func (me TxsdTextPathTypeMethod) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsAlign : Returns true if the value of this enumerated TxsdTextPathTypeMethod is "align".
func (me TxsdTextPathTypeMethod) IsAlign() bool { return me.String() == "align" }

// IsStretch : Returns true if the value of this enumerated TxsdTextPathTypeMethod is "stretch".
func (me TxsdTextPathTypeMethod) IsStretch() bool { return me.String() == "stretch" }

// XAttrMethodTxsdTextPathTypeMethod defines attribute MethodTxsdTextPathTypeMethod
type XAttrMethodTxsdTextPathTypeMethod struct {
	Method TxsdTextPathTypeMethod `xml:"method,attr,omitempty"`
}

// TtextPathType defines type textPathType
type TtextPathType struct {
	XAttsLangSpaceAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsMetadata
	XAttsXlinkRefAttrs
	XAttsPresentationAttributesFontSpecification
	XAttsPresentationAttributesFillStroke
	XCdata
	XElemsA
	XElemsAnimate
	XElemsTspan
	XAttsTestAttrs
	xlink.XAttrHref
	XAttrClassTClassListType
	XElemsTref
	XAttsStdAttrs
	XAttsGraphicsElementEvents
	XAttsPresentationAttributesGraphics
	XAttrSpacingTxsdTextPathTypeSpacing
	XAttsPresentationAttributesTextContentElements
	XAttrTextLengthTLengthType
	XAttrLengthAdjustTxsdTextPathTypeLengthAdjust
	XElemsAnimateColor
	XAttrStyleTStyleSheetType
	XAttrStartOffsetXsdtString
	XElemsSet
	XAttrMethodTxsdTextPathTypeMethod
	XElemsDesc
	XElemsTitle
	XElemsAltGlyph
}

// Walk : if the WalkHandlers.TtextPathType function is not nil (ie. was set by outside code), calls it with this TtextPathType instance as the single argument. Then calls the Walk() method on 11/29 embed(s) and 0/0 field(s) belonging to this TtextPathType instance.
func (me *TtextPathType) Walk() (err error) {
	if fn := WalkHandlers.TtextPathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsTspan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTextPath defines element TextPath
type XElemsTextPath struct {
	TextPaths []*TtextPathType `xml:"http://www.w3.org/2000/svg textPath"`
}

// Walk : if the WalkHandlers.XElemsTextPath function is not nil (ie. was set by outside code), calls it with this XElemsTextPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTextPath instance.
func (me *XElemsTextPath) Walk() (err error) {
	if fn := WalkHandlers.XElemsTextPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TextPaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TtextType defines type textType
type TtextType struct {
	XCdata
	XElemsTitle
	XElemsTspan
	XElemsAltGlyph
	XAttsPresentationAttributesGraphics
	XElemsSet
	XElemsAnimateTransform
	XAttsPresentationAttributesTextElements
	XAttsTestAttrs
	XAttrLengthAdjustTxsdTextTypeLengthAdjust
	XAttrYTCoordinateType
	XElemsMetadata
	XElemsTextPath
	XElemsAnimate
	XElemsAnimateMotion
	XAttsLangSpaceAttrs
	XAttsGraphicsElementEvents
	XAttsPresentationAttributesFontSpecification
	XElemsTref
	XElemsA
	XAttsPresentationAttributesFillStroke
	XAttrXTCoordinateType
	XAttrTextLengthTLengthType
	XAttsStdAttrs
	XAttsPresentationAttributesColor
	XAttsPresentationAttributesTextContentElements
	XAttrClassTClassListType
	XElemsDesc
	XElemsAnimateColor
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrStyleTStyleSheetType
	XAttrTransformTransformListType
}

// Walk : if the WalkHandlers.TtextType function is not nil (ie. was set by outside code), calls it with this TtextType instance as the single argument. Then calls the Walk() method on 14/32 embed(s) and 0/0 field(s) belonging to this TtextType instance.
func (me *TtextType) Walk() (err error) {
	if fn := WalkHandlers.TtextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTspan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTextPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsText defines element Text
type XElemsText struct {
	Texts []*TtextType `xml:"http://www.w3.org/2000/svg text"`
}

// Walk : if the WalkHandlers.XElemsText function is not nil (ie. was set by outside code), calls it with this XElemsText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsText instance.
func (me *XElemsText) Walk() (err error) {
	if fn := WalkHandlers.XElemsText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Texts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TclipPathType defines type clipPathType
type TclipPathType struct {
	XElemsCircle
	XElemsAnimate
	XAttsPresentationAttributesFontSpecification
	XAttsTestAttrs
	XElemsAnimateMotion
	XElemsAnimateColor
	XAttsPresentationAttributesTextElements
	XAttrClassTClassListType
	XElemsRect
	XElemsAnimateTransform
	XGroupDescTitleMetadata
	XAttsLangSpaceAttrs
	XElemsPolygon
	XElemsLine
	XElemsUse
	XAttsPresentationAttributesFillStroke
	XAttsPresentationAttributesTextContentElements
	XAttrClipPathUnitsTxsdClipPathTypeClipPathUnits
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsPath
	XElemsEllipse
	XElemsPolyline
	XAttsPresentationAttributesGraphics
	XAttrTransformTransformListType
	XAttrStyleTStyleSheetType
	XElemsText
	XElemsSet
	XAttsStdAttrs
}

// Walk : if the WalkHandlers.TclipPathType function is not nil (ie. was set by outside code), calls it with this TclipPathType instance as the single argument. Then calls the Walk() method on 15/28 embed(s) and 0/0 field(s) belonging to this TclipPathType instance.
func (me *TclipPathType) Walk() (err error) {
	if fn := WalkHandlers.TclipPathType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XGroupDescTitleMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsClipPath defines element ClipPath
type XElemsClipPath struct {
	ClipPaths []*TclipPathType `xml:"http://www.w3.org/2000/svg clipPath"`
}

// Walk : if the WalkHandlers.XElemsClipPath function is not nil (ie. was set by outside code), calls it with this XElemsClipPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsClipPath instance.
func (me *XElemsClipPath) Walk() (err error) {
	if fn := WalkHandlers.XElemsClipPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ClipPaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TsymbolType defines type symbolType
type TsymbolType struct {
	XElemsAltGlyphDef
	XElemsRadialGradient
	XElemsAnimateMotion
	XAttsStdAttrs
	XElemsMetadata
	XElemsPath
	XElemsText
	XElemsPolyline
	XElemsSwitch
	XElemsFont
	XElemsAnimate
	XElemsAnimateTransform
	XElemsFontFace
	XAttrExternalResourcesRequiredXsdtBoolean
	XAttrStyleTStyleSheetType
	XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
	XElemsDefs
	XElemsEllipse
	XElemsG
	XElemsMarker
	XElemsAnimateColor
	XElemsCircle
	XElemsView
	XElemsSet
	XElemsRect
	XElemsPolygon
	XElemsImage
	XElemsSymbol
	XElemsClipPath
	XElemsColorProfile
	XAttsPresentationAttributesAll
	XAttrViewBoxTViewBoxSpecType
	XElemsSvg
	XElemsA
	XElemsStyle
	XElemsCursor
	XAttsLangSpaceAttrs
	XAttsGraphicsElementEvents
	XElemsTitle
	XElemsLine
	XElemsScript
	XElemsMask
	XElemsPattern
	XElemsFilter
	XAttrClassTClassListType
	XElemsDesc
	XElemsUse
	XElemsLinearGradient
}

// Walk : if the WalkHandlers.TsymbolType function is not nil (ie. was set by outside code), calls it with this TsymbolType instance as the single argument. Then calls the Walk() method on 38/48 embed(s) and 0/0 field(s) belonging to this TsymbolType instance.
func (me *TsymbolType) Walk() (err error) {
	if fn := WalkHandlers.TsymbolType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsClipPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSymbol defines element Symbol
type XElemsSymbol struct {
	Symbols []*TsymbolType `xml:"http://www.w3.org/2000/svg symbol"`
}

// Walk : if the WalkHandlers.XElemsSymbol function is not nil (ie. was set by outside code), calls it with this XElemsSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSymbol instance.
func (me *XElemsSymbol) Walk() (err error) {
	if fn := WalkHandlers.XElemsSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Symbols {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrContentStyleTypeTContentTypeTypeTextCSS defines attribute ContentStyleTypeTContentTypeTypeTextCss
type XAttrContentStyleTypeTContentTypeTypeTextCSS struct {
	ContentStyleType TContentTypeType `xml:"contentStyleType,attr,omitempty"`
}

// ContentStyleTypeDefault : Returns the default value for ContentStyleType -- "text/css"
func (me XAttrContentStyleTypeTContentTypeTypeTextCSS) ContentStyleTypeDefault() TContentTypeType {
	return TContentTypeType("text/css")
}

// XAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify defines attribute ZoomAndPanTxsdSvgTypeZoomAndPanMagnify
type XAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify struct {
	ZoomAndPan TxsdViewTypeZoomAndPan `xml:"zoomAndPan,attr,omitempty"`
}

// ZoomAndPanDefault : Returns the default value for ZoomAndPan -- "magnify"
func (me XAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify) ZoomAndPanDefault() TxsdViewTypeZoomAndPan {
	return TxsdViewTypeZoomAndPan("magnify")
}

// XAttrContentScriptTypeTContentTypeTypeTextEcmascript defines attribute ContentScriptTypeTContentTypeTypeTextEcmascript
type XAttrContentScriptTypeTContentTypeTypeTextEcmascript struct {
	ContentScriptType TContentTypeType `xml:"contentScriptType,attr,omitempty"`
}

// ContentScriptTypeDefault : Returns the default value for ContentScriptType -- "text/ecmascript"
func (me XAttrContentScriptTypeTContentTypeTypeTextEcmascript) ContentScriptTypeDefault() TContentTypeType {
	return TContentTypeType("text/ecmascript")
}

// TsvgType defines type svgType
type TsvgType struct {
	XElemsFontFace
	XAttsTestAttrs
	XElemsPattern
	XAttsDocumentEvents
	XElemsMask
	XAttrPreserveAspectRatioTPreserveAspectRatioSpecTypeXMidYMidMeet
	XAttrContentStyleTypeTContentTypeTypeTextCSS
	XElemsMetadata
	XElemsUse
	XElemsImage
	XElemsView
	XElemsAltGlyphDef
	XAttsStdAttrs
	XAttrExternalResourcesRequiredXsdtBoolean
	XElemsTitle
	XElemsScript
	XElemsFilter
	XAttrWidthTLengthType
	XAttrHeightTLengthType
	XElemsMarker
	XAttrZoomAndPanTxsdSvgTypeZoomAndPanMagnify
	XAttsGraphicsElementEvents
	XAttrContentScriptTypeTContentTypeTypeTextEcmascript
	XAttrStyleTStyleSheetType
	XElemsCursor
	XElemsPolyline
	XElemsStyle
	XElemsAnimateColor
	XElemsText
	XElemsAnimate
	XAttrXTCoordinateType
	XElemsDesc
	XElemsEllipse
	XAttsPresentationAttributesAll
	XAttrClassTClassListType
	XElemsRect
	XElemsLinearGradient
	XElemsSet
	XElemsCircle
	XElemsAnimateMotion
	XElemsColorProfile
	XAttsLangSpaceAttrs
	XAttrViewBoxTViewBoxSpecType
	XElemsSymbol
	XElemsClipPath
	XElemsDefs
	XElemsPolygon
	XElemsRadialGradient
	XElemsG
	XElemsAnimateTransform
	XElemsPath
	XElemsLine
	XElemsSvg
	XElemsSwitch
	XElemsA
	XElemsFont
	XAttrYTCoordinateType
}

// Walk : if the WalkHandlers.TsvgType function is not nil (ie. was set by outside code), calls it with this TsvgType instance as the single argument. Then calls the Walk() method on 39/57 embed(s) and 0/0 field(s) belonging to this TsvgType instance.
func (me *TsvgType) Walk() (err error) {
	if fn := WalkHandlers.TsvgType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsMask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsView.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMetadata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFilter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsScript.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMarker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStyle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsText.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDesc.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEllipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSet.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsCircle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSymbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsClipPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsDefs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPolygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsG.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSvg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSwitch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsLine.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFont.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsFontFace.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSvg defines element Svg
type XElemSvg struct {
	Svg *TsvgType `xml:"http://www.w3.org/2000/svg svg"`
}

// Walk : if the WalkHandlers.XElemSvg function is not nil (ie. was set by outside code), calls it with this XElemSvg instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSvg instance.
func (me *XElemSvg) Walk() (err error) {
	if fn := WalkHandlers.XElemSvg; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Svg.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemG defines element G
type XElemG struct {
	G *TgType `xml:"http://www.w3.org/2000/svg g"`
}

// Walk : if the WalkHandlers.XElemG function is not nil (ie. was set by outside code), calls it with this XElemG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemG instance.
func (me *XElemG) Walk() (err error) {
	if fn := WalkHandlers.XElemG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.G.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDefs defines element Defs
type XElemDefs struct {
	Defs *TdefsType `xml:"http://www.w3.org/2000/svg defs"`
}

// Walk : if the WalkHandlers.XElemDefs function is not nil (ie. was set by outside code), calls it with this XElemDefs instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDefs instance.
func (me *XElemDefs) Walk() (err error) {
	if fn := WalkHandlers.XElemDefs; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Defs.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSymbol defines element Symbol
type XElemSymbol struct {
	Symbol *TsymbolType `xml:"http://www.w3.org/2000/svg symbol"`
}

// Walk : if the WalkHandlers.XElemSymbol function is not nil (ie. was set by outside code), calls it with this XElemSymbol instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSymbol instance.
func (me *XElemSymbol) Walk() (err error) {
	if fn := WalkHandlers.XElemSymbol; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Symbol.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemUse defines element Use
type XElemUse struct {
	Use *TuseType `xml:"http://www.w3.org/2000/svg use"`
}

// Walk : if the WalkHandlers.XElemUse function is not nil (ie. was set by outside code), calls it with this XElemUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemUse instance.
func (me *XElemUse) Walk() (err error) {
	if fn := WalkHandlers.XElemUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Use.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemImage defines element Image
type XElemImage struct {
	Image *TimageType `xml:"http://www.w3.org/2000/svg image"`
}

// Walk : if the WalkHandlers.XElemImage function is not nil (ie. was set by outside code), calls it with this XElemImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemImage instance.
func (me *XElemImage) Walk() (err error) {
	if fn := WalkHandlers.XElemImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Image.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSwitch defines element Switch
type XElemSwitch struct {
	Switch *TswitchType `xml:"http://www.w3.org/2000/svg switch"`
}

// Walk : if the WalkHandlers.XElemSwitch function is not nil (ie. was set by outside code), calls it with this XElemSwitch instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSwitch instance.
func (me *XElemSwitch) Walk() (err error) {
	if fn := WalkHandlers.XElemSwitch; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Switch.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStyle defines element Style
type XElemStyle struct {
	Style *TstyleType `xml:"http://www.w3.org/2000/svg style"`
}

// Walk : if the WalkHandlers.XElemStyle function is not nil (ie. was set by outside code), calls it with this XElemStyle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemStyle instance.
func (me *XElemStyle) Walk() (err error) {
	if fn := WalkHandlers.XElemStyle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Style.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPath defines element Path
type XElemPath struct {
	Path *TpathType `xml:"http://www.w3.org/2000/svg path"`
}

// Walk : if the WalkHandlers.XElemPath function is not nil (ie. was set by outside code), calls it with this XElemPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemPath instance.
func (me *XElemPath) Walk() (err error) {
	if fn := WalkHandlers.XElemPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Path.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRect defines element Rect
type XElemRect struct {
	Rect *TrectType `xml:"http://www.w3.org/2000/svg rect"`
}

// Walk : if the WalkHandlers.XElemRect function is not nil (ie. was set by outside code), calls it with this XElemRect instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRect instance.
func (me *XElemRect) Walk() (err error) {
	if fn := WalkHandlers.XElemRect; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Rect.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCircle defines element Circle
type XElemCircle struct {
	Circle *TcircleType `xml:"http://www.w3.org/2000/svg circle"`
}

// Walk : if the WalkHandlers.XElemCircle function is not nil (ie. was set by outside code), calls it with this XElemCircle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemCircle instance.
func (me *XElemCircle) Walk() (err error) {
	if fn := WalkHandlers.XElemCircle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Circle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEllipse defines element Ellipse
type XElemEllipse struct {
	Ellipse *TellipseType `xml:"http://www.w3.org/2000/svg ellipse"`
}

// Walk : if the WalkHandlers.XElemEllipse function is not nil (ie. was set by outside code), calls it with this XElemEllipse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEllipse instance.
func (me *XElemEllipse) Walk() (err error) {
	if fn := WalkHandlers.XElemEllipse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Ellipse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemLine defines element Line
type XElemLine struct {
	Line *TlineType `xml:"http://www.w3.org/2000/svg line"`
}

// Walk : if the WalkHandlers.XElemLine function is not nil (ie. was set by outside code), calls it with this XElemLine instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemLine instance.
func (me *XElemLine) Walk() (err error) {
	if fn := WalkHandlers.XElemLine; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Line.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPolyline defines element Polyline
type XElemPolyline struct {
	Polyline *TpolylineType `xml:"http://www.w3.org/2000/svg polyline"`
}

// Walk : if the WalkHandlers.XElemPolyline function is not nil (ie. was set by outside code), calls it with this XElemPolyline instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemPolyline instance.
func (me *XElemPolyline) Walk() (err error) {
	if fn := WalkHandlers.XElemPolyline; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Polyline.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPolygon defines element Polygon
type XElemPolygon struct {
	Polygon *TpolygonType `xml:"http://www.w3.org/2000/svg polygon"`
}

// Walk : if the WalkHandlers.XElemPolygon function is not nil (ie. was set by outside code), calls it with this XElemPolygon instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemPolygon instance.
func (me *XElemPolygon) Walk() (err error) {
	if fn := WalkHandlers.XElemPolygon; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Polygon.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemText defines element Text
type XElemText struct {
	Text *TtextType `xml:"http://www.w3.org/2000/svg text"`
}

// Walk : if the WalkHandlers.XElemText function is not nil (ie. was set by outside code), calls it with this XElemText instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemText instance.
func (me *XElemText) Walk() (err error) {
	if fn := WalkHandlers.XElemText; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Text.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTspan defines element Tspan
type XElemTspan struct {
	Tspan *TtspanType `xml:"http://www.w3.org/2000/svg tspan"`
}

// Walk : if the WalkHandlers.XElemTspan function is not nil (ie. was set by outside code), calls it with this XElemTspan instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTspan instance.
func (me *XElemTspan) Walk() (err error) {
	if fn := WalkHandlers.XElemTspan; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tspan.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTref defines element Tref
type XElemTref struct {
	Tref *TtrefType `xml:"http://www.w3.org/2000/svg tref"`
}

// Walk : if the WalkHandlers.XElemTref function is not nil (ie. was set by outside code), calls it with this XElemTref instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTref instance.
func (me *XElemTref) Walk() (err error) {
	if fn := WalkHandlers.XElemTref; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Tref.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTextPath defines element TextPath
type XElemTextPath struct {
	TextPath *TtextPathType `xml:"http://www.w3.org/2000/svg textPath"`
}

// Walk : if the WalkHandlers.XElemTextPath function is not nil (ie. was set by outside code), calls it with this XElemTextPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTextPath instance.
func (me *XElemTextPath) Walk() (err error) {
	if fn := WalkHandlers.XElemTextPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TextPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAltGlyph defines element AltGlyph
type XElemAltGlyph struct {
	AltGlyph *TaltGlyphType `xml:"http://www.w3.org/2000/svg altGlyph"`
}

// Walk : if the WalkHandlers.XElemAltGlyph function is not nil (ie. was set by outside code), calls it with this XElemAltGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAltGlyph instance.
func (me *XElemAltGlyph) Walk() (err error) {
	if fn := WalkHandlers.XElemAltGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AltGlyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAltGlyphDef defines element AltGlyphDef
type XElemAltGlyphDef struct {
	AltGlyphDef *TaltGlyphDefType `xml:"http://www.w3.org/2000/svg altGlyphDef"`
}

// Walk : if the WalkHandlers.XElemAltGlyphDef function is not nil (ie. was set by outside code), calls it with this XElemAltGlyphDef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAltGlyphDef instance.
func (me *XElemAltGlyphDef) Walk() (err error) {
	if fn := WalkHandlers.XElemAltGlyphDef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AltGlyphDef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAltGlyphItem defines element AltGlyphItem
type XElemAltGlyphItem struct {
	AltGlyphItem *TaltGlyphItemType `xml:"http://www.w3.org/2000/svg altGlyphItem"`
}

// Walk : if the WalkHandlers.XElemAltGlyphItem function is not nil (ie. was set by outside code), calls it with this XElemAltGlyphItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAltGlyphItem instance.
func (me *XElemAltGlyphItem) Walk() (err error) {
	if fn := WalkHandlers.XElemAltGlyphItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AltGlyphItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemGlyphRef defines element GlyphRef
type XElemGlyphRef struct {
	GlyphRef *TglyphRefType `xml:"http://www.w3.org/2000/svg glyphRef"`
}

// Walk : if the WalkHandlers.XElemGlyphRef function is not nil (ie. was set by outside code), calls it with this XElemGlyphRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemGlyphRef instance.
func (me *XElemGlyphRef) Walk() (err error) {
	if fn := WalkHandlers.XElemGlyphRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.GlyphRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemMarker defines element Marker
type XElemMarker struct {
	Marker *TmarkerType `xml:"http://www.w3.org/2000/svg marker"`
}

// Walk : if the WalkHandlers.XElemMarker function is not nil (ie. was set by outside code), calls it with this XElemMarker instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemMarker instance.
func (me *XElemMarker) Walk() (err error) {
	if fn := WalkHandlers.XElemMarker; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Marker.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemColorProfile defines element ColorProfile
type XElemColorProfile struct {
	ColorProfile *TcolorProfileType `xml:"http://www.w3.org/2000/svg color-profile"`
}

// Walk : if the WalkHandlers.XElemColorProfile function is not nil (ie. was set by outside code), calls it with this XElemColorProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemColorProfile instance.
func (me *XElemColorProfile) Walk() (err error) {
	if fn := WalkHandlers.XElemColorProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ColorProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemLinearGradient defines element LinearGradient
type XElemLinearGradient struct {
	LinearGradient *TlinearGradientType `xml:"http://www.w3.org/2000/svg linearGradient"`
}

// Walk : if the WalkHandlers.XElemLinearGradient function is not nil (ie. was set by outside code), calls it with this XElemLinearGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemLinearGradient instance.
func (me *XElemLinearGradient) Walk() (err error) {
	if fn := WalkHandlers.XElemLinearGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LinearGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRadialGradient defines element RadialGradient
type XElemRadialGradient struct {
	RadialGradient *TradialGradientType `xml:"http://www.w3.org/2000/svg radialGradient"`
}

// Walk : if the WalkHandlers.XElemRadialGradient function is not nil (ie. was set by outside code), calls it with this XElemRadialGradient instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRadialGradient instance.
func (me *XElemRadialGradient) Walk() (err error) {
	if fn := WalkHandlers.XElemRadialGradient; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RadialGradient.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStop defines element Stop
type XElemStop struct {
	Stop *TstopType `xml:"http://www.w3.org/2000/svg stop"`
}

// Walk : if the WalkHandlers.XElemStop function is not nil (ie. was set by outside code), calls it with this XElemStop instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemStop instance.
func (me *XElemStop) Walk() (err error) {
	if fn := WalkHandlers.XElemStop; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Stop.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPattern defines element Pattern
type XElemPattern struct {
	Pattern *TpatternType `xml:"http://www.w3.org/2000/svg pattern"`
}

// Walk : if the WalkHandlers.XElemPattern function is not nil (ie. was set by outside code), calls it with this XElemPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemPattern instance.
func (me *XElemPattern) Walk() (err error) {
	if fn := WalkHandlers.XElemPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Pattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemClipPath defines element ClipPath
type XElemClipPath struct {
	ClipPath *TclipPathType `xml:"http://www.w3.org/2000/svg clipPath"`
}

// Walk : if the WalkHandlers.XElemClipPath function is not nil (ie. was set by outside code), calls it with this XElemClipPath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemClipPath instance.
func (me *XElemClipPath) Walk() (err error) {
	if fn := WalkHandlers.XElemClipPath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ClipPath.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemMask defines element Mask
type XElemMask struct {
	Mask *TmaskType `xml:"http://www.w3.org/2000/svg mask"`
}

// Walk : if the WalkHandlers.XElemMask function is not nil (ie. was set by outside code), calls it with this XElemMask instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemMask instance.
func (me *XElemMask) Walk() (err error) {
	if fn := WalkHandlers.XElemMask; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Mask.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFilter defines element Filter
type XElemFilter struct {
	Filter *TfilterType `xml:"http://www.w3.org/2000/svg filter"`
}

// Walk : if the WalkHandlers.XElemFilter function is not nil (ie. was set by outside code), calls it with this XElemFilter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFilter instance.
func (me *XElemFilter) Walk() (err error) {
	if fn := WalkHandlers.XElemFilter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Filter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeDistantLight defines element FeDistantLight
type XElemsFeDistantLight struct {
	FeDistantLights []*TfeDistantLightType `xml:"http://www.w3.org/2000/svg feDistantLight"`
}

// Walk : if the WalkHandlers.XElemsFeDistantLight function is not nil (ie. was set by outside code), calls it with this XElemsFeDistantLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeDistantLight instance.
func (me *XElemsFeDistantLight) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeDistantLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeDistantLights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFePointLight defines element FePointLight
type XElemsFePointLight struct {
	FePointLights []*TfePointLightType `xml:"http://www.w3.org/2000/svg fePointLight"`
}

// Walk : if the WalkHandlers.XElemsFePointLight function is not nil (ie. was set by outside code), calls it with this XElemsFePointLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFePointLight instance.
func (me *XElemsFePointLight) Walk() (err error) {
	if fn := WalkHandlers.XElemsFePointLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FePointLights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeSpotLight defines element FeSpotLight
type XElemsFeSpotLight struct {
	FeSpotLights []*TfeSpotLightType `xml:"http://www.w3.org/2000/svg feSpotLight"`
}

// Walk : if the WalkHandlers.XElemsFeSpotLight function is not nil (ie. was set by outside code), calls it with this XElemsFeSpotLight instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeSpotLight instance.
func (me *XElemsFeSpotLight) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeSpotLight; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeSpotLights {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeBlend defines element FeBlend
type XElemFeBlend struct {
	FeBlend *TfeBlendType `xml:"http://www.w3.org/2000/svg feBlend"`
}

// Walk : if the WalkHandlers.XElemFeBlend function is not nil (ie. was set by outside code), calls it with this XElemFeBlend instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeBlend instance.
func (me *XElemFeBlend) Walk() (err error) {
	if fn := WalkHandlers.XElemFeBlend; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeBlend.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeColorMatrix defines element FeColorMatrix
type XElemFeColorMatrix struct {
	FeColorMatrix *TfeColorMatrixType `xml:"http://www.w3.org/2000/svg feColorMatrix"`
}

// Walk : if the WalkHandlers.XElemFeColorMatrix function is not nil (ie. was set by outside code), calls it with this XElemFeColorMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeColorMatrix instance.
func (me *XElemFeColorMatrix) Walk() (err error) {
	if fn := WalkHandlers.XElemFeColorMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeColorMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeComponentTransfer defines element FeComponentTransfer
type XElemFeComponentTransfer struct {
	FeComponentTransfer *TfeComponentTransferType `xml:"http://www.w3.org/2000/svg feComponentTransfer"`
}

// Walk : if the WalkHandlers.XElemFeComponentTransfer function is not nil (ie. was set by outside code), calls it with this XElemFeComponentTransfer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeComponentTransfer instance.
func (me *XElemFeComponentTransfer) Walk() (err error) {
	if fn := WalkHandlers.XElemFeComponentTransfer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeComponentTransfer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeFuncR defines element FeFuncR
type XElemsFeFuncR struct {
	FeFuncRs []*TfeFuncRType `xml:"http://www.w3.org/2000/svg feFuncR"`
}

// Walk : if the WalkHandlers.XElemsFeFuncR function is not nil (ie. was set by outside code), calls it with this XElemsFeFuncR instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeFuncR instance.
func (me *XElemsFeFuncR) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeFuncR; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncRs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeFuncG defines element FeFuncG
type XElemsFeFuncG struct {
	FeFuncGs []*TfeFuncGType `xml:"http://www.w3.org/2000/svg feFuncG"`
}

// Walk : if the WalkHandlers.XElemsFeFuncG function is not nil (ie. was set by outside code), calls it with this XElemsFeFuncG instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeFuncG instance.
func (me *XElemsFeFuncG) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeFuncG; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncGs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeFuncB defines element FeFuncB
type XElemsFeFuncB struct {
	FeFuncBs []*TfeFuncBType `xml:"http://www.w3.org/2000/svg feFuncB"`
}

// Walk : if the WalkHandlers.XElemsFeFuncB function is not nil (ie. was set by outside code), calls it with this XElemsFeFuncB instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeFuncB instance.
func (me *XElemsFeFuncB) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeFuncB; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncBs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFeFuncA defines element FeFuncA
type XElemsFeFuncA struct {
	FeFuncAs []*TfeFuncAType `xml:"http://www.w3.org/2000/svg feFuncA"`
}

// Walk : if the WalkHandlers.XElemsFeFuncA function is not nil (ie. was set by outside code), calls it with this XElemsFeFuncA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFeFuncA instance.
func (me *XElemsFeFuncA) Walk() (err error) {
	if fn := WalkHandlers.XElemsFeFuncA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FeFuncAs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeComposite defines element FeComposite
type XElemFeComposite struct {
	FeComposite *TfeCompositeType `xml:"http://www.w3.org/2000/svg feComposite"`
}

// Walk : if the WalkHandlers.XElemFeComposite function is not nil (ie. was set by outside code), calls it with this XElemFeComposite instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeComposite instance.
func (me *XElemFeComposite) Walk() (err error) {
	if fn := WalkHandlers.XElemFeComposite; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeComposite.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeConvolveMatrix defines element FeConvolveMatrix
type XElemFeConvolveMatrix struct {
	FeConvolveMatrix *TfeConvolveMatrixType `xml:"http://www.w3.org/2000/svg feConvolveMatrix"`
}

// Walk : if the WalkHandlers.XElemFeConvolveMatrix function is not nil (ie. was set by outside code), calls it with this XElemFeConvolveMatrix instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeConvolveMatrix instance.
func (me *XElemFeConvolveMatrix) Walk() (err error) {
	if fn := WalkHandlers.XElemFeConvolveMatrix; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeConvolveMatrix.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeDiffuseLighting defines element FeDiffuseLighting
type XElemFeDiffuseLighting struct {
	FeDiffuseLighting *TfeDiffuseLightingType `xml:"http://www.w3.org/2000/svg feDiffuseLighting"`
}

// Walk : if the WalkHandlers.XElemFeDiffuseLighting function is not nil (ie. was set by outside code), calls it with this XElemFeDiffuseLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeDiffuseLighting instance.
func (me *XElemFeDiffuseLighting) Walk() (err error) {
	if fn := WalkHandlers.XElemFeDiffuseLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeDiffuseLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeDisplacementMap defines element FeDisplacementMap
type XElemFeDisplacementMap struct {
	FeDisplacementMap *TfeDisplacementMapType `xml:"http://www.w3.org/2000/svg feDisplacementMap"`
}

// Walk : if the WalkHandlers.XElemFeDisplacementMap function is not nil (ie. was set by outside code), calls it with this XElemFeDisplacementMap instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeDisplacementMap instance.
func (me *XElemFeDisplacementMap) Walk() (err error) {
	if fn := WalkHandlers.XElemFeDisplacementMap; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeDisplacementMap.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeFlood defines element FeFlood
type XElemFeFlood struct {
	FeFlood *TfeFloodType `xml:"http://www.w3.org/2000/svg feFlood"`
}

// Walk : if the WalkHandlers.XElemFeFlood function is not nil (ie. was set by outside code), calls it with this XElemFeFlood instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeFlood instance.
func (me *XElemFeFlood) Walk() (err error) {
	if fn := WalkHandlers.XElemFeFlood; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeFlood.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeGaussianBlur defines element FeGaussianBlur
type XElemFeGaussianBlur struct {
	FeGaussianBlur *TfeGaussianBlurType `xml:"http://www.w3.org/2000/svg feGaussianBlur"`
}

// Walk : if the WalkHandlers.XElemFeGaussianBlur function is not nil (ie. was set by outside code), calls it with this XElemFeGaussianBlur instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeGaussianBlur instance.
func (me *XElemFeGaussianBlur) Walk() (err error) {
	if fn := WalkHandlers.XElemFeGaussianBlur; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeGaussianBlur.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeImage defines element FeImage
type XElemFeImage struct {
	FeImage *TfeImageType `xml:"http://www.w3.org/2000/svg feImage"`
}

// Walk : if the WalkHandlers.XElemFeImage function is not nil (ie. was set by outside code), calls it with this XElemFeImage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeImage instance.
func (me *XElemFeImage) Walk() (err error) {
	if fn := WalkHandlers.XElemFeImage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeImage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeMerge defines element FeMerge
type XElemFeMerge struct {
	FeMerge *TfeMergeType `xml:"http://www.w3.org/2000/svg feMerge"`
}

// Walk : if the WalkHandlers.XElemFeMerge function is not nil (ie. was set by outside code), calls it with this XElemFeMerge instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeMerge instance.
func (me *XElemFeMerge) Walk() (err error) {
	if fn := WalkHandlers.XElemFeMerge; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeMerge.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeMergeNode defines element FeMergeNode
type XElemFeMergeNode struct {
	FeMergeNode *TfeMergeNodeType `xml:"http://www.w3.org/2000/svg feMergeNode"`
}

// Walk : if the WalkHandlers.XElemFeMergeNode function is not nil (ie. was set by outside code), calls it with this XElemFeMergeNode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeMergeNode instance.
func (me *XElemFeMergeNode) Walk() (err error) {
	if fn := WalkHandlers.XElemFeMergeNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeMergeNode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeMorphology defines element FeMorphology
type XElemFeMorphology struct {
	FeMorphology *TfeMorphologyType `xml:"http://www.w3.org/2000/svg feMorphology"`
}

// Walk : if the WalkHandlers.XElemFeMorphology function is not nil (ie. was set by outside code), calls it with this XElemFeMorphology instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeMorphology instance.
func (me *XElemFeMorphology) Walk() (err error) {
	if fn := WalkHandlers.XElemFeMorphology; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeMorphology.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeOffset defines element FeOffset
type XElemFeOffset struct {
	FeOffset *TfeOffsetType `xml:"http://www.w3.org/2000/svg feOffset"`
}

// Walk : if the WalkHandlers.XElemFeOffset function is not nil (ie. was set by outside code), calls it with this XElemFeOffset instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeOffset instance.
func (me *XElemFeOffset) Walk() (err error) {
	if fn := WalkHandlers.XElemFeOffset; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeOffset.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeSpecularLighting defines element FeSpecularLighting
type XElemFeSpecularLighting struct {
	FeSpecularLighting *TfeSpecularLightingType `xml:"http://www.w3.org/2000/svg feSpecularLighting"`
}

// Walk : if the WalkHandlers.XElemFeSpecularLighting function is not nil (ie. was set by outside code), calls it with this XElemFeSpecularLighting instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeSpecularLighting instance.
func (me *XElemFeSpecularLighting) Walk() (err error) {
	if fn := WalkHandlers.XElemFeSpecularLighting; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeSpecularLighting.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeTile defines element FeTile
type XElemFeTile struct {
	FeTile *TfeTileType `xml:"http://www.w3.org/2000/svg feTile"`
}

// Walk : if the WalkHandlers.XElemFeTile function is not nil (ie. was set by outside code), calls it with this XElemFeTile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeTile instance.
func (me *XElemFeTile) Walk() (err error) {
	if fn := WalkHandlers.XElemFeTile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeTile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFeTurbulence defines element FeTurbulence
type XElemFeTurbulence struct {
	FeTurbulence *TfeTurbulenceType `xml:"http://www.w3.org/2000/svg feTurbulence"`
}

// Walk : if the WalkHandlers.XElemFeTurbulence function is not nil (ie. was set by outside code), calls it with this XElemFeTurbulence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFeTurbulence instance.
func (me *XElemFeTurbulence) Walk() (err error) {
	if fn := WalkHandlers.XElemFeTurbulence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FeTurbulence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCursor defines element Cursor
type XElemCursor struct {
	Cursor *TcursorType `xml:"http://www.w3.org/2000/svg cursor"`
}

// Walk : if the WalkHandlers.XElemCursor function is not nil (ie. was set by outside code), calls it with this XElemCursor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemCursor instance.
func (me *XElemCursor) Walk() (err error) {
	if fn := WalkHandlers.XElemCursor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cursor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemA defines element A
type XElemA struct {
	A *TaType `xml:"http://www.w3.org/2000/svg a"`
}

// Walk : if the WalkHandlers.XElemA function is not nil (ie. was set by outside code), calls it with this XElemA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemA instance.
func (me *XElemA) Walk() (err error) {
	if fn := WalkHandlers.XElemA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.A.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemView defines element View
type XElemView struct {
	View *TviewType `xml:"http://www.w3.org/2000/svg view"`
}

// Walk : if the WalkHandlers.XElemView function is not nil (ie. was set by outside code), calls it with this XElemView instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemView instance.
func (me *XElemView) Walk() (err error) {
	if fn := WalkHandlers.XElemView; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.View.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemScript defines element Script
type XElemScript struct {
	Script *TscriptType `xml:"http://www.w3.org/2000/svg script"`
}

// Walk : if the WalkHandlers.XElemScript function is not nil (ie. was set by outside code), calls it with this XElemScript instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemScript instance.
func (me *XElemScript) Walk() (err error) {
	if fn := WalkHandlers.XElemScript; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Script.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAnimate defines element Animate
type XElemAnimate struct {
	Animate *TanimateType `xml:"http://www.w3.org/2000/svg animate"`
}

// Walk : if the WalkHandlers.XElemAnimate function is not nil (ie. was set by outside code), calls it with this XElemAnimate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAnimate instance.
func (me *XElemAnimate) Walk() (err error) {
	if fn := WalkHandlers.XElemAnimate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Animate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSet defines element Set
type XElemSet struct {
	Set *TsetType `xml:"http://www.w3.org/2000/svg set"`
}

// Walk : if the WalkHandlers.XElemSet function is not nil (ie. was set by outside code), calls it with this XElemSet instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSet instance.
func (me *XElemSet) Walk() (err error) {
	if fn := WalkHandlers.XElemSet; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Set.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAnimateMotion defines element AnimateMotion
type XElemAnimateMotion struct {
	AnimateMotion *TanimateMotionType `xml:"http://www.w3.org/2000/svg animateMotion"`
}

// Walk : if the WalkHandlers.XElemAnimateMotion function is not nil (ie. was set by outside code), calls it with this XElemAnimateMotion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAnimateMotion instance.
func (me *XElemAnimateMotion) Walk() (err error) {
	if fn := WalkHandlers.XElemAnimateMotion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimateMotion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsMpath defines element Mpath
type XElemsMpath struct {
	Mpaths []*TmpathType `xml:"http://www.w3.org/2000/svg mpath"`
}

// Walk : if the WalkHandlers.XElemsMpath function is not nil (ie. was set by outside code), calls it with this XElemsMpath instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsMpath instance.
func (me *XElemsMpath) Walk() (err error) {
	if fn := WalkHandlers.XElemsMpath; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Mpaths {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAnimateColor defines element AnimateColor
type XElemAnimateColor struct {
	AnimateColor *TanimateColorType `xml:"http://www.w3.org/2000/svg animateColor"`
}

// Walk : if the WalkHandlers.XElemAnimateColor function is not nil (ie. was set by outside code), calls it with this XElemAnimateColor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAnimateColor instance.
func (me *XElemAnimateColor) Walk() (err error) {
	if fn := WalkHandlers.XElemAnimateColor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimateColor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAnimateTransform defines element AnimateTransform
type XElemAnimateTransform struct {
	AnimateTransform *TanimateTransformType `xml:"http://www.w3.org/2000/svg animateTransform"`
}

// Walk : if the WalkHandlers.XElemAnimateTransform function is not nil (ie. was set by outside code), calls it with this XElemAnimateTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAnimateTransform instance.
func (me *XElemAnimateTransform) Walk() (err error) {
	if fn := WalkHandlers.XElemAnimateTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AnimateTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFont defines element Font
type XElemFont struct {
	Font *TfontType `xml:"http://www.w3.org/2000/svg font"`
}

// Walk : if the WalkHandlers.XElemFont function is not nil (ie. was set by outside code), calls it with this XElemFont instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFont instance.
func (me *XElemFont) Walk() (err error) {
	if fn := WalkHandlers.XElemFont; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Font.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemGlyph defines element Glyph
type XElemGlyph struct {
	Glyph *TglyphType `xml:"http://www.w3.org/2000/svg glyph"`
}

// Walk : if the WalkHandlers.XElemGlyph function is not nil (ie. was set by outside code), calls it with this XElemGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemGlyph instance.
func (me *XElemGlyph) Walk() (err error) {
	if fn := WalkHandlers.XElemGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Glyph.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsMissingGlyph defines element MissingGlyph
type XElemsMissingGlyph struct {
	MissingGlyphs []*TmissingGlyphType `xml:"http://www.w3.org/2000/svg missing-glyph"`
}

// Walk : if the WalkHandlers.XElemsMissingGlyph function is not nil (ie. was set by outside code), calls it with this XElemsMissingGlyph instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsMissingGlyph instance.
func (me *XElemsMissingGlyph) Walk() (err error) {
	if fn := WalkHandlers.XElemsMissingGlyph; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MissingGlyphs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemHkern defines element Hkern
type XElemHkern struct {
	Hkern *ThkernType `xml:"http://www.w3.org/2000/svg hkern"`
}

// Walk : if the WalkHandlers.XElemHkern function is not nil (ie. was set by outside code), calls it with this XElemHkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemHkern instance.
func (me *XElemHkern) Walk() (err error) {
	if fn := WalkHandlers.XElemHkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemVkern defines element Vkern
type XElemVkern struct {
	Vkern *TvkernType `xml:"http://www.w3.org/2000/svg vkern"`
}

// Walk : if the WalkHandlers.XElemVkern function is not nil (ie. was set by outside code), calls it with this XElemVkern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemVkern instance.
func (me *XElemVkern) Walk() (err error) {
	if fn := WalkHandlers.XElemVkern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Vkern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFontFaceSrc defines element FontFaceSrc
type XElemsFontFaceSrc struct {
	FontFaceSrcs []*TfontFaceSrcType `xml:"http://www.w3.org/2000/svg font-face-src"`
}

// Walk : if the WalkHandlers.XElemsFontFaceSrc function is not nil (ie. was set by outside code), calls it with this XElemsFontFaceSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFontFaceSrc instance.
func (me *XElemsFontFaceSrc) Walk() (err error) {
	if fn := WalkHandlers.XElemsFontFaceSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceSrcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFontFaceURI defines element FontFaceURI
type XElemFontFaceURI struct {
	FontFaceURI *TfontFaceURIType `xml:"http://www.w3.org/2000/svg font-face-uri"`
}

// Walk : if the WalkHandlers.XElemFontFaceURI function is not nil (ie. was set by outside code), calls it with this XElemFontFaceURI instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFontFaceURI instance.
func (me *XElemFontFaceURI) Walk() (err error) {
	if fn := WalkHandlers.XElemFontFaceURI; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceURI.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFontFaceFormat defines element FontFaceFormat
type XElemsFontFaceFormat struct {
	FontFaceFormats []*TfontFaceFormatType `xml:"http://www.w3.org/2000/svg font-face-format"`
}

// Walk : if the WalkHandlers.XElemsFontFaceFormat function is not nil (ie. was set by outside code), calls it with this XElemsFontFaceFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFontFaceFormat instance.
func (me *XElemsFontFaceFormat) Walk() (err error) {
	if fn := WalkHandlers.XElemsFontFaceFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FontFaceFormats {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFontFaceName defines element FontFaceName
type XElemFontFaceName struct {
	FontFaceName *TfontFaceNameType `xml:"http://www.w3.org/2000/svg font-face-name"`
}

// Walk : if the WalkHandlers.XElemFontFaceName function is not nil (ie. was set by outside code), calls it with this XElemFontFaceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFontFaceName instance.
func (me *XElemFontFaceName) Walk() (err error) {
	if fn := WalkHandlers.XElemFontFaceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FontFaceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDefinitionSrc defines element DefinitionSrc
type XElemsDefinitionSrc struct {
	DefinitionSrcs []*TdefinitionSrcType `xml:"http://www.w3.org/2000/svg definition-src"`
}

// Walk : if the WalkHandlers.XElemsDefinitionSrc function is not nil (ie. was set by outside code), calls it with this XElemsDefinitionSrc instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDefinitionSrc instance.
func (me *XElemsDefinitionSrc) Walk() (err error) {
	if fn := WalkHandlers.XElemsDefinitionSrc; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DefinitionSrcs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemForeignObject defines element ForeignObject
type XElemForeignObject struct {
	ForeignObject *TforeignObjectType `xml:"http://www.w3.org/2000/svg foreignObject"`
}

// Walk : if the WalkHandlers.XElemForeignObject function is not nil (ie. was set by outside code), calls it with this XElemForeignObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemForeignObject instance.
func (me *XElemForeignObject) Walk() (err error) {
	if fn := WalkHandlers.XElemForeignObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ForeignObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TLanguageCodeType a language code, as per [RFC3066]
type TLanguageCodeType xsdt.String

// Set : Since TLanguageCodeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLanguageCodeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLanguageCodeType is just a simple String type, this merely returns the current string value.
func (me TLanguageCodeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLanguageCodeType's alias type xsdt.String.
func (me TLanguageCodeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// TNumberOrPercentageType a <number> or a  <percentage>
type TNumberOrPercentageType xsdt.String

// Set : Since TNumberOrPercentageType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNumberOrPercentageType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TNumberOrPercentageType is just a simple String type, this merely returns the current string value.
func (me TNumberOrPercentageType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TNumberOrPercentageType's alias type xsdt.String.
func (me TNumberOrPercentageType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// TLinkTargetType link to this target
type TLinkTargetType xsdt.String

// Set : Since TLinkTargetType is just a simple String type, this merely sets the current value from the specified string.
func (me *TLinkTargetType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TLinkTargetType is just a simple String type, this merely returns the current string value.
func (me TLinkTargetType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TLinkTargetType's alias type xsdt.String.
func (me TLinkTargetType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// TNumbersType list of <number>s
type TNumbersType xsdt.String

// String : Since TNumbersType is just a simple String type, this merely returns the current string value.
func (me TNumbersType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TNumbersType's alias type xsdt.String.
func (me TNumbersType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TNumbersType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNumbersType) Set(s string) { (*xsdt.String)(me).Set(s) }

// TKerningValue 'kerning' property/attribute value (e.g., auto | <length>)
// auto | <length> | inherit
type TKerningValue xsdt.String

// String : Since TKerningValue is just a simple String type, this merely returns the current string value.
func (me TKerningValue) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TKerningValue's alias type xsdt.String.
func (me TKerningValue) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TKerningValue is just a simple String type, this merely sets the current value from the specified string.
func (me *TKerningValue) Set(s string) { (*xsdt.String)(me).Set(s) }

// TNumberOptionalNumberType list of <number>s, but at least one and at most two
type TNumberOptionalNumberType xsdt.String

// String : Since TNumberOptionalNumberType is just a simple String type, this merely returns the current string value.
func (me TNumberOptionalNumberType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TNumberOptionalNumberType's alias type xsdt.String.
func (me TNumberOptionalNumberType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Set : Since TNumberOptionalNumberType is just a simple String type, this merely sets the current value from the specified string.
func (me *TNumberOptionalNumberType) Set(s string) { (*xsdt.String)(me).Set(s) }

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 245 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 245 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XElemsPattern                                                func(*XElemsPattern, bool) error
	XElemsMask                                                   func(*XElemsMask, bool) error
	XElemMpath                                                   func(*XElemMpath, bool) error
	XElemsScript                                                 func(*XElemsScript, bool) error
	TstyleType                                                   func(*TstyleType, bool) error
	XElemsTextPath                                               func(*XElemsTextPath, bool) error
	TmpathType                                                   func(*TmpathType, bool) error
	TfeDisplacementMapType                                       func(*TfeDisplacementMapType, bool) error
	XElemFeConvolveMatrix                                        func(*XElemFeConvolveMatrix, bool) error
	TcircleType                                                  func(*TcircleType, bool) error
	XElemsColorProfile                                           func(*XElemsColorProfile, bool) error
	XElemsFeConvolveMatrix                                       func(*XElemsFeConvolveMatrix, bool) error
	XElemPath                                                    func(*XElemPath, bool) error
	XElemCircle                                                  func(*XElemCircle, bool) error
	XElemSet                                                     func(*XElemSet, bool) error
	XElemsStyle                                                  func(*XElemsStyle, bool) error
	XElemsFeComponentTransfer                                    func(*XElemsFeComponentTransfer, bool) error
	XElemStyle                                                   func(*XElemStyle, bool) error
	XElemFont                                                    func(*XElemFont, bool) error
	XElemsMissingGlyph                                           func(*XElemsMissingGlyph, bool) error
	XGroupDescTitleMetadata                                      func(*XGroupDescTitleMetadata, bool) error
	TfontFaceType                                                func(*TfontFaceType, bool) error
	XElemsFilter                                                 func(*XElemsFilter, bool) error
	XElemFeMergeNode                                             func(*XElemFeMergeNode, bool) error
	XElemFeSpecularLighting                                      func(*XElemFeSpecularLighting, bool) error
	XElemA                                                       func(*XElemA, bool) error
	TdefinitionSrcType                                           func(*TdefinitionSrcType, bool) error
	XElemsFeColorMatrix                                          func(*XElemsFeColorMatrix, bool) error
	TglyphType                                                   func(*TglyphType, bool) error
	XElemImage                                                   func(*XElemImage, bool) error
	XElemLine                                                    func(*XElemLine, bool) error
	XElemAnimateTransform                                        func(*XElemAnimateTransform, bool) error
	XElemsDesc                                                   func(*XElemsDesc, bool) error
	TgType                                                       func(*TgType, bool) error
	XElemPattern                                                 func(*XElemPattern, bool) error
	TimageType                                                   func(*TimageType, bool) error
	XElemsFeDisplacementMap                                      func(*XElemsFeDisplacementMap, bool) error
	XElemsGlyph                                                  func(*XElemsGlyph, bool) error
	TfePointLightType                                            func(*TfePointLightType, bool) error
	XElemsFeComposite                                            func(*XElemsFeComposite, bool) error
	XElemFontFace                                                func(*XElemFontFace, bool) error
	XElemTref                                                    func(*XElemTref, bool) error
	XElemFeMerge                                                 func(*XElemFeMerge, bool) error
	XElemsUse                                                    func(*XElemsUse, bool) error
	XElemsLinearGradient                                         func(*XElemsLinearGradient, bool) error
	XElemFeFuncR                                                 func(*XElemFeFuncR, bool) error
	TfeFloodType                                                 func(*TfeFloodType, bool) error
	TglyphRefType                                                func(*TglyphRefType, bool) error
	TmissingGlyphType                                            func(*TmissingGlyphType, bool) error
	XCdata                                                       func(*XCdata, bool) error
	XElemsTspan                                                  func(*XElemsTspan, bool) error
	XElemUse                                                     func(*XElemUse, bool) error
	XElemFeDiffuseLighting                                       func(*XElemFeDiffuseLighting, bool) error
	XElemsAltGlyphDef                                            func(*XElemsAltGlyphDef, bool) error
	TfeBlendType                                                 func(*TfeBlendType, bool) error
	XElemFilter                                                  func(*XElemFilter, bool) error
	XElemFeTile                                                  func(*XElemFeTile, bool) error
	XElemForeignObject                                           func(*XElemForeignObject, bool) error
	XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType func(*XElemMetadataalldescTitleMetadataschemaMetadataTmetadataType, bool) error
	XElemsFeImage                                                func(*XElemsFeImage, bool) error
	TdefsType                                                    func(*TdefsType, bool) error
	XElemEllipse                                                 func(*XElemEllipse, bool) error
	XElemFeFlood                                                 func(*XElemFeFlood, bool) error
	XElemFeImage                                                 func(*XElemFeImage, bool) error
	XElemsTref                                                   func(*XElemsTref, bool) error
	TfeGaussianBlurType                                          func(*TfeGaussianBlurType, bool) error
	ThkernType                                                   func(*ThkernType, bool) error
	XElemFeTurbulence                                            func(*XElemFeTurbulence, bool) error
	TaltGlyphType                                                func(*TaltGlyphType, bool) error
	XElemPolygon                                                 func(*XElemPolygon, bool) error
	TfontFaceNameType                                            func(*TfontFaceNameType, bool) error
	XElemsSwitch                                                 func(*XElemsSwitch, bool) error
	XElemFeSpotLight                                             func(*XElemFeSpotLight, bool) error
	TfeCompositeType                                             func(*TfeCompositeType, bool) error
	XElemsG                                                      func(*XElemsG, bool) error
	TsymbolType                                                  func(*TsymbolType, bool) error
	XElemLinearGradient                                          func(*XElemLinearGradient, bool) error
	XElemsMpath                                                  func(*XElemsMpath, bool) error
	TellipseType                                                 func(*TellipseType, bool) error
	XElemsSvg                                                    func(*XElemsSvg, bool) error
	TfontFaceSrcType                                             func(*TfontFaceSrcType, bool) error
	XElemsFeBlend                                                func(*XElemsFeBlend, bool) error
	XElemsLine                                                   func(*XElemsLine, bool) error
	XElemAltGlyphDef                                             func(*XElemAltGlyphDef, bool) error
	TfeImageType                                                 func(*TfeImageType, bool) error
	XElemMissingGlyph                                            func(*XElemMissingGlyph, bool) error
	XElemsFontFaceFormat                                         func(*XElemsFontFaceFormat, bool) error
	XElemTitlealldescTitleMetadataschemaTitleTtitleType          func(*XElemTitlealldescTitleMetadataschemaTitleTtitleType, bool) error
	XElemsGlyphRef                                               func(*XElemsGlyphRef, bool) error
	TmaskType                                                    func(*TmaskType, bool) error
	TstopType                                                    func(*TstopType, bool) error
	XElemDefs                                                    func(*XElemDefs, bool) error
	XElemStop                                                    func(*XElemStop, bool) error
	TtextType                                                    func(*TtextType, bool) error
	XElemsFeDistantLight                                         func(*XElemsFeDistantLight, bool) error
	XElemsAnimateMotion                                          func(*XElemsAnimateMotion, bool) error
	XElemTspan                                                   func(*XElemTspan, bool) error
	XElemsFeFuncR                                                func(*XElemsFeFuncR, bool) error
	TfilterType                                                  func(*TfilterType, bool) error
	XElemSwitch                                                  func(*XElemSwitch, bool) error
	TcolorProfileType                                            func(*TcolorProfileType, bool) error
	TfeFuncGType                                                 func(*TfeFuncGType, bool) error
	TfeMergeType                                                 func(*TfeMergeType, bool) error
	TvkernType                                                   func(*TvkernType, bool) error
	XElemFeBlend                                                 func(*XElemFeBlend, bool) error
	XElemFeGaussianBlur                                          func(*XElemFeGaussianBlur, bool) error
	XElemDescalldescTitleMetadataschemaDescTdescType             func(*XElemDescalldescTitleMetadataschemaDescTdescType, bool) error
	XElemsFontFaceURI                                            func(*XElemsFontFaceURI, bool) error
	XElemsRadialGradient                                         func(*XElemsRadialGradient, bool) error
	XElemVkern                                                   func(*XElemVkern, bool) error
	TpolylineType                                                func(*TpolylineType, bool) error
	XElemFeFuncA                                                 func(*XElemFeFuncA, bool) error
	XElemFeDistantLight                                          func(*XElemFeDistantLight, bool) error
	XElemClipPath                                                func(*XElemClipPath, bool) error
	XElemFeComposite                                             func(*XElemFeComposite, bool) error
	XElemGlyph                                                   func(*XElemGlyph, bool) error
	XElemsPath                                                   func(*XElemsPath, bool) error
	XElemsFeFlood                                                func(*XElemsFeFlood, bool) error
	TfeTurbulenceType                                            func(*TfeTurbulenceType, bool) error
	XElemsText                                                   func(*XElemsText, bool) error
	TsvgType                                                     func(*TsvgType, bool) error
	XElemMask                                                    func(*XElemMask, bool) error
	TsetType                                                     func(*TsetType, bool) error
	XElemsFeOffset                                               func(*XElemsFeOffset, bool) error
	XElemsClipPath                                               func(*XElemsClipPath, bool) error
	XElemsFePointLight                                           func(*XElemsFePointLight, bool) error
	XElemFeColorMatrix                                           func(*XElemFeColorMatrix, bool) error
	XElemScript                                                  func(*XElemScript, bool) error
	XElemsAnimateColor                                           func(*XElemsAnimateColor, bool) error
	TuseType                                                     func(*TuseType, bool) error
	TfontFaceURIType                                             func(*TfontFaceURIType, bool) error
	TfeFuncBType                                                 func(*TfeFuncBType, bool) error
	TfeDistantLightType                                          func(*TfeDistantLightType, bool) error
	TtextPathType                                                func(*TtextPathType, bool) error
	XElemsRect                                                   func(*XElemsRect, bool) error
	XElemDefinitionSrc                                           func(*XElemDefinitionSrc, bool) error
	TfeFuncAType                                                 func(*TfeFuncAType, bool) error
	XElemRect                                                    func(*XElemRect, bool) error
	TcursorType                                                  func(*TcursorType, bool) error
	XElemsFeDiffuseLighting                                      func(*XElemsFeDiffuseLighting, bool) error
	XElemColorProfile                                            func(*XElemColorProfile, bool) error
	TscriptType                                                  func(*TscriptType, bool) error
	XElemsFeMorphology                                           func(*XElemsFeMorphology, bool) error
	XElemsForeignObject                                          func(*XElemsForeignObject, bool) error
	XElemFontFaceName                                            func(*XElemFontFaceName, bool) error
	XElemsDefinitionSrc                                          func(*XElemsDefinitionSrc, bool) error
	XElemsCursor                                                 func(*XElemsCursor, bool) error
	XElemsVkern                                                  func(*XElemsVkern, bool) error
	XElemsFeFuncG                                                func(*XElemsFeFuncG, bool) error
	TanimateType                                                 func(*TanimateType, bool) error
	TclipPathType                                                func(*TclipPathType, bool) error
	XElemText                                                    func(*XElemText, bool) error
	XElemsStop                                                   func(*XElemsStop, bool) error
	TforeignObjectType                                           func(*TforeignObjectType, bool) error
	TaltGlyphItemType                                            func(*TaltGlyphItemType, bool) error
	XElemAnimateMotion                                           func(*XElemAnimateMotion, bool) error
	XElemFeFuncB                                                 func(*XElemFeFuncB, bool) error
	XElemsFeGaussianBlur                                         func(*XElemsFeGaussianBlur, bool) error
	XElemSvg                                                     func(*XElemSvg, bool) error
	XElemMarker                                                  func(*XElemMarker, bool) error
	XElemsFeSpecularLighting                                     func(*XElemsFeSpecularLighting, bool) error
	XElemsFeMergeNode                                            func(*XElemsFeMergeNode, bool) error
	XElemsFeFuncB                                                func(*XElemsFeFuncB, bool) error
	XElemFontFaceURI                                             func(*XElemFontFaceURI, bool) error
	XElemsA                                                      func(*XElemsA, bool) error
	XElemsCircle                                                 func(*XElemsCircle, bool) error
	TlineType                                                    func(*TlineType, bool) error
	XElemsMetadata                                               func(*XElemsMetadata, bool) error
	TtspanType                                                   func(*TtspanType, bool) error
	TfeFuncRType                                                 func(*TfeFuncRType, bool) error
	TfontType                                                    func(*TfontType, bool) error
	TaType                                                       func(*TaType, bool) error
	XElemView                                                    func(*XElemView, bool) error
	XElemsSet                                                    func(*XElemsSet, bool) error
	XElemsView                                                   func(*XElemsView, bool) error
	XElemsAltGlyph                                               func(*XElemsAltGlyph, bool) error
	TpolygonType                                                 func(*TpolygonType, bool) error
	XElemAnimate                                                 func(*XElemAnimate, bool) error
	TanimateTransformType                                        func(*TanimateTransformType, bool) error
	XElemFeDisplacementMap                                       func(*XElemFeDisplacementMap, bool) error
	XElemFeOffset                                                func(*XElemFeOffset, bool) error
	TanimateColorType                                            func(*TanimateColorType, bool) error
	TanimateMotionType                                           func(*TanimateMotionType, bool) error
	TfeMorphologyType                                            func(*TfeMorphologyType, bool) error
	XElemsFeMerge                                                func(*XElemsFeMerge, bool) error
	XElemsMarker                                                 func(*XElemsMarker, bool) error
	XElemRadialGradient                                          func(*XElemRadialGradient, bool) error
	XElemsImage                                                  func(*XElemsImage, bool) error
	TtrefType                                                    func(*TtrefType, bool) error
	XElemsSymbol                                                 func(*XElemsSymbol, bool) error
	XElemFeComponentTransfer                                     func(*XElemFeComponentTransfer, bool) error
	TrectType                                                    func(*TrectType, bool) error
	XElemFontFaceSrc                                             func(*XElemFontFaceSrc, bool) error
	TfeConvolveMatrixType                                        func(*TfeConvolveMatrixType, bool) error
	TswitchType                                                  func(*TswitchType, bool) error
	TviewType                                                    func(*TviewType, bool) error
	TpatternType                                                 func(*TpatternType, bool) error
	XElemsFontFaceName                                           func(*XElemsFontFaceName, bool) error
	XElemsDefs                                                   func(*XElemsDefs, bool) error
	XElemsFeSpotLight                                            func(*XElemsFeSpotLight, bool) error
	TmetadataType                                                func(*TmetadataType, bool) error
	XElemsPolygon                                                func(*XElemsPolygon, bool) error
	XElemsPolyline                                               func(*XElemsPolyline, bool) error
	XElemAnimateColor                                            func(*XElemAnimateColor, bool) error
	XElemFontFaceFormat                                          func(*XElemFontFaceFormat, bool) error
	XElemsFeTurbulence                                           func(*XElemsFeTurbulence, bool) error
	TfeOffsetType                                                func(*TfeOffsetType, bool) error
	XElemGlyphRef                                                func(*XElemGlyphRef, bool) error
	XElemsFontFaceSrc                                            func(*XElemsFontFaceSrc, bool) error
	TfeTileType                                                  func(*TfeTileType, bool) error
	XElemsFeFuncA                                                func(*XElemsFeFuncA, bool) error
	TlinearGradientType                                          func(*TlinearGradientType, bool) error
	XElemFeFuncG                                                 func(*XElemFeFuncG, bool) error
	TfeDiffuseLightingType                                       func(*TfeDiffuseLightingType, bool) error
	XElemsAltGlyphItem                                           func(*XElemsAltGlyphItem, bool) error
	TaltGlyphDefType                                             func(*TaltGlyphDefType, bool) error
	XElemAltGlyphItem                                            func(*XElemAltGlyphItem, bool) error
	TdescType                                                    func(*TdescType, bool) error
	TtitleType                                                   func(*TtitleType, bool) error
	TfeComponentTransferType                                     func(*TfeComponentTransferType, bool) error
	TradialGradientType                                          func(*TradialGradientType, bool) error
	XElemAltGlyph                                                func(*XElemAltGlyph, bool) error
	XElemsAnimate                                                func(*XElemsAnimate, bool) error
	TfontFaceFormatType                                          func(*TfontFaceFormatType, bool) error
	XElemsFeTile                                                 func(*XElemsFeTile, bool) error
	XElemsHkern                                                  func(*XElemsHkern, bool) error
	XElemSymbol                                                  func(*XElemSymbol, bool) error
	TfeColorMatrixType                                           func(*TfeColorMatrixType, bool) error
	XElemTextPath                                                func(*XElemTextPath, bool) error
	XElemHkern                                                   func(*XElemHkern, bool) error
	TpathType                                                    func(*TpathType, bool) error
	XElemsFontFace                                               func(*XElemsFontFace, bool) error
	TfeSpecularLightingType                                      func(*TfeSpecularLightingType, bool) error
	TmarkerType                                                  func(*TmarkerType, bool) error
	XElemPolyline                                                func(*XElemPolyline, bool) error
	XElemFeMorphology                                            func(*XElemFeMorphology, bool) error
	XElemsEllipse                                                func(*XElemsEllipse, bool) error
	TfeMergeNodeType                                             func(*TfeMergeNodeType, bool) error
	XElemsFont                                                   func(*XElemsFont, bool) error
	XElemG                                                       func(*XElemG, bool) error
	XElemsAnimateTransform                                       func(*XElemsAnimateTransform, bool) error
	XElemsTitle                                                  func(*XElemsTitle, bool) error
	TfeSpotLightType                                             func(*TfeSpotLightType, bool) error
	XElemFePointLight                                            func(*XElemFePointLight, bool) error
	XElemCursor                                                  func(*XElemCursor, bool) error
}
