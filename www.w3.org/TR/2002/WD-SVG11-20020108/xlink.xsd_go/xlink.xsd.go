// Package goXlink : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goXlink

import (
	xsdt "github.com/tecnickcom/go-xsd-pkg/xsdt"
)

// TxsdType defines type xsdType
type TxsdType xsdt.String

// IsLocator : Returns true if the value of this enumerated TxsdType is "locator".
func (me TxsdType) IsLocator() bool { return me.String() == "locator" }

// IsArc : Returns true if the value of this enumerated TxsdType is "arc".
func (me TxsdType) IsArc() bool { return me.String() == "arc" }

// Set : Since TxsdType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdType is just a simple String type, this merely returns the current string value.
func (me TxsdType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdType's alias type xsdt.String.
func (me TxsdType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsSimple : Returns true if the value of this enumerated TxsdType is "simple".
func (me TxsdType) IsSimple() bool { return me.String() == "simple" }

// IsExtended : Returns true if the value of this enumerated TxsdType is "extended".
func (me TxsdType) IsExtended() bool { return me.String() == "extended" }

// XAttrType defines attribute Type
type XAttrType struct {
	Type TxsdType `xml:"type,attr,omitempty"`
}

// TypeDefault : Returns the default value for Type -- "simple"
func (me XAttrType) TypeDefault() TxsdType { return TxsdType("simple") }

// XAttrHref defines attribute Href
type XAttrHref struct {
	Href xsdt.AnyURI `xml:"href,attr,omitempty"`
}

// XAttrRole defines attribute Role
type XAttrRole struct {
	Role xsdt.String `xml:"role,attr,omitempty"`
}

// XAttrArcrole defines attribute Arcrole
type XAttrArcrole struct {
	Arcrole xsdt.String `xml:"arcrole,attr,omitempty"`
}

// XAttrTitle defines attribute Title
type XAttrTitle struct {
	Title xsdt.String `xml:"title,attr,omitempty"`
}

// TxsdShow defines type xsdShow
type TxsdShow xsdt.String

// IsNew : Returns true if the value of this enumerated TxsdShow is "new".
func (me TxsdShow) IsNew() bool { return me.String() == "new" }

// IsReplace : Returns true if the value of this enumerated TxsdShow is "replace".
func (me TxsdShow) IsReplace() bool { return me.String() == "replace" }

// IsEmbed : Returns true if the value of this enumerated TxsdShow is "embed".
func (me TxsdShow) IsEmbed() bool { return me.String() == "embed" }

// IsOther : Returns true if the value of this enumerated TxsdShow is "other".
func (me TxsdShow) IsOther() bool { return me.String() == "other" }

// IsNone : Returns true if the value of this enumerated TxsdShow is "none".
func (me TxsdShow) IsNone() bool { return me.String() == "none" }

// Set : Since TxsdShow is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdShow) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdShow is just a simple String type, this merely returns the current string value.
func (me TxsdShow) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdShow's alias type xsdt.String.
func (me TxsdShow) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrShow defines attribute Show
type XAttrShow struct {
	Show TxsdShow `xml:"show,attr,omitempty"`
}

// ShowDefault : Returns the default value for Show -- "embed"
func (me XAttrShow) ShowDefault() TxsdShow { return TxsdShow("embed") }

// TxsdActuate defines type xsdActuate
type TxsdActuate xsdt.String

// IsNone : Returns true if the value of this enumerated TxsdActuate is "none".
func (me TxsdActuate) IsNone() bool { return me.String() == "none" }

// Set : Since TxsdActuate is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdActuate) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TxsdActuate is just a simple String type, this merely returns the current string value.
func (me TxsdActuate) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TxsdActuate's alias type xsdt.String.
func (me TxsdActuate) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsOnLoad : Returns true if the value of this enumerated TxsdActuate is "onLoad".
func (me TxsdActuate) IsOnLoad() bool { return me.String() == "onLoad" }

// IsOnRequest : Returns true if the value of this enumerated TxsdActuate is "onRequest".
func (me TxsdActuate) IsOnRequest() bool { return me.String() == "onRequest" }

// IsOther : Returns true if the value of this enumerated TxsdActuate is "other".
func (me TxsdActuate) IsOther() bool { return me.String() == "other" }

// XAttrActuate defines attribute Actuate
type XAttrActuate struct {
	Actuate TxsdActuate `xml:"actuate,attr,omitempty"`
}

// ActuateDefault : Returns the default value for Actuate -- "onLoad"
func (me XAttrActuate) ActuateDefault() TxsdActuate { return TxsdActuate("onLoad") }

// XAttrFrom defines attribute From
type XAttrFrom struct {
	From xsdt.String `xml:"from,attr,omitempty"`
}

// XAttrTo defines attribute To
type XAttrTo struct {
	To xsdt.String `xml:"to,attr,omitempty"`
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 1 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 1 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XCdata func(*XCdata, bool) error
}
