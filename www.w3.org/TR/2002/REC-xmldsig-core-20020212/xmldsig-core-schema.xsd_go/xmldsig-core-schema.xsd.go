// Package goXmldsigCore : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goXmldsigCore

import (
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrIDXsdtID defines attribute Id
type XAttrIDXsdtID struct {
	ID xsdt.ID `xml:"Id,attr,omitempty"`
}

// XAttrMimeTypeXsdtString defines attribute MimeType
type XAttrMimeTypeXsdtString struct {
	MimeType xsdt.String `xml:"MimeType,attr,omitempty"`
}

// XAttrEncodingXsdtAnyURI defines attribute Encoding
type XAttrEncodingXsdtAnyURI struct {
	Encoding xsdt.AnyURI `xml:"Encoding,attr,omitempty"`
}

// TObjectType defines type ObjectType
type TObjectType struct {
	XCdata
	XAttrIDXsdtID
	XAttrMimeTypeXsdtString
	XAttrEncodingXsdtAnyURI
}

// Walk : if the WalkHandlers.TObjectType function is not nil (ie. was set by outside code), calls it with this TObjectType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TObjectType instance.
func (me *TObjectType) Walk() (err error) {
	if fn := WalkHandlers.TObjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsObject defines element Object
type XElemsObject struct {
	Objects []*TObjectType `xml:"http://www.w3.org/2000/09/xmldsig# Object"`
}

// Walk : if the WalkHandlers.XElemsObject function is not nil (ie. was set by outside code), calls it with this XElemsObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsObject instance.
func (me *XElemsObject) Walk() (err error) {
	if fn := WalkHandlers.XElemsObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Objects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAlgorithmXsdtAnyURI defines attribute Algorithm
type XAttrAlgorithmXsdtAnyURI struct {
	Algorithm xsdt.AnyURI `xml:"Algorithm,attr,omitempty"`
}

// TCanonicalizationMethodType defines type CanonicalizationMethodType
type TCanonicalizationMethodType struct {
	XCdata
	XAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TCanonicalizationMethodType function is not nil (ie. was set by outside code), calls it with this TCanonicalizationMethodType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TCanonicalizationMethodType instance.
func (me *TCanonicalizationMethodType) Walk() (err error) {
	if fn := WalkHandlers.TCanonicalizationMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCanonicalizationMethod defines element CanonicalizationMethod
type XElemCanonicalizationMethod struct {
	CanonicalizationMethod *TCanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
}

// Walk : if the WalkHandlers.XElemCanonicalizationMethod function is not nil (ie. was set by outside code), calls it with this XElemCanonicalizationMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemCanonicalizationMethod instance.
func (me *XElemCanonicalizationMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemCanonicalizationMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CanonicalizationMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// THMACOutputLengthType defines type HMACOutputLengthType
type THMACOutputLengthType xsdt.Integer

// ToXsdtInteger : This convenience method just performs a simple type conversion to THMACOutputLengthType's alias type xsdt.Integer.
func (me THMACOutputLengthType) ToXsdtInteger() xsdt.Integer { return xsdt.Integer(me) }

// Set : Since THMACOutputLengthType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *THMACOutputLengthType) Set(s string) { (*xsdt.Integer)(me).Set(s) }

// String : Returns a string representation of this THMACOutputLengthType's current non-string scalar value.
func (me THMACOutputLengthType) String() string { return xsdt.Integer(me).String() }

// XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType defines element HMACOutputLength
type XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType struct {
	HMACOutputLength *THMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength"`
}

// Walk : if the WalkHandlers.XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType function is not nil (ie. was set by outside code), calls it with this XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance.
func (me *XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType) Walk() (err error) {
	if fn := WalkHandlers.XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignatureMethodType defines type SignatureMethodType
type TSignatureMethodType struct {
	XAttrAlgorithmXsdtAnyURI
	XCdata
	XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType
}

// Walk : if the WalkHandlers.TSignatureMethodType function is not nil (ie. was set by outside code), calls it with this TSignatureMethodType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TSignatureMethodType instance.
func (me *TSignatureMethodType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSignatureMethod defines element SignatureMethod
type XElemSignatureMethod struct {
	SignatureMethod *TSignatureMethodType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
}

// Walk : if the WalkHandlers.XElemSignatureMethod function is not nil (ie. was set by outside code), calls it with this XElemSignatureMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSignatureMethod instance.
func (me *XElemSignatureMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemSignatureMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrURIXsdtAnyURI defines attribute Uri
type XAttrURIXsdtAnyURI struct {
	URI xsdt.AnyURI `xml:"URI,attr,omitempty"`
}

// XAttrTypeXsdtAnyURI defines attribute Type
type XAttrTypeXsdtAnyURI struct {
	Type xsdt.AnyURI `xml:"Type,attr,omitempty"`
}

// XElemsXPathchoiceTransformTypeschemaXPathXsdtString defines element XPath
type XElemsXPathchoiceTransformTypeschemaXPathXsdtString struct {
	XPaths []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# XPath"`
}

// Walk : if the WalkHandlers.XElemsXPathchoiceTransformTypeschemaXPathXsdtString function is not nil (ie. was set by outside code), calls it with this XElemsXPathchoiceTransformTypeschemaXPathXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsXPathchoiceTransformTypeschemaXPathXsdtString instance.
func (me *XElemsXPathchoiceTransformTypeschemaXPathXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemsXPathchoiceTransformTypeschemaXPathXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TransformType defines type ransformType
type TransformType struct {
	XCdata
	XElemsXPathchoiceTransformTypeschemaXPathXsdtString
	XAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TransformType function is not nil (ie. was set by outside code), calls it with this TransformType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TransformType instance.
func (me *TransformType) Walk() (err error) {
	if fn := WalkHandlers.TransformType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsXPathchoiceTransformTypeschemaXPathXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTransform defines element Transform
type XElemsTransform struct {
	Transforms []*TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

// Walk : if the WalkHandlers.XElemsTransform function is not nil (ie. was set by outside code), calls it with this XElemsTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTransform instance.
func (me *XElemsTransform) Walk() (err error) {
	if fn := WalkHandlers.XElemsTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TransformsType defines type ransformsType
type TransformsType struct {
	XElemsTransform
}

// Walk : if the WalkHandlers.TransformsType function is not nil (ie. was set by outside code), calls it with this TransformsType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TransformsType instance.
func (me *TransformsType) Walk() (err error) {
	if fn := WalkHandlers.TransformsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsTransform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTransforms defines element Transforms
type XElemTransforms struct {
	Transforms *TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms"`
}

// Walk : if the WalkHandlers.XElemTransforms function is not nil (ie. was set by outside code), calls it with this XElemTransforms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTransforms instance.
func (me *XElemTransforms) Walk() (err error) {
	if fn := WalkHandlers.XElemTransforms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDigestMethodType defines type DigestMethodType
type TDigestMethodType struct {
	XCdata
	XAttrAlgorithmXsdtAnyURI
}

// Walk : if the WalkHandlers.TDigestMethodType function is not nil (ie. was set by outside code), calls it with this TDigestMethodType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TDigestMethodType instance.
func (me *TDigestMethodType) Walk() (err error) {
	if fn := WalkHandlers.TDigestMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDigestMethod defines element DigestMethod
type XElemDigestMethod struct {
	DigestMethod *TDigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
}

// Walk : if the WalkHandlers.XElemDigestMethod function is not nil (ie. was set by outside code), calls it with this XElemDigestMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDigestMethod instance.
func (me *XElemDigestMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemDigestMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDigestValueType defines type DigestValueType
type TDigestValueType xsdt.Base64Binary

// Set : Since TDigestValueType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDigestValueType) Set(s string) { (*xsdt.Base64Binary)(me).Set(s) }

// String : Since TDigestValueType is just a simple String type, this merely returns the current string value.
func (me TDigestValueType) String() string { return xsdt.Base64Binary(me).String() }

// ToXsdtBase64Binary : This convenience method just performs a simple type conversion to TDigestValueType's alias type xsdt.Base64Binary.
func (me TDigestValueType) ToXsdtBase64Binary() xsdt.Base64Binary { return xsdt.Base64Binary(me) }

// XElemDigestValue defines element DigestValue
type XElemDigestValue struct {
	DigestValue TDigestValueType `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

// Walk : if the WalkHandlers.XElemDigestValue function is not nil (ie. was set by outside code), calls it with this XElemDigestValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemDigestValue instance.
func (me *XElemDigestValue) Walk() (err error) {
	if fn := WalkHandlers.XElemDigestValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TReferenceType defines type ReferenceType
type TReferenceType struct {
	XElemTransforms
	XElemDigestMethod
	XElemDigestValue
	XAttrIDXsdtID
	XAttrURIXsdtAnyURI
	XAttrTypeXsdtAnyURI
}

// Walk : if the WalkHandlers.TReferenceType function is not nil (ie. was set by outside code), calls it with this TReferenceType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TReferenceType instance.
func (me *TReferenceType) Walk() (err error) {
	if fn := WalkHandlers.TReferenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemTransforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemDigestMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemDigestValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsReference defines element Reference
type XElemsReference struct {
	References []*TReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// Walk : if the WalkHandlers.XElemsReference function is not nil (ie. was set by outside code), calls it with this XElemsReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsReference instance.
func (me *XElemsReference) Walk() (err error) {
	if fn := WalkHandlers.XElemsReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignedInfoType defines type SignedInfoType
type TSignedInfoType struct {
	XElemCanonicalizationMethod
	XElemSignatureMethod
	XElemsReference
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignedInfoType function is not nil (ie. was set by outside code), calls it with this TSignedInfoType instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TSignedInfoType instance.
func (me *TSignedInfoType) Walk() (err error) {
	if fn := WalkHandlers.TSignedInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemSignatureMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemCanonicalizationMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSignedInfo defines element SignedInfo
type XElemSignedInfo struct {
	SignedInfo *TSignedInfoType `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
}

// Walk : if the WalkHandlers.XElemSignedInfo function is not nil (ie. was set by outside code), calls it with this XElemSignedInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSignedInfo instance.
func (me *XElemSignedInfo) Walk() (err error) {
	if fn := WalkHandlers.XElemSignedInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignedInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XBase64BinaryCdata defines XBase64BinaryCdata
type XBase64BinaryCdata struct {
	XCDATA xsdt.Base64Binary `xml:",chardata"`
}

// TSignatureValueType defines type SignatureValueType
type TSignatureValueType struct {
	XBase64BinaryCdata
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignatureValueType function is not nil (ie. was set by outside code), calls it with this TSignatureValueType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSignatureValueType instance.
func (me *TSignatureValueType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSignatureValue defines element SignatureValue
type XElemSignatureValue struct {
	SignatureValue *TSignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
}

// Walk : if the WalkHandlers.XElemSignatureValue function is not nil (ie. was set by outside code), calls it with this XElemSignatureValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSignatureValue instance.
func (me *XElemSignatureValue) Walk() (err error) {
	if fn := WalkHandlers.XElemSignatureValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKeyName defines element KeyName
type XElemsKeyName struct {
	KeyNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# KeyName"`
}

// Walk : if the WalkHandlers.XElemsKeyName function is not nil (ie. was set by outside code), calls it with this XElemsKeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKeyName instance.
func (me *XElemsKeyName) Walk() (err error) {
	if fn := WalkHandlers.XElemsKeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TRetrievalMethodType defines type RetrievalMethodType
type TRetrievalMethodType struct {
	XElemTransforms
	XAttrURIXsdtAnyURI
	XAttrTypeXsdtAnyURI
}

// Walk : if the WalkHandlers.TRetrievalMethodType function is not nil (ie. was set by outside code), calls it with this TRetrievalMethodType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TRetrievalMethodType instance.
func (me *TRetrievalMethodType) Walk() (err error) {
	if fn := WalkHandlers.TRetrievalMethodType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemTransforms.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRetrievalMethod defines element RetrievalMethod
type XElemsRetrievalMethod struct {
	RetrievalMethods []*TRetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod"`
}

// Walk : if the WalkHandlers.XElemsRetrievalMethod function is not nil (ie. was set by outside code), calls it with this XElemsRetrievalMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRetrievalMethod instance.
func (me *XElemsRetrievalMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemsRetrievalMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RetrievalMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary defines element PGPKeyID
type XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary struct {
	PGPKeyID xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID"`
}

// Walk : if the WalkHandlers.XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance.
func (me *XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary defines element PGPKeyPacket
type XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary struct {
	PGPKeyPacket xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket"`
}

// Walk : if the WalkHandlers.XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance.
func (me *XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPGPDataType defines type PGPDataType
type TPGPDataType struct {
	XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary
	XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary
}

// Walk : if the WalkHandlers.TPGPDataType function is not nil (ie. was set by outside code), calls it with this TPGPDataType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TPGPDataType instance.
func (me *TPGPDataType) Walk() (err error) {
	if fn := WalkHandlers.TPGPDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPGPData defines element PGPData
type XElemsPGPData struct {
	PGPDatas []*TPGPDataType `xml:"http://www.w3.org/2000/09/xmldsig# PGPData"`
}

// Walk : if the WalkHandlers.XElemsPGPData function is not nil (ie. was set by outside code), calls it with this XElemsPGPData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPGPData instance.
func (me *XElemsPGPData) Walk() (err error) {
	if fn := WalkHandlers.XElemsPGPData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PGPDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary defines element SPKISexp
type XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary struct {
	SPKISexps []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

// Walk : if the WalkHandlers.XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance.
func (me *XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSPKIDataType defines type SPKIDataType
type TSPKIDataType struct {
	XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary
}

// Walk : if the WalkHandlers.TSPKIDataType function is not nil (ie. was set by outside code), calls it with this TSPKIDataType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TSPKIDataType instance.
func (me *TSPKIDataType) Walk() (err error) {
	if fn := WalkHandlers.TSPKIDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSPKIData defines element SPKIData
type XElemsSPKIData struct {
	SPKIDatas []*TSPKIDataType `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData"`
}

// Walk : if the WalkHandlers.XElemsSPKIData function is not nil (ie. was set by outside code), calls it with this XElemsSPKIData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSPKIData instance.
func (me *XElemsSPKIData) Walk() (err error) {
	if fn := WalkHandlers.XElemsSPKIData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SPKIDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TCryptoBinary defines type CryptoBinary
type TCryptoBinary xsdt.Base64Binary

// Set : Since TCryptoBinary is just a simple String type, this merely sets the current value from the specified string.
func (me *TCryptoBinary) Set(s string) { (*xsdt.Base64Binary)(me).Set(s) }

// String : Since TCryptoBinary is just a simple String type, this merely returns the current string value.
func (me TCryptoBinary) String() string { return xsdt.Base64Binary(me).String() }

// ToXsdtBase64Binary : This convenience method just performs a simple type conversion to TCryptoBinary's alias type xsdt.Base64Binary.
func (me TCryptoBinary) ToXsdtBase64Binary() xsdt.Base64Binary { return xsdt.Base64Binary(me) }

// XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary defines element G
type XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary struct {
	G TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G"`
}

// Walk : if the WalkHandlers.XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance.
func (me *XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary defines element Y
type XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary struct {
	Y TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
}

// Walk : if the WalkHandlers.XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance.
func (me *XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary defines element J
type XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary struct {
	J TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J"`
}

// Walk : if the WalkHandlers.XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance.
func (me *XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary defines element Psequence
type XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary struct {
	P TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# P"`
}

// Walk : if the WalkHandlers.XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance.
func (me *XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary defines element Qsequence
type XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary struct {
	Q TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Q"`
}

// Walk : if the WalkHandlers.XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance.
func (me *XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary defines element Seedsequence
type XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary struct {
	Seed TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Seed"`
}

// Walk : if the WalkHandlers.XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance.
func (me *XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary defines element PgenCountersequence
type XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary struct {
	PgenCounter TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# PgenCounter"`
}

// Walk : if the WalkHandlers.XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance.
func (me *XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TDSAKeyValueType defines type DSAKeyValueType
type TDSAKeyValueType struct {
	XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary
	XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary
	XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary
	XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary
	XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary
	XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary
	XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary
}

// Walk : if the WalkHandlers.TDSAKeyValueType function is not nil (ie. was set by outside code), calls it with this TDSAKeyValueType instance as the single argument. Then calls the Walk() method on 7/7 embed(s) and 0/0 field(s) belonging to this TDSAKeyValueType instance.
func (me *TDSAKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TDSAKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDSAKeyValue defines element DSAKeyValue
type XElemDSAKeyValue struct {
	DSAKeyValue *TDSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue"`
}

// Walk : if the WalkHandlers.XElemDSAKeyValue function is not nil (ie. was set by outside code), calls it with this XElemDSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDSAKeyValue instance.
func (me *XElemDSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XElemDSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary defines element Modulus
type XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary struct {
	Modulus TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
}

// Walk : if the WalkHandlers.XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance.
func (me *XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary defines element Exponent
type XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary struct {
	Exponent TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

// Walk : if the WalkHandlers.XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance.
func (me *XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TRSAKeyValueType defines type RSAKeyValueType
type TRSAKeyValueType struct {
	XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary
	XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary
}

// Walk : if the WalkHandlers.TRSAKeyValueType function is not nil (ie. was set by outside code), calls it with this TRSAKeyValueType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TRSAKeyValueType instance.
func (me *TRSAKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TRSAKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRSAKeyValue defines element RSAKeyValue
type XElemRSAKeyValue struct {
	RSAKeyValue *TRSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue"`
}

// Walk : if the WalkHandlers.XElemRSAKeyValue function is not nil (ie. was set by outside code), calls it with this XElemRSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRSAKeyValue instance.
func (me *XElemRSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XElemRSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyValueType defines type KeyValueType
type TKeyValueType struct {
	XCdata
	XElemDSAKeyValue
	XElemRSAKeyValue
}

// Walk : if the WalkHandlers.TKeyValueType function is not nil (ie. was set by outside code), calls it with this TKeyValueType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TKeyValueType instance.
func (me *TKeyValueType) Walk() (err error) {
	if fn := WalkHandlers.TKeyValueType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemDSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemRSAKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKeyValue defines element KeyValue
type XElemsKeyValue struct {
	KeyValues []*TKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue"`
}

// Walk : if the WalkHandlers.XElemsKeyValue function is not nil (ie. was set by outside code), calls it with this XElemsKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKeyValue instance.
func (me *XElemsKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XElemsKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString defines element X509IssuerName
type XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString struct {
	X509IssuerName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
}

// Walk : if the WalkHandlers.XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString function is not nil (ie. was set by outside code), calls it with this XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance.
func (me *XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger defines element X509SerialNumber
type XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger struct {
	X509SerialNumber xsdt.Integer `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

// Walk : if the WalkHandlers.XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger function is not nil (ie. was set by outside code), calls it with this XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance.
func (me *XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger) Walk() (err error) {
	if fn := WalkHandlers.XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// Tx509IssuerSerialType defines type x509IssuerSerialType
type Tx509IssuerSerialType struct {
	XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString
	XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger
}

// Walk : if the WalkHandlers.Tx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this Tx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this Tx509IssuerSerialType instance.
func (me *Tx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.Tx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType defines element X509IssuerSerial
type XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType struct {
	X509IssuerSerial *Tx509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial"`
}

// Walk : if the WalkHandlers.XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance.
func (me *XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.X509IssuerSerial.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary defines element X509SKI
type XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary struct {
	X509Ski *xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI"`
}

// Walk : if the WalkHandlers.XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance.
func (me *XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString defines element X509SubjectName
type XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString struct {
	X509SubjectName *xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName"`
}

// Walk : if the WalkHandlers.XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString function is not nil (ie. was set by outside code), calls it with this XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance.
func (me *XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary defines element X509Certificate
type XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary struct {
	X509Certificate *xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate"`
}

// Walk : if the WalkHandlers.XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance.
func (me *XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary defines element X509CRL
type XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary struct {
	X509Crl *xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL"`
}

// Walk : if the WalkHandlers.XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance.
func (me *XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// Tx509DataType defines type x509DataType
type Tx509DataType struct {
	XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary
	XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType
	XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary
	XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString
	XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary
}

// Walk : if the WalkHandlers.Tx509DataType function is not nil (ie. was set by outside code), calls it with this Tx509DataType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this Tx509DataType instance.
func (me *Tx509DataType) Walk() (err error) {
	if fn := WalkHandlers.Tx509DataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509Data defines element X509Data
type XElemsX509Data struct {
	X509Datas []*Tx509DataType `xml:"http://www.w3.org/2000/09/xmldsig# X509Data"`
}

// Walk : if the WalkHandlers.XElemsX509Data function is not nil (ie. was set by outside code), calls it with this XElemsX509Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509Data instance.
func (me *XElemsX509Data) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.X509Datas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsMgmtData defines element MgmtData
type XElemsMgmtData struct {
	MgmtDatas []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData"`
}

// Walk : if the WalkHandlers.XElemsMgmtData function is not nil (ie. was set by outside code), calls it with this XElemsMgmtData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsMgmtData instance.
func (me *XElemsMgmtData) Walk() (err error) {
	if fn := WalkHandlers.XElemsMgmtData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyInfoType defines type KeyInfoType
type TKeyInfoType struct {
	XElemsMgmtData
	XAttrIDXsdtID
	XElemsKeyValue
	XElemsX509Data
	XElemsRetrievalMethod
	XElemsPGPData
	XElemsSPKIData
	XElemsKeyName
}

// Walk : if the WalkHandlers.TKeyInfoType function is not nil (ie. was set by outside code), calls it with this TKeyInfoType instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TKeyInfoType instance.
func (me *TKeyInfoType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsKeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsX509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsMgmtData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsKeyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKeyInfo defines element KeyInfo
type XElemKeyInfo struct {
	KeyInfo *TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

// Walk : if the WalkHandlers.XElemKeyInfo function is not nil (ie. was set by outside code), calls it with this XElemKeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemKeyInfo instance.
func (me *XElemKeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XElemKeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignatureType defines type SignatureType
type TSignatureType struct {
	XAttrIDXsdtID
	XElemSignedInfo
	XElemSignatureValue
	XElemKeyInfo
	XElemsObject
}

// Walk : if the WalkHandlers.TSignatureType function is not nil (ie. was set by outside code), calls it with this TSignatureType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TSignatureType instance.
func (me *TSignatureType) Walk() (err error) {
	if fn := WalkHandlers.TSignatureType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemSignedInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemSignatureValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemKeyInfo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsObject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSignature defines element Signature
type XElemsSignature struct {
	Signatures []*TSignatureType `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
}

// Walk : if the WalkHandlers.XElemsSignature function is not nil (ie. was set by outside code), calls it with this XElemsSignature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSignature instance.
func (me *XElemsSignature) Walk() (err error) {
	if fn := WalkHandlers.XElemsSignature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Signatures {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSignature defines element Signature
type XElemSignature struct {
	Signature *TSignatureType `xml:"http://www.w3.org/2000/09/xmldsig# Signature"`
}

// Walk : if the WalkHandlers.XElemSignature function is not nil (ie. was set by outside code), calls it with this XElemSignature instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSignature instance.
func (me *XElemSignature) Walk() (err error) {
	if fn := WalkHandlers.XElemSignature; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Signature.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSignatureValue defines element SignatureValue
type XElemsSignatureValue struct {
	SignatureValues []*TSignatureValueType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureValue"`
}

// Walk : if the WalkHandlers.XElemsSignatureValue function is not nil (ie. was set by outside code), calls it with this XElemsSignatureValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSignatureValue instance.
func (me *XElemsSignatureValue) Walk() (err error) {
	if fn := WalkHandlers.XElemsSignatureValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSignedInfo defines element SignedInfo
type XElemsSignedInfo struct {
	SignedInfos []*TSignedInfoType `xml:"http://www.w3.org/2000/09/xmldsig# SignedInfo"`
}

// Walk : if the WalkHandlers.XElemsSignedInfo function is not nil (ie. was set by outside code), calls it with this XElemsSignedInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSignedInfo instance.
func (me *XElemsSignedInfo) Walk() (err error) {
	if fn := WalkHandlers.XElemsSignedInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignedInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCanonicalizationMethod defines element CanonicalizationMethod
type XElemsCanonicalizationMethod struct {
	CanonicalizationMethods []*TCanonicalizationMethodType `xml:"http://www.w3.org/2000/09/xmldsig# CanonicalizationMethod"`
}

// Walk : if the WalkHandlers.XElemsCanonicalizationMethod function is not nil (ie. was set by outside code), calls it with this XElemsCanonicalizationMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCanonicalizationMethod instance.
func (me *XElemsCanonicalizationMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemsCanonicalizationMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CanonicalizationMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSignatureMethod defines element SignatureMethod
type XElemsSignatureMethod struct {
	SignatureMethods []*TSignatureMethodType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureMethod"`
}

// Walk : if the WalkHandlers.XElemsSignatureMethod function is not nil (ie. was set by outside code), calls it with this XElemsSignatureMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSignatureMethod instance.
func (me *XElemsSignatureMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemsSignatureMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemReference defines element Reference
type XElemReference struct {
	Reference *TReferenceType `xml:"http://www.w3.org/2000/09/xmldsig# Reference"`
}

// Walk : if the WalkHandlers.XElemReference function is not nil (ie. was set by outside code), calls it with this XElemReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemReference instance.
func (me *XElemReference) Walk() (err error) {
	if fn := WalkHandlers.XElemReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTransforms defines element Transforms
type XElemsTransforms struct {
	Transformses []*TransformsType `xml:"http://www.w3.org/2000/09/xmldsig# Transforms"`
}

// Walk : if the WalkHandlers.XElemsTransforms function is not nil (ie. was set by outside code), calls it with this XElemsTransforms instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTransforms instance.
func (me *XElemsTransforms) Walk() (err error) {
	if fn := WalkHandlers.XElemsTransforms; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Transformses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTransform defines element Transform
type XElemTransform struct {
	Transform *TransformType `xml:"http://www.w3.org/2000/09/xmldsig# Transform"`
}

// Walk : if the WalkHandlers.XElemTransform function is not nil (ie. was set by outside code), calls it with this XElemTransform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTransform instance.
func (me *XElemTransform) Walk() (err error) {
	if fn := WalkHandlers.XElemTransform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Transform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDigestMethod defines element DigestMethod
type XElemsDigestMethod struct {
	DigestMethods []*TDigestMethodType `xml:"http://www.w3.org/2000/09/xmldsig# DigestMethod"`
}

// Walk : if the WalkHandlers.XElemsDigestMethod function is not nil (ie. was set by outside code), calls it with this XElemsDigestMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDigestMethod instance.
func (me *XElemsDigestMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemsDigestMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DigestMethods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDigestValue defines element DigestValue
type XElemsDigestValue struct {
	DigestValues []TDigestValueType `xml:"http://www.w3.org/2000/09/xmldsig# DigestValue"`
}

// Walk : if the WalkHandlers.XElemsDigestValue function is not nil (ie. was set by outside code), calls it with this XElemsDigestValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDigestValue instance.
func (me *XElemsDigestValue) Walk() (err error) {
	if fn := WalkHandlers.XElemsDigestValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKeyInfo defines element KeyInfo
type XElemsKeyInfo struct {
	KeyInfos []*TKeyInfoType `xml:"http://www.w3.org/2000/09/xmldsig# KeyInfo"`
}

// Walk : if the WalkHandlers.XElemsKeyInfo function is not nil (ie. was set by outside code), calls it with this XElemsKeyInfo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKeyInfo instance.
func (me *XElemsKeyInfo) Walk() (err error) {
	if fn := WalkHandlers.XElemsKeyInfo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyInfos {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKeyName defines element KeyName
type XElemKeyName struct {
	KeyName xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# KeyName"`
}

// Walk : if the WalkHandlers.XElemKeyName function is not nil (ie. was set by outside code), calls it with this XElemKeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemKeyName instance.
func (me *XElemKeyName) Walk() (err error) {
	if fn := WalkHandlers.XElemKeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemMgmtData defines element MgmtData
type XElemMgmtData struct {
	MgmtData xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# MgmtData"`
}

// Walk : if the WalkHandlers.XElemMgmtData function is not nil (ie. was set by outside code), calls it with this XElemMgmtData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemMgmtData instance.
func (me *XElemMgmtData) Walk() (err error) {
	if fn := WalkHandlers.XElemMgmtData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKeyValue defines element KeyValue
type XElemKeyValue struct {
	KeyValue *TKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# KeyValue"`
}

// Walk : if the WalkHandlers.XElemKeyValue function is not nil (ie. was set by outside code), calls it with this XElemKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemKeyValue instance.
func (me *XElemKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XElemKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRetrievalMethod defines element RetrievalMethod
type XElemRetrievalMethod struct {
	RetrievalMethod *TRetrievalMethodType `xml:"http://www.w3.org/2000/09/xmldsig# RetrievalMethod"`
}

// Walk : if the WalkHandlers.XElemRetrievalMethod function is not nil (ie. was set by outside code), calls it with this XElemRetrievalMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRetrievalMethod instance.
func (me *XElemRetrievalMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemRetrievalMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RetrievalMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemX509Data defines element X509Data
type XElemX509Data struct {
	X509Data *Tx509DataType `xml:"http://www.w3.org/2000/09/xmldsig# X509Data"`
}

// Walk : if the WalkHandlers.XElemX509Data function is not nil (ie. was set by outside code), calls it with this XElemX509Data instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemX509Data instance.
func (me *XElemX509Data) Walk() (err error) {
	if fn := WalkHandlers.XElemX509Data; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.X509Data.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPGPData defines element PGPData
type XElemPGPData struct {
	PGPData *TPGPDataType `xml:"http://www.w3.org/2000/09/xmldsig# PGPData"`
}

// Walk : if the WalkHandlers.XElemPGPData function is not nil (ie. was set by outside code), calls it with this XElemPGPData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemPGPData instance.
func (me *XElemPGPData) Walk() (err error) {
	if fn := WalkHandlers.XElemPGPData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PGPData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSPKIData defines element SPKIData
type XElemSPKIData struct {
	SPKIData *TSPKIDataType `xml:"http://www.w3.org/2000/09/xmldsig# SPKIData"`
}

// Walk : if the WalkHandlers.XElemSPKIData function is not nil (ie. was set by outside code), calls it with this XElemSPKIData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSPKIData instance.
func (me *XElemSPKIData) Walk() (err error) {
	if fn := WalkHandlers.XElemSPKIData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SPKIData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemObject defines element Object
type XElemObject struct {
	Object *TObjectType `xml:"http://www.w3.org/2000/09/xmldsig# Object"`
}

// Walk : if the WalkHandlers.XElemObject function is not nil (ie. was set by outside code), calls it with this XElemObject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemObject instance.
func (me *XElemObject) Walk() (err error) {
	if fn := WalkHandlers.XElemObject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Object.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TManifestType defines type ManifestType
type TManifestType struct {
	XElemsReference
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TManifestType function is not nil (ie. was set by outside code), calls it with this TManifestType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TManifestType instance.
func (me *TManifestType) Walk() (err error) {
	if fn := WalkHandlers.TManifestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemManifest defines element Manifest
type XElemManifest struct {
	Manifest *TManifestType `xml:"http://www.w3.org/2000/09/xmldsig# Manifest"`
}

// Walk : if the WalkHandlers.XElemManifest function is not nil (ie. was set by outside code), calls it with this XElemManifest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemManifest instance.
func (me *XElemManifest) Walk() (err error) {
	if fn := WalkHandlers.XElemManifest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Manifest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsManifest defines element Manifest
type XElemsManifest struct {
	Manifests []*TManifestType `xml:"http://www.w3.org/2000/09/xmldsig# Manifest"`
}

// Walk : if the WalkHandlers.XElemsManifest function is not nil (ie. was set by outside code), calls it with this XElemsManifest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsManifest instance.
func (me *XElemsManifest) Walk() (err error) {
	if fn := WalkHandlers.XElemsManifest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Manifests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrTargetXsdtAnyURI defines attribute Target
type XAttrTargetXsdtAnyURI struct {
	Target xsdt.AnyURI `xml:"Target,attr,omitempty"`
}

// TSignaturePropertyType defines type SignaturePropertyType
type TSignaturePropertyType struct {
	XCdata
	XAttrTargetXsdtAnyURI
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignaturePropertyType function is not nil (ie. was set by outside code), calls it with this TSignaturePropertyType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TSignaturePropertyType instance.
func (me *TSignaturePropertyType) Walk() (err error) {
	if fn := WalkHandlers.TSignaturePropertyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSignatureProperty defines element SignatureProperty
type XElemsSignatureProperty struct {
	SignatureProperties []*TSignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

// Walk : if the WalkHandlers.XElemsSignatureProperty function is not nil (ie. was set by outside code), calls it with this XElemsSignatureProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSignatureProperty instance.
func (me *XElemsSignatureProperty) Walk() (err error) {
	if fn := WalkHandlers.XElemsSignatureProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureProperties {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSignaturePropertiesType defines type SignaturePropertiesType
type TSignaturePropertiesType struct {
	XElemsSignatureProperty
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TSignaturePropertiesType function is not nil (ie. was set by outside code), calls it with this TSignaturePropertiesType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSignaturePropertiesType instance.
func (me *TSignaturePropertiesType) Walk() (err error) {
	if fn := WalkHandlers.TSignaturePropertiesType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSignatureProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSignatureProperties defines element SignatureProperties
type XElemSignatureProperties struct {
	SignatureProperties *TSignaturePropertiesType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperties"`
}

// Walk : if the WalkHandlers.XElemSignatureProperties function is not nil (ie. was set by outside code), calls it with this XElemSignatureProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSignatureProperties instance.
func (me *XElemSignatureProperties) Walk() (err error) {
	if fn := WalkHandlers.XElemSignatureProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSignatureProperties defines element SignatureProperties
type XElemsSignatureProperties struct {
	SignaturePropertieses []*TSignaturePropertiesType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperties"`
}

// Walk : if the WalkHandlers.XElemsSignatureProperties function is not nil (ie. was set by outside code), calls it with this XElemsSignatureProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSignatureProperties instance.
func (me *XElemsSignatureProperties) Walk() (err error) {
	if fn := WalkHandlers.XElemsSignatureProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignaturePropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSignatureProperty defines element SignatureProperty
type XElemSignatureProperty struct {
	SignatureProperty *TSignaturePropertyType `xml:"http://www.w3.org/2000/09/xmldsig# SignatureProperty"`
}

// Walk : if the WalkHandlers.XElemSignatureProperty function is not nil (ie. was set by outside code), calls it with this XElemSignatureProperty instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSignatureProperty instance.
func (me *XElemSignatureProperty) Walk() (err error) {
	if fn := WalkHandlers.XElemSignatureProperty; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureProperty.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDSAKeyValue defines element DSAKeyValue
type XElemsDSAKeyValue struct {
	DSAKeyValues []*TDSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# DSAKeyValue"`
}

// Walk : if the WalkHandlers.XElemsDSAKeyValue function is not nil (ie. was set by outside code), calls it with this XElemsDSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDSAKeyValue instance.
func (me *XElemsDSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XElemsDSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DSAKeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRSAKeyValue defines element RSAKeyValue
type XElemsRSAKeyValue struct {
	RSAKeyValues []*TRSAKeyValueType `xml:"http://www.w3.org/2000/09/xmldsig# RSAKeyValue"`
}

// Walk : if the WalkHandlers.XElemsRSAKeyValue function is not nil (ie. was set by outside code), calls it with this XElemsRSAKeyValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRSAKeyValue instance.
func (me *XElemsRSAKeyValue) Walk() (err error) {
	if fn := WalkHandlers.XElemsRSAKeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RSAKeyValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString defines element X509SubjectName
type XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString struct {
	X509SubjectNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509SubjectName"`
}

// Walk : if the WalkHandlers.XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString function is not nil (ie. was set by outside code), calls it with this XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString instance.
func (me *XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary defines element Y
type XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary struct {
	Ys []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Y"`
}

// Walk : if the WalkHandlers.XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary instance.
func (me *XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary defines element Modulus
type XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary struct {
	Moduluses []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Modulus"`
}

// Walk : if the WalkHandlers.XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary instance.
func (me *XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary defines element SPKISexp
type XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary struct {
	SPKISexp xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# SPKISexp"`
}

// Walk : if the WalkHandlers.XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary instance.
func (me *XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary defines element Qsequence
type XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary struct {
	Qs []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Q"`
}

// Walk : if the WalkHandlers.XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary instance.
func (me *XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary defines element X509CRL
type XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary struct {
	X509Crls []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509CRL"`
}

// Walk : if the WalkHandlers.XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary instance.
func (me *XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary defines element PgenCountersequence
type XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary struct {
	PgenCounters []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# PgenCounter"`
}

// Walk : if the WalkHandlers.XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary instance.
func (me *XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary defines element PGPKeyPacket
type XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary struct {
	PGPKeyPackets []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyPacket"`
}

// Walk : if the WalkHandlers.XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary instance.
func (me *XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary defines element J
type XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary struct {
	Js []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# J"`
}

// Walk : if the WalkHandlers.XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary instance.
func (me *XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType defines element X509IssuerSerial
type XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType struct {
	X509IssuerSerials []*Tx509IssuerSerialType `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerSerial"`
}

// Walk : if the WalkHandlers.XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType function is not nil (ie. was set by outside code), calls it with this XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType instance.
func (me *XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.X509IssuerSerials {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary defines element Seedsequence
type XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary struct {
	Seeds []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Seed"`
}

// Walk : if the WalkHandlers.XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary instance.
func (me *XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary defines element PGPKeyID
type XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary struct {
	PGPKeyIDs []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# PGPKeyID"`
}

// Walk : if the WalkHandlers.XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary instance.
func (me *XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary defines element Exponent
type XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary struct {
	Exponents []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# Exponent"`
}

// Walk : if the WalkHandlers.XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary instance.
func (me *XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary defines element X509Certificate
type XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary struct {
	X509Certificates []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509Certificate"`
}

// Walk : if the WalkHandlers.XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary instance.
func (me *XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString defines element X509IssuerName
type XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString struct {
	X509IssuerNames []xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# X509IssuerName"`
}

// Walk : if the WalkHandlers.XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString function is not nil (ie. was set by outside code), calls it with this XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString instance.
func (me *XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary defines element Psequence
type XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary struct {
	Ps []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# P"`
}

// Walk : if the WalkHandlers.XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary instance.
func (me *XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary defines element X509SKI
type XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary struct {
	X509Skis []xsdt.Base64Binary `xml:"http://www.w3.org/2000/09/xmldsig# X509SKI"`
}

// Walk : if the WalkHandlers.XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary function is not nil (ie. was set by outside code), calls it with this XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary instance.
func (me *XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary defines element G
type XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary struct {
	Gs []TCryptoBinary `xml:"http://www.w3.org/2000/09/xmldsig# G"`
}

// Walk : if the WalkHandlers.XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary function is not nil (ie. was set by outside code), calls it with this XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary instance.
func (me *XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary) Walk() (err error) {
	if fn := WalkHandlers.XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType defines element HMACOutputLength
type XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType struct {
	HMACOutputLengths []THMACOutputLengthType `xml:"http://www.w3.org/2000/09/xmldsig# HMACOutputLength"`
}

// Walk : if the WalkHandlers.XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType function is not nil (ie. was set by outside code), calls it with this XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType instance.
func (me *XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType) Walk() (err error) {
	if fn := WalkHandlers.XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger defines element X509SerialNumber
type XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger struct {
	X509SerialNumbers []xsdt.Integer `xml:"http://www.w3.org/2000/09/xmldsig# X509SerialNumber"`
}

// Walk : if the WalkHandlers.XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger function is not nil (ie. was set by outside code), calls it with this XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger instance.
func (me *XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger) Walk() (err error) {
	if fn := WalkHandlers.XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemXPathchoiceTransformTypeschemaXPathXsdtString defines element XPath
type XElemXPathchoiceTransformTypeschemaXPathXsdtString struct {
	XPath xsdt.String `xml:"http://www.w3.org/2000/09/xmldsig# XPath"`
}

// Walk : if the WalkHandlers.XElemXPathchoiceTransformTypeschemaXPathXsdtString function is not nil (ie. was set by outside code), calls it with this XElemXPathchoiceTransformTypeschemaXPathXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemXPathchoiceTransformTypeschemaXPathXsdtString instance.
func (me *XElemXPathchoiceTransformTypeschemaXPathXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemXPathchoiceTransformTypeschemaXPathXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 113 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	TKeyValueType                                                                                func(*TKeyValueType, bool) error
	XElemRetrievalMethod                                                                         func(*XElemRetrievalMethod, bool) error
	XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary                                   func(*XElemsQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary, bool) error
	XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary               func(*XElemsPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary, bool) error
	XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType func(*XElemsHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType, bool) error
	XElemsRetrievalMethod                                                                        func(*XElemsRetrievalMethod, bool) error
	XElemPGPData                                                                                 func(*XElemPGPData, bool) error
	XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary                             func(*XElemsSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary, bool) error
	XElemKeyValue                                                                                func(*XElemKeyValue, bool) error
	XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType  func(*XElemHMACOutputLengthsequenceSignatureMethodTypeschemaHMACOutputLengthTHMACOutputLengthType, bool) error
	XElemTransforms                                                                              func(*XElemTransforms, bool) error
	XElemDigestValue                                                                             func(*XElemDigestValue, bool) error
	XElemSignedInfo                                                                              func(*XElemSignedInfo, bool) error
	XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary                             func(*XElemsSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary, bool) error
	XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString                func(*XElemX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString, bool) error
	XElemXPathchoiceTransformTypeschemaXPathXsdtString                                           func(*XElemXPathchoiceTransformTypeschemaXPathXsdtString, bool) error
	XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString               func(*XElemsX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString, bool) error
	XElemsCanonicalizationMethod                                                                 func(*XElemsCanonicalizationMethod, bool) error
	XElemCanonicalizationMethod                                                                  func(*XElemCanonicalizationMethod, bool) error
	TDigestMethodType                                                                            func(*TDigestMethodType, bool) error
	XElemSignatureValue                                                                          func(*XElemSignatureValue, bool) error
	Tx509IssuerSerialType                                                                        func(*Tx509IssuerSerialType, bool) error
	TSignaturePropertyType                                                                       func(*TSignaturePropertyType, bool) error
	XElemsRSAKeyValue                                                                            func(*XElemsRSAKeyValue, bool) error
	XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary                                            func(*XElemGsequenceDSAKeyValueTypeschemaGTCryptoBinary, bool) error
	Tx509DataType                                                                                func(*Tx509DataType, bool) error
	XElemsMgmtData                                                                               func(*XElemsMgmtData, bool) error
	XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary                                           func(*XElemsJsequenceDSAKeyValueTypeschemaJTCryptoBinary, bool) error
	TDSAKeyValueType                                                                             func(*TDSAKeyValueType, bool) error
	XElemsKeyValue                                                                               func(*XElemsKeyValue, bool) error
	XElemTransform                                                                               func(*XElemTransform, bool) error
	TSignaturePropertiesType                                                                     func(*TSignaturePropertiesType, bool) error
	XElemsXPathchoiceTransformTypeschemaXPathXsdtString                                          func(*XElemsXPathchoiceTransformTypeschemaXPathXsdtString, bool) error
	XElemDigestMethod                                                                            func(*XElemDigestMethod, bool) error
	XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary                              func(*XElemSeedsequencesequenceDSAKeyValueTypeschemaSeedTCryptoBinary, bool) error
	XElemsSignatureMethod                                                                        func(*XElemsSignatureMethod, bool) error
	XElemManifest                                                                                func(*XElemManifest, bool) error
	TObjectType                                                                                  func(*TObjectType, bool) error
	XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary                 func(*XElemPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary, bool) error
	XElemsX509Data                                                                               func(*XElemsX509Data, bool) error
	XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary                              func(*XElemSPKISexpsequenceSPKIDataTypeschemaSPKISexpXsdtBase64Binary, bool) error
	XElemsObject                                                                                 func(*XElemsObject, bool) error
	XElemRSAKeyValue                                                                             func(*XElemRSAKeyValue, bool) error
	XElemSignatureProperties                                                                     func(*XElemSignatureProperties, bool) error
	XElemsDSAKeyValue                                                                            func(*XElemsDSAKeyValue, bool) error
	XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString               func(*XElemsX509SubjectNamechoicesequenceX509DataTypeschemaX509SubjectNameXsdtString, bool) error
	TSignatureValueType                                                                          func(*TSignatureValueType, bool) error
	TPGPDataType                                                                                 func(*TPGPDataType, bool) error
	XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary                func(*XElemsPGPKeyPacketsequencechoicePGPDataTypeschemaPGPKeyPacketXsdtBase64Binary, bool) error
	XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType  func(*XElemsX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType, bool) error
	XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary          func(*XElemX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary, bool) error
	TransformsType                                                                               func(*TransformsType, bool) error
	XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary                         func(*XElemPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary, bool) error
	XElemsPGPData                                                                                func(*XElemsPGPData, bool) error
	XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary                                    func(*XElemPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary, bool) error
	XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString                func(*XElemX509IssuerNamesequenceX509IssuerSerialTypeschemaX509IssuerNameXsdtString, bool) error
	XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger           func(*XElemX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger, bool) error
	XElemKeyInfo                                                                                 func(*XElemKeyInfo, bool) error
	TManifestType                                                                                func(*TManifestType, bool) error
	XElemsDigestMethod                                                                           func(*XElemsDigestMethod, bool) error
	XElemKeyName                                                                                 func(*XElemKeyName, bool) error
	XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary                                            func(*XElemJsequenceDSAKeyValueTypeschemaJTCryptoBinary, bool) error
	TKeyInfoType                                                                                 func(*TKeyInfoType, bool) error
	XElemsSignature                                                                              func(*XElemsSignature, bool) error
	XElemsSignatureValue                                                                         func(*XElemsSignatureValue, bool) error
	XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary                                           func(*XElemsYsequenceDSAKeyValueTypeschemaYTCryptoBinary, bool) error
	XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary                             func(*XElemsExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary, bool) error
	XElemsTransform                                                                              func(*XElemsTransform, bool) error
	XElemsReference                                                                              func(*XElemsReference, bool) error
	XElemSPKIData                                                                                func(*XElemSPKIData, bool) error
	XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary                         func(*XElemsX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary, bool) error
	XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary                        func(*XElemsPGPKeyIDsequencechoicePGPDataTypeschemaPGPKeyIDXsdtBase64Binary, bool) error
	XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary                          func(*XElemX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary, bool) error
	XElemsTransforms                                                                             func(*XElemsTransforms, bool) error
	XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger          func(*XElemsX509SerialNumbersequenceX509IssuerSerialTypeschemaX509SerialNumberXsdtInteger, bool) error
	XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary                func(*XElemPgenCountersequencesequenceDSAKeyValueTypeschemaPgenCounterTCryptoBinary, bool) error
	TRSAKeyValueType                                                                             func(*TRSAKeyValueType, bool) error
	XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary                          func(*XElemX509CRLchoicesequenceX509DataTypeschemaX509CrlXsdtBase64Binary, bool) error
	XElemX509Data                                                                                func(*XElemX509Data, bool) error
	XElemsManifest                                                                               func(*XElemsManifest, bool) error
	XElemsSignatureProperties                                                                    func(*XElemsSignatureProperties, bool) error
	XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary                                            func(*XElemYsequenceDSAKeyValueTypeschemaYTCryptoBinary, bool) error
	XElemsSignedInfo                                                                             func(*XElemsSignedInfo, bool) error
	XElemSignatureProperty                                                                       func(*XElemSignatureProperty, bool) error
	XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary         func(*XElemsX509CertificatechoicesequenceX509DataTypeschemaX509CertificateXsdtBase64Binary, bool) error
	XElemSignatureMethod                                                                         func(*XElemSignatureMethod, bool) error
	XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary                                func(*XElemModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary, bool) error
	XCdata                                                                                       func(*XCdata, bool) error
	XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary                                    func(*XElemQsequencesequenceDSAKeyValueTypeschemaQTCryptoBinary, bool) error
	XElemMgmtData                                                                                func(*XElemMgmtData, bool) error
	XElemObject                                                                                  func(*XElemObject, bool) error
	TSignatureMethodType                                                                         func(*TSignatureMethodType, bool) error
	TRetrievalMethodType                                                                         func(*TRetrievalMethodType, bool) error
	XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary                                   func(*XElemsPsequencesequenceDSAKeyValueTypeschemaPTCryptoBinary, bool) error
	XElemsKeyName                                                                                func(*XElemsKeyName, bool) error
	XElemsSPKIData                                                                               func(*XElemsSPKIData, bool) error
	XElemDSAKeyValue                                                                             func(*XElemDSAKeyValue, bool) error
	XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary                         func(*XElemsX509SKIchoicesequenceX509DataTypeschemaX509SkiXsdtBase64Binary, bool) error
	TCanonicalizationMethodType                                                                  func(*TCanonicalizationMethodType, bool) error
	TReferenceType                                                                               func(*TReferenceType, bool) error
	XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary                              func(*XElemExponentsequenceRSAKeyValueTypeschemaExponentTCryptoBinary, bool) error
	XElemSignature                                                                               func(*XElemSignature, bool) error
	TransformType                                                                                func(*TransformType, bool) error
	TSignedInfoType                                                                              func(*TSignedInfoType, bool) error
	XElemReference                                                                               func(*XElemReference, bool) error
	XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType   func(*XElemX509IssuerSerialchoicesequenceX509DataTypeschemaX509IssuerSerialTx509IssuerSerialType, bool) error
	TSignatureType                                                                               func(*TSignatureType, bool) error
	XElemsDigestValue                                                                            func(*XElemsDigestValue, bool) error
	XElemsKeyInfo                                                                                func(*XElemsKeyInfo, bool) error
	XElemsSignatureProperty                                                                      func(*XElemsSignatureProperty, bool) error
	XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary                               func(*XElemsModulussequenceRSAKeyValueTypeschemaModulusTCryptoBinary, bool) error
	XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary                                           func(*XElemsGsequenceDSAKeyValueTypeschemaGTCryptoBinary, bool) error
	TSPKIDataType                                                                                func(*TSPKIDataType, bool) error
}
