// Package goEnvelope : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goEnvelope

import (
	xsdt "github.com/tecnickcom/go-xsd-pkg/xsdt"
)

// TxsdMustUnderstand defines type xsdMustUnderstand
type TxsdMustUnderstand xsdt.Boolean

// Set : Since TxsdMustUnderstand is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TxsdMustUnderstand) Set(s string) { (*xsdt.Boolean)(me).Set(s) }

// String : Returns a string representation of this TxsdMustUnderstand's current non-string scalar value.
func (me TxsdMustUnderstand) String() string { return xsdt.Boolean(me).String() }

// ToXsdtBoolean : This convenience method just performs a simple type conversion to TxsdMustUnderstand's alias type xsdt.Boolean.
func (me TxsdMustUnderstand) ToXsdtBoolean() xsdt.Boolean { return xsdt.Boolean(me) }

// XAttrMustUnderstand defines attribute MustUnderstand
type XAttrMustUnderstand struct {
	MustUnderstand TxsdMustUnderstand `xml:"mustUnderstand,attr,omitempty"`
}

// XAttrActor defines attribute Actor
type XAttrActor struct {
	Actor xsdt.AnyURI `xml:"actor,attr,omitempty"`
}

// TencodingStyle 'encodingStyle' indicates any canonicalization conventions followed in the contents of the containing element.  For example, the value 'http://schemas.xmlsoap.org/soap/encoding/' indicates the pattern described in SOAP specification
type TencodingStyle xsdt.String

// Set : Since TencodingStyle is just a simple String type, this merely sets the current value from the specified string.
func (me *TencodingStyle) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TencodingStyle is just a simple String type, this merely returns the current string value.
func (me TencodingStyle) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TencodingStyle's alias type xsdt.String.
func (me TencodingStyle) ToXsdtString() xsdt.String { return xsdt.String(me) }

// Values : TencodingStyle declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TencodingStyle) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

// XAttrEncodingStyle defines attribute EncodingStyle
type XAttrEncodingStyle struct {
	EncodingStyle TencodingStyle `xml:"encodingStyle,attr,omitempty"`
}

// XAttsEncodingStyle defines XAttsEncodingStyle
type XAttsEncodingStyle struct {
	XAttrEncodingStyle
}

// THeader defines type Header
type THeader struct {
}

// Walk : if the WalkHandlers.THeader function is not nil (ie. was set by outside code), calls it with this THeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this THeader instance.
func (me *THeader) Walk() (err error) {
	if fn := WalkHandlers.THeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemHeader defines element Header
type XElemHeader struct {
	Header *THeader `xml:"http://schemas.xmlsoap.org/soap/envelope/ Header"`
}

// Walk : if the WalkHandlers.XElemHeader function is not nil (ie. was set by outside code), calls it with this XElemHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemHeader instance.
func (me *XElemHeader) Walk() (err error) {
	if fn := WalkHandlers.XElemHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Header.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TBody defines type Body
type TBody struct {
}

// Walk : if the WalkHandlers.TBody function is not nil (ie. was set by outside code), calls it with this TBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TBody instance.
func (me *TBody) Walk() (err error) {
	if fn := WalkHandlers.TBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemBody defines element Body
type XElemBody struct {
	Body *TBody `xml:"http://schemas.xmlsoap.org/soap/envelope/ Body"`
}

// Walk : if the WalkHandlers.XElemBody function is not nil (ie. was set by outside code), calls it with this XElemBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemBody instance.
func (me *XElemBody) Walk() (err error) {
	if fn := WalkHandlers.XElemBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Body.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEnvelope defines type Envelope
type TEnvelope struct {
	XElemHeader
	XElemBody
}

// Walk : if the WalkHandlers.TEnvelope function is not nil (ie. was set by outside code), calls it with this TEnvelope instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TEnvelope instance.
func (me *TEnvelope) Walk() (err error) {
	if fn := WalkHandlers.TEnvelope; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemBody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEnvelope defines element Envelope
type XElemEnvelope struct {
	Envelope *TEnvelope `xml:"http://schemas.xmlsoap.org/soap/envelope/ Envelope"`
}

// Walk : if the WalkHandlers.XElemEnvelope function is not nil (ie. was set by outside code), calls it with this XElemEnvelope instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEnvelope instance.
func (me *XElemEnvelope) Walk() (err error) {
	if fn := WalkHandlers.XElemEnvelope; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Envelope.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEnvelope defines element Envelope
type XElemsEnvelope struct {
	Envelopes []*TEnvelope `xml:"http://schemas.xmlsoap.org/soap/envelope/ Envelope"`
}

// Walk : if the WalkHandlers.XElemsEnvelope function is not nil (ie. was set by outside code), calls it with this XElemsEnvelope instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEnvelope instance.
func (me *XElemsEnvelope) Walk() (err error) {
	if fn := WalkHandlers.XElemsEnvelope; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Envelopes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsHeader defines element Header
type XElemsHeader struct {
	Headers []*THeader `xml:"http://schemas.xmlsoap.org/soap/envelope/ Header"`
}

// Walk : if the WalkHandlers.XElemsHeader function is not nil (ie. was set by outside code), calls it with this XElemsHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsHeader instance.
func (me *XElemsHeader) Walk() (err error) {
	if fn := WalkHandlers.XElemsHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Headers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsBody defines element Body
type XElemsBody struct {
	Bodies []*TBody `xml:"http://schemas.xmlsoap.org/soap/envelope/ Body"`
}

// Walk : if the WalkHandlers.XElemsBody function is not nil (ie. was set by outside code), calls it with this XElemsBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsBody instance.
func (me *XElemsBody) Walk() (err error) {
	if fn := WalkHandlers.XElemsBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Bodies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName Fault reporting structure
type XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName struct {
	Faultcode xsdt.QName `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultcode"`
}

// Walk : if the WalkHandlers.XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName function is not nil (ie. was set by outside code), calls it with this XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName instance.
func (me *XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName) Walk() (err error) {
	if fn := WalkHandlers.XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFaultstringsequenceFaultschemaFaultstringXsdtString defines element FaultstringsequenceFaultschemaFaultstringXsdtString
type XElemFaultstringsequenceFaultschemaFaultstringXsdtString struct {
	Faultstring xsdt.String `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultstring"`
}

// Walk : if the WalkHandlers.XElemFaultstringsequenceFaultschemaFaultstringXsdtString function is not nil (ie. was set by outside code), calls it with this XElemFaultstringsequenceFaultschemaFaultstringXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemFaultstringsequenceFaultschemaFaultstringXsdtString instance.
func (me *XElemFaultstringsequenceFaultschemaFaultstringXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemFaultstringsequenceFaultschemaFaultstringXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI defines element FaultactorsequenceFaultschemaFaultactorXsdtAnyURI
type XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI struct {
	Faultactor xsdt.AnyURI `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultactor"`
}

// Walk : if the WalkHandlers.XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI function is not nil (ie. was set by outside code), calls it with this XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI instance.
func (me *XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI) Walk() (err error) {
	if fn := WalkHandlers.XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// Tdetail defines type detail
type Tdetail struct {
}

// Walk : if the WalkHandlers.Tdetail function is not nil (ie. was set by outside code), calls it with this Tdetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this Tdetail instance.
func (me *Tdetail) Walk() (err error) {
	if fn := WalkHandlers.Tdetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemDetailsequenceFaultschemaDetailTdetail defines element DetailsequenceFaultschemaDetailTdetail
type XElemDetailsequenceFaultschemaDetailTdetail struct {
	Detail *Tdetail `xml:"http://schemas.xmlsoap.org/soap/envelope/ detail"`
}

// Walk : if the WalkHandlers.XElemDetailsequenceFaultschemaDetailTdetail function is not nil (ie. was set by outside code), calls it with this XElemDetailsequenceFaultschemaDetailTdetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemDetailsequenceFaultschemaDetailTdetail instance.
func (me *XElemDetailsequenceFaultschemaDetailTdetail) Walk() (err error) {
	if fn := WalkHandlers.XElemDetailsequenceFaultschemaDetailTdetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Detail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TFault defines type Fault
type TFault struct {
	XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName
	XElemFaultstringsequenceFaultschemaFaultstringXsdtString
	XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI
	XElemDetailsequenceFaultschemaDetailTdetail
}

// Walk : if the WalkHandlers.TFault function is not nil (ie. was set by outside code), calls it with this TFault instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TFault instance.
func (me *TFault) Walk() (err error) {
	if fn := WalkHandlers.TFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFaultstringsequenceFaultschemaFaultstringXsdtString.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemDetailsequenceFaultschemaDetailTdetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemFault defines element Fault
type XElemFault struct {
	Fault *TFault `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault"`
}

// Walk : if the WalkHandlers.XElemFault function is not nil (ie. was set by outside code), calls it with this XElemFault instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemFault instance.
func (me *XElemFault) Walk() (err error) {
	if fn := WalkHandlers.XElemFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fault.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFault defines element Fault
type XElemsFault struct {
	Faults []*TFault `xml:"http://schemas.xmlsoap.org/soap/envelope/ Fault"`
}

// Walk : if the WalkHandlers.XElemsFault function is not nil (ie. was set by outside code), calls it with this XElemsFault instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFault instance.
func (me *XElemsFault) Walk() (err error) {
	if fn := WalkHandlers.XElemsFault; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faults {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsDetailsequenceFaultschemaDetailTdetail defines element DetailsequenceFaultschemaDetailTdetail
type XElemsDetailsequenceFaultschemaDetailTdetail struct {
	Details []*Tdetail `xml:"http://schemas.xmlsoap.org/soap/envelope/ detail"`
}

// Walk : if the WalkHandlers.XElemsDetailsequenceFaultschemaDetailTdetail function is not nil (ie. was set by outside code), calls it with this XElemsDetailsequenceFaultschemaDetailTdetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsDetailsequenceFaultschemaDetailTdetail instance.
func (me *XElemsDetailsequenceFaultschemaDetailTdetail) Walk() (err error) {
	if fn := WalkHandlers.XElemsDetailsequenceFaultschemaDetailTdetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Details {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFaultstringsequenceFaultschemaFaultstringXsdtString defines element FaultstringsequenceFaultschemaFaultstringXsdtString
type XElemsFaultstringsequenceFaultschemaFaultstringXsdtString struct {
	Faultstrings []xsdt.String `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultstring"`
}

// Walk : if the WalkHandlers.XElemsFaultstringsequenceFaultschemaFaultstringXsdtString function is not nil (ie. was set by outside code), calls it with this XElemsFaultstringsequenceFaultschemaFaultstringXsdtString instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFaultstringsequenceFaultschemaFaultstringXsdtString instance.
func (me *XElemsFaultstringsequenceFaultschemaFaultstringXsdtString) Walk() (err error) {
	if fn := WalkHandlers.XElemsFaultstringsequenceFaultschemaFaultstringXsdtString; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI defines element FaultactorsequenceFaultschemaFaultactorXsdtAnyURI
type XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI struct {
	Faultactors []xsdt.AnyURI `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultactor"`
}

// Walk : if the WalkHandlers.XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI function is not nil (ie. was set by outside code), calls it with this XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI instance.
func (me *XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI) Walk() (err error) {
	if fn := WalkHandlers.XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName defines element FaultcodesequenceFaultschemaFaultcodeXsdtQName
type XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName struct {
	Faultcodes []xsdt.QName `xml:"http://schemas.xmlsoap.org/soap/envelope/ faultcode"`
}

// Walk : if the WalkHandlers.XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName function is not nil (ie. was set by outside code), calls it with this XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName instance.
func (me *XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName) Walk() (err error) {
	if fn := WalkHandlers.XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 22 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 22 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	THeader                                                   func(*THeader, bool) error
	TBody                                                     func(*TBody, bool) error
	XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName       func(*XElemFaultcodesequenceFaultschemaFaultcodeXsdtQName, bool) error
	Tdetail                                                   func(*Tdetail, bool) error
	XElemFault                                                func(*XElemFault, bool) error
	XElemsFault                                               func(*XElemsFault, bool) error
	XElemHeader                                               func(*XElemHeader, bool) error
	XElemBody                                                 func(*XElemBody, bool) error
	XElemsHeader                                              func(*XElemsHeader, bool) error
	XCdata                                                    func(*XCdata, bool) error
	XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI   func(*XElemsFaultactorsequenceFaultschemaFaultactorXsdtAnyURI, bool) error
	XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName      func(*XElemsFaultcodesequenceFaultschemaFaultcodeXsdtQName, bool) error
	XElemsEnvelope                                            func(*XElemsEnvelope, bool) error
	XElemsBody                                                func(*XElemsBody, bool) error
	XElemDetailsequenceFaultschemaDetailTdetail               func(*XElemDetailsequenceFaultschemaDetailTdetail, bool) error
	TFault                                                    func(*TFault, bool) error
	XElemsDetailsequenceFaultschemaDetailTdetail              func(*XElemsDetailsequenceFaultschemaDetailTdetail, bool) error
	XElemsFaultstringsequenceFaultschemaFaultstringXsdtString func(*XElemsFaultstringsequenceFaultschemaFaultstringXsdtString, bool) error
	TEnvelope                                                 func(*TEnvelope, bool) error
	XElemEnvelope                                             func(*XElemEnvelope, bool) error
	XElemFaultstringsequenceFaultschemaFaultstringXsdtString  func(*XElemFaultstringsequenceFaultschemaFaultstringXsdtString, bool) error
	XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI    func(*XElemFaultactorsequenceFaultschemaFaultactorXsdtAnyURI, bool) error
}
