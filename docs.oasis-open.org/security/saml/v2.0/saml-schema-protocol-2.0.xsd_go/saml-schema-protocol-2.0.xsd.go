// Package goSamlProtocol20 : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goSamlProtocol20

//	Document identifier: saml-schema-protocol-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V1.0 (November, 2002): Initial Standard Schema. V1.1 (September, 2003): Updates within the same V1.0 namespace. V2.0 (March, 2005): New protocol schema based in a SAML V2.0 namespace.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// TExtensionsType defines type ExtensionsType
type TExtensionsType struct {
}

// Walk : if the WalkHandlers.TExtensionsType function is not nil (ie. was set by outside code), calls it with this TExtensionsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionsType instance.
func (me *TExtensionsType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemExtensions defines element Extensions
type XElemExtensions struct {
	Extensions *TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Extensions"`
}

// Walk : if the WalkHandlers.XElemExtensions function is not nil (ie. was set by outside code), calls it with this XElemExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemExtensions instance.
func (me *XElemExtensions) Walk() (err error) {
	if fn := WalkHandlers.XElemExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsExtensions defines element Extensions
type XElemsExtensions struct {
	Extensionses []*TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Extensions"`
}

// Walk : if the WalkHandlers.XElemsExtensions function is not nil (ie. was set by outside code), calls it with this XElemsExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsExtensions instance.
func (me *XElemsExtensions) Walk() (err error) {
	if fn := WalkHandlers.XElemsExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStatusMessage defines element StatusMessage
type XElemStatusMessage struct {
	StatusMessage *xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusMessage"`
}

// Walk : if the WalkHandlers.XElemStatusMessage function is not nil (ie. was set by outside code), calls it with this XElemStatusMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemStatusMessage instance.
func (me *XElemStatusMessage) Walk() (err error) {
	if fn := WalkHandlers.XElemStatusMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TStatusDetailType defines type StatusDetailType
type TStatusDetailType struct {
}

// Walk : if the WalkHandlers.TStatusDetailType function is not nil (ie. was set by outside code), calls it with this TStatusDetailType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TStatusDetailType instance.
func (me *TStatusDetailType) Walk() (err error) {
	if fn := WalkHandlers.TStatusDetailType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStatusDetail defines element StatusDetail
type XElemStatusDetail struct {
	StatusDetail *TStatusDetailType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusDetail"`
}

// Walk : if the WalkHandlers.XElemStatusDetail function is not nil (ie. was set by outside code), calls it with this XElemStatusDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemStatusDetail instance.
func (me *XElemStatusDetail) Walk() (err error) {
	if fn := WalkHandlers.XElemStatusDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StatusDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrValueXsdtAnyURI defines attribute Value
type XAttrValueXsdtAnyURI struct {
	Value xsdt.AnyURI `xml:"Value,attr,omitempty"`
}

// TStatusCodeType defines type StatusCodeType
type TStatusCodeType struct {
	XElemStatusCode
	XAttrValueXsdtAnyURI
}

// Walk : if the WalkHandlers.TStatusCodeType function is not nil (ie. was set by outside code), calls it with this TStatusCodeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TStatusCodeType instance.
func (me *TStatusCodeType) Walk() (err error) {
	if fn := WalkHandlers.TStatusCodeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStatusCode defines element StatusCode
type XElemStatusCode struct {
	StatusCode *TStatusCodeType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusCode"`
}

// Walk : if the WalkHandlers.XElemStatusCode function is not nil (ie. was set by outside code), calls it with this XElemStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemStatusCode instance.
func (me *XElemStatusCode) Walk() (err error) {
	if fn := WalkHandlers.XElemStatusCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.StatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TStatusType defines type StatusType
type TStatusType struct {
	XElemStatusCode
	XElemStatusMessage
	XElemStatusDetail
}

// Walk : if the WalkHandlers.TStatusType function is not nil (ie. was set by outside code), calls it with this TStatusType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TStatusType instance.
func (me *TStatusType) Walk() (err error) {
	if fn := WalkHandlers.TStatusType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemStatusCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemStatusMessage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemStatusDetail.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStatus defines element Status
type XElemStatus struct {
	Status *TStatusType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Status"`
}

// Walk : if the WalkHandlers.XElemStatus function is not nil (ie. was set by outside code), calls it with this XElemStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemStatus instance.
func (me *XElemStatus) Walk() (err error) {
	if fn := WalkHandlers.XElemStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Status.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsStatus defines element Status
type XElemsStatus struct {
	Statuses []*TStatusType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Status"`
}

// Walk : if the WalkHandlers.XElemsStatus function is not nil (ie. was set by outside code), calls it with this XElemsStatus instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStatus instance.
func (me *XElemsStatus) Walk() (err error) {
	if fn := WalkHandlers.XElemsStatus; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Statuses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsStatusCode defines element StatusCode
type XElemsStatusCode struct {
	StatusCodes []*TStatusCodeType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusCode"`
}

// Walk : if the WalkHandlers.XElemsStatusCode function is not nil (ie. was set by outside code), calls it with this XElemsStatusCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStatusCode instance.
func (me *XElemsStatusCode) Walk() (err error) {
	if fn := WalkHandlers.XElemsStatusCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StatusCodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsStatusMessage defines element StatusMessage
type XElemsStatusMessage struct {
	StatusMessages []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusMessage"`
}

// Walk : if the WalkHandlers.XElemsStatusMessage function is not nil (ie. was set by outside code), calls it with this XElemsStatusMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStatusMessage instance.
func (me *XElemsStatusMessage) Walk() (err error) {
	if fn := WalkHandlers.XElemsStatusMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsStatusDetail defines element StatusDetail
type XElemsStatusDetail struct {
	StatusDetails []*TStatusDetailType `xml:"urn:oasis:names:tc:SAML:2.0:protocol StatusDetail"`
}

// Walk : if the WalkHandlers.XElemsStatusDetail function is not nil (ie. was set by outside code), calls it with this XElemsStatusDetail instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStatusDetail instance.
func (me *XElemsStatusDetail) Walk() (err error) {
	if fn := WalkHandlers.XElemsStatusDetail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.StatusDetails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrDestinationXsdtAnyURI defines attribute Destination
type XAttrDestinationXsdtAnyURI struct {
	Destination xsdt.AnyURI `xml:"Destination,attr,omitempty"`
}

// XAttrConsentXsdtAnyURI defines attribute Consent
type XAttrConsentXsdtAnyURI struct {
	Consent xsdt.AnyURI `xml:"Consent,attr,omitempty"`
}

// XAttrIDXsdtID defines attribute Id
type XAttrIDXsdtID struct {
	ID xsdt.ID `xml:"ID,attr,omitempty"`
}

// XAttrVersionXsdtString defines attribute Version
type XAttrVersionXsdtString struct {
	Version xsdt.String `xml:"Version,attr,omitempty"`
}

// XAttrIssueInstantXsdtDateTime defines attribute IssueInstant
type XAttrIssueInstantXsdtDateTime struct {
	IssueInstant xsdt.DateTime `xml:"IssueInstant,attr,omitempty"`
}

// TRequestAbstractType defines type RequestAbstractType
type TRequestAbstractType struct {
	XElemExtensions
	XAttrIDXsdtID
	XAttrVersionXsdtString
	XAttrIssueInstantXsdtDateTime
	XAttrDestinationXsdtAnyURI
	XAttrConsentXsdtAnyURI
	saml.XElemIssuer
	ds.XElemSignature
}

// Walk : if the WalkHandlers.TRequestAbstractType function is not nil (ie. was set by outside code), calls it with this TRequestAbstractType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TRequestAbstractType instance.
func (me *TRequestAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TRequestAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAssertionIDRequestType defines type AssertionIDRequestType
type TAssertionIDRequestType struct {
	saml.XElemsAssertionIDRef
	TRequestAbstractType
}

// Walk : if the WalkHandlers.TAssertionIDRequestType function is not nil (ie. was set by outside code), calls it with this TAssertionIDRequestType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAssertionIDRequestType instance.
func (me *TAssertionIDRequestType) Walk() (err error) {
	if fn := WalkHandlers.TAssertionIDRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAssertionIDRequest defines element AssertionIDRequest
type XElemAssertionIDRequest struct {
	AssertionIDRequest *TAssertionIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionIDRequest"`
}

// Walk : if the WalkHandlers.XElemAssertionIDRequest function is not nil (ie. was set by outside code), calls it with this XElemAssertionIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAssertionIDRequest instance.
func (me *XElemAssertionIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemAssertionIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionIDRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAssertionIDRequest defines element AssertionIDRequest
type XElemsAssertionIDRequest struct {
	AssertionIDRequests []*TAssertionIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AssertionIDRequest"`
}

// Walk : if the WalkHandlers.XElemsAssertionIDRequest function is not nil (ie. was set by outside code), calls it with this XElemsAssertionIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAssertionIDRequest instance.
func (me *XElemsAssertionIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemsAssertionIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionIDRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSubjectQueryAbstractType defines type SubjectQueryAbstractType
type TSubjectQueryAbstractType struct {
	TRequestAbstractType
	saml.XElemSubject
}

// Walk : if the WalkHandlers.TSubjectQueryAbstractType function is not nil (ie. was set by outside code), calls it with this TSubjectQueryAbstractType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TSubjectQueryAbstractType instance.
func (me *TSubjectQueryAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectQueryAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSubjectQuery defines element SubjectQuery
type XElemsSubjectQuery struct {
	SubjectQueries []*TSubjectQueryAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:protocol SubjectQuery"`
}

// Walk : if the WalkHandlers.XElemsSubjectQuery function is not nil (ie. was set by outside code), calls it with this XElemsSubjectQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSubjectQuery instance.
func (me *XElemsSubjectQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemsSubjectQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSubjectQuery defines element SubjectQuery
type XElemSubjectQuery struct {
	SubjectQuery *TSubjectQueryAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:protocol SubjectQuery"`
}

// Walk : if the WalkHandlers.XElemSubjectQuery function is not nil (ie. was set by outside code), calls it with this XElemSubjectQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSubjectQuery instance.
func (me *XElemSubjectQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemSubjectQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnContextComparisonType defines type AuthnContextComparisonType
type TAuthnContextComparisonType xsdt.String

// String : Since TAuthnContextComparisonType is just a simple String type, this merely returns the current string value.
func (me TAuthnContextComparisonType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TAuthnContextComparisonType's alias type xsdt.String.
func (me TAuthnContextComparisonType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsExact : Returns true if the value of this enumerated TAuthnContextComparisonType is "exact".
func (me TAuthnContextComparisonType) IsExact() bool { return me.String() == "exact" }

// IsMinimum : Returns true if the value of this enumerated TAuthnContextComparisonType is "minimum".
func (me TAuthnContextComparisonType) IsMinimum() bool { return me.String() == "minimum" }

// IsMaximum : Returns true if the value of this enumerated TAuthnContextComparisonType is "maximum".
func (me TAuthnContextComparisonType) IsMaximum() bool { return me.String() == "maximum" }

// IsBetter : Returns true if the value of this enumerated TAuthnContextComparisonType is "better".
func (me TAuthnContextComparisonType) IsBetter() bool { return me.String() == "better" }

// Set : Since TAuthnContextComparisonType is just a simple String type, this merely sets the current value from the specified string.
func (me *TAuthnContextComparisonType) Set(s string) { (*xsdt.String)(me).Set(s) }

// XAttrComparisonTAuthnContextComparisonType defines attribute ComparisonTAuthnContextComparisonType
type XAttrComparisonTAuthnContextComparisonType struct {
	Comparison TAuthnContextComparisonType `xml:"Comparison,attr,omitempty"`
}

// TRequestedAuthnContextType defines type RequestedAuthnContextType
type TRequestedAuthnContextType struct {
	saml.XElemsAuthnContextClassRef
	saml.XElemsAuthnContextDeclRef
	XAttrComparisonTAuthnContextComparisonType
}

// Walk : if the WalkHandlers.TRequestedAuthnContextType function is not nil (ie. was set by outside code), calls it with this TRequestedAuthnContextType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TRequestedAuthnContextType instance.
func (me *TRequestedAuthnContextType) Walk() (err error) {
	if fn := WalkHandlers.TRequestedAuthnContextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRequestedAuthnContext defines element RequestedAuthnContext
type XElemRequestedAuthnContext struct {
	RequestedAuthnContext *TRequestedAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequestedAuthnContext"`
}

// Walk : if the WalkHandlers.XElemRequestedAuthnContext function is not nil (ie. was set by outside code), calls it with this XElemRequestedAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRequestedAuthnContext instance.
func (me *XElemRequestedAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XElemRequestedAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrSessionIndexXsdtString defines attribute SessionIndex
type XAttrSessionIndexXsdtString struct {
	SessionIndex xsdt.String `xml:"SessionIndex,attr,omitempty"`
}

// TAuthnQueryType defines type AuthnQueryType
type TAuthnQueryType struct {
	TSubjectQueryAbstractType
	XElemRequestedAuthnContext
	XAttrSessionIndexXsdtString
}

// Walk : if the WalkHandlers.TAuthnQueryType function is not nil (ie. was set by outside code), calls it with this TAuthnQueryType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TAuthnQueryType instance.
func (me *TAuthnQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemRequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnQuery defines element AuthnQuery
type XElemAuthnQuery struct {
	AuthnQuery *TAuthnQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnQuery"`
}

// Walk : if the WalkHandlers.XElemAuthnQuery function is not nil (ie. was set by outside code), calls it with this XElemAuthnQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthnQuery instance.
func (me *XElemAuthnQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnQuery defines element AuthnQuery
type XElemsAuthnQuery struct {
	AuthnQueries []*TAuthnQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnQuery"`
}

// Walk : if the WalkHandlers.XElemsAuthnQuery function is not nil (ie. was set by outside code), calls it with this XElemsAuthnQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnQuery instance.
func (me *XElemsAuthnQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRequestedAuthnContext defines element RequestedAuthnContext
type XElemsRequestedAuthnContext struct {
	RequestedAuthnContexts []*TRequestedAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequestedAuthnContext"`
}

// Walk : if the WalkHandlers.XElemsRequestedAuthnContext function is not nil (ie. was set by outside code), calls it with this XElemsRequestedAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRequestedAuthnContext instance.
func (me *XElemsRequestedAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XElemsRequestedAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequestedAuthnContexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeQueryType defines type AttributeQueryType
type TAttributeQueryType struct {
	TSubjectQueryAbstractType
	saml.XElemsAttribute
}

// Walk : if the WalkHandlers.TAttributeQueryType function is not nil (ie. was set by outside code), calls it with this TAttributeQueryType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TAttributeQueryType instance.
func (me *TAttributeQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeQuery defines element AttributeQuery
type XElemAttributeQuery struct {
	AttributeQuery *TAttributeQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeQuery"`
}

// Walk : if the WalkHandlers.XElemAttributeQuery function is not nil (ie. was set by outside code), calls it with this XElemAttributeQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAttributeQuery instance.
func (me *XElemAttributeQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeQuery defines element AttributeQuery
type XElemsAttributeQuery struct {
	AttributeQueries []*TAttributeQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AttributeQuery"`
}

// Walk : if the WalkHandlers.XElemsAttributeQuery function is not nil (ie. was set by outside code), calls it with this XElemsAttributeQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeQuery instance.
func (me *XElemsAttributeQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrResourceXsdtAnyURI defines attribute Resource
type XAttrResourceXsdtAnyURI struct {
	Resource xsdt.AnyURI `xml:"Resource,attr,omitempty"`
}

// TAuthzDecisionQueryType defines type AuthzDecisionQueryType
type TAuthzDecisionQueryType struct {
	TSubjectQueryAbstractType
	saml.XElemsAction
	saml.XElemEvidence
	XAttrResourceXsdtAnyURI
}

// Walk : if the WalkHandlers.TAuthzDecisionQueryType function is not nil (ie. was set by outside code), calls it with this TAuthzDecisionQueryType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TAuthzDecisionQueryType instance.
func (me *TAuthzDecisionQueryType) Walk() (err error) {
	if fn := WalkHandlers.TAuthzDecisionQueryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectQueryAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthzDecisionQuery defines element AuthzDecisionQuery
type XElemAuthzDecisionQuery struct {
	AuthzDecisionQuery *TAuthzDecisionQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthzDecisionQuery"`
}

// Walk : if the WalkHandlers.XElemAuthzDecisionQuery function is not nil (ie. was set by outside code), calls it with this XElemAuthzDecisionQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthzDecisionQuery instance.
func (me *XElemAuthzDecisionQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthzDecisionQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzDecisionQuery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthzDecisionQuery defines element AuthzDecisionQuery
type XElemsAuthzDecisionQuery struct {
	AuthzDecisionQueries []*TAuthzDecisionQueryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthzDecisionQuery"`
}

// Walk : if the WalkHandlers.XElemsAuthzDecisionQuery function is not nil (ie. was set by outside code), calls it with this XElemsAuthzDecisionQuery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthzDecisionQuery instance.
func (me *XElemsAuthzDecisionQuery) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthzDecisionQuery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzDecisionQueries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAttributeConsumingServiceIndexXsdtUnsignedShort defines attribute AttributeConsumingServiceIndex
type XAttrAttributeConsumingServiceIndexXsdtUnsignedShort struct {
	AttributeConsumingServiceIndex *xsdt.UnsignedShort `xml:"AttributeConsumingServiceIndex,attr,omitempty"`
}

// XAttrProviderNameXsdtString defines attribute ProviderName
type XAttrProviderNameXsdtString struct {
	ProviderName xsdt.String `xml:"ProviderName,attr,omitempty"`
}

// XAttrIsPassiveXsdtBoolean defines attribute IsPassive
type XAttrIsPassiveXsdtBoolean struct {
	IsPassive xsdt.Boolean `xml:"IsPassive,attr,omitempty"`
}

// XAttrAssertionConsumerServiceIndexXsdtUnsignedShort defines attribute AssertionConsumerServiceIndex
type XAttrAssertionConsumerServiceIndexXsdtUnsignedShort struct {
	AssertionConsumerServiceIndex *xsdt.UnsignedShort `xml:"AssertionConsumerServiceIndex,attr,omitempty"`
}

// XAttrFormatXsdtAnyURI defines attribute Format
type XAttrFormatXsdtAnyURI struct {
	Format xsdt.AnyURI `xml:"Format,attr,omitempty"`
}

// XAttrSPNameQualifierXsdtString defines attribute SPNameQualifier
type XAttrSPNameQualifierXsdtString struct {
	SPNameQualifier xsdt.String `xml:"SPNameQualifier,attr,omitempty"`
}

// XAttrAllowCreateXsdtBoolean defines attribute AllowCreate
type XAttrAllowCreateXsdtBoolean struct {
	AllowCreate xsdt.Boolean `xml:"AllowCreate,attr,omitempty"`
}

// TNameIDPolicyType defines type NameIDPolicyType
type TNameIDPolicyType struct {
	XAttrFormatXsdtAnyURI
	XAttrSPNameQualifierXsdtString
	XAttrAllowCreateXsdtBoolean
}

// Walk : if the WalkHandlers.TNameIDPolicyType function is not nil (ie. was set by outside code), calls it with this TNameIDPolicyType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TNameIDPolicyType instance.
func (me *TNameIDPolicyType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDPolicyType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNameIDPolicy defines element NameIDPolicy
type XElemNameIDPolicy struct {
	NameIDPolicy *TNameIDPolicyType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDPolicy"`
}

// Walk : if the WalkHandlers.XElemNameIDPolicy function is not nil (ie. was set by outside code), calls it with this XElemNameIDPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemNameIDPolicy instance.
func (me *XElemNameIDPolicy) Walk() (err error) {
	if fn := WalkHandlers.XElemNameIDPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrLocXsdtAnyURI defines attribute Loc
type XAttrLocXsdtAnyURI struct {
	Loc xsdt.AnyURI `xml:"Loc,attr,omitempty"`
}

// XAttrProviderIDXsdtAnyURI defines attribute ProviderID
type XAttrProviderIDXsdtAnyURI struct {
	ProviderID xsdt.AnyURI `xml:"ProviderID,attr,omitempty"`
}

// XAttrNameXsdtString defines attribute Name
type XAttrNameXsdtString struct {
	Name xsdt.String `xml:"Name,attr,omitempty"`
}

// TIDPEntryType defines type IDPEntryType
type TIDPEntryType struct {
	XAttrLocXsdtAnyURI
	XAttrProviderIDXsdtAnyURI
	XAttrNameXsdtString
}

// Walk : if the WalkHandlers.TIDPEntryType function is not nil (ie. was set by outside code), calls it with this TIDPEntryType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TIDPEntryType instance.
func (me *TIDPEntryType) Walk() (err error) {
	if fn := WalkHandlers.TIDPEntryType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsIDPEntry defines element IDPEntry
type XElemsIDPEntry struct {
	IDPEntries []*TIDPEntryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPEntry"`
}

// Walk : if the WalkHandlers.XElemsIDPEntry function is not nil (ie. was set by outside code), calls it with this XElemsIDPEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsIDPEntry instance.
func (me *XElemsIDPEntry) Walk() (err error) {
	if fn := WalkHandlers.XElemsIDPEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPEntries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemGetComplete defines element GetComplete
type XElemGetComplete struct {
	GetComplete xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol GetComplete"`
}

// Walk : if the WalkHandlers.XElemGetComplete function is not nil (ie. was set by outside code), calls it with this XElemGetComplete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemGetComplete instance.
func (me *XElemGetComplete) Walk() (err error) {
	if fn := WalkHandlers.XElemGetComplete; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TIDPListType defines type IDPListType
type TIDPListType struct {
	XElemsIDPEntry
	XElemGetComplete
}

// Walk : if the WalkHandlers.TIDPListType function is not nil (ie. was set by outside code), calls it with this TIDPListType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TIDPListType instance.
func (me *TIDPListType) Walk() (err error) {
	if fn := WalkHandlers.TIDPListType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsIDPEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemGetComplete.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemIDPList defines element IDPList
type XElemIDPList struct {
	IDPList *TIDPListType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPList"`
}

// Walk : if the WalkHandlers.XElemIDPList function is not nil (ie. was set by outside code), calls it with this XElemIDPList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemIDPList instance.
func (me *XElemIDPList) Walk() (err error) {
	if fn := WalkHandlers.XElemIDPList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRequesterID defines element RequesterID
type XElemsRequesterID struct {
	RequesterIDs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequesterID"`
}

// Walk : if the WalkHandlers.XElemsRequesterID function is not nil (ie. was set by outside code), calls it with this XElemsRequesterID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRequesterID instance.
func (me *XElemsRequesterID) Walk() (err error) {
	if fn := WalkHandlers.XElemsRequesterID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrProxyCountXsdtNonNegativeInteger defines attribute ProxyCount
type XAttrProxyCountXsdtNonNegativeInteger struct {
	ProxyCount xsdt.NonNegativeInteger `xml:"ProxyCount,attr,omitempty"`
}

// TScopingType defines type ScopingType
type TScopingType struct {
	XElemIDPList
	XElemsRequesterID
	XAttrProxyCountXsdtNonNegativeInteger
}

// Walk : if the WalkHandlers.TScopingType function is not nil (ie. was set by outside code), calls it with this TScopingType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TScopingType instance.
func (me *TScopingType) Walk() (err error) {
	if fn := WalkHandlers.TScopingType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemIDPList.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRequesterID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemScoping defines element Scoping
type XElemScoping struct {
	Scoping *TScopingType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Scoping"`
}

// Walk : if the WalkHandlers.XElemScoping function is not nil (ie. was set by outside code), calls it with this XElemScoping instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemScoping instance.
func (me *XElemScoping) Walk() (err error) {
	if fn := WalkHandlers.XElemScoping; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scoping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAssertionConsumerServiceURLXsdtAnyURI defines attribute AssertionConsumerServiceURL
type XAttrAssertionConsumerServiceURLXsdtAnyURI struct {
	AssertionConsumerServiceURL xsdt.AnyURI `xml:"AssertionConsumerServiceURL,attr,omitempty"`
}

// XAttrForceAuthnXsdtBoolean defines attribute ForceAuthn
type XAttrForceAuthnXsdtBoolean struct {
	ForceAuthn xsdt.Boolean `xml:"ForceAuthn,attr,omitempty"`
}

// XAttrProtocolBindingXsdtAnyURI defines attribute ProtocolBinding
type XAttrProtocolBindingXsdtAnyURI struct {
	ProtocolBinding xsdt.AnyURI `xml:"ProtocolBinding,attr,omitempty"`
}

// TAuthnRequestType defines type AuthnRequestType
type TAuthnRequestType struct {
	TRequestAbstractType
	saml.XElemSubject
	XElemNameIDPolicy
	saml.XElemConditions
	XElemRequestedAuthnContext
	XElemScoping
	XAttrForceAuthnXsdtBoolean
	XAttrIsPassiveXsdtBoolean
	XAttrProtocolBindingXsdtAnyURI
	XAttrAssertionConsumerServiceIndexXsdtUnsignedShort
	XAttrAssertionConsumerServiceURLXsdtAnyURI
	XAttrAttributeConsumingServiceIndexXsdtUnsignedShort
	XAttrProviderNameXsdtString
}

// Walk : if the WalkHandlers.TAuthnRequestType function is not nil (ie. was set by outside code), calls it with this TAuthnRequestType instance as the single argument. Then calls the Walk() method on 4/13 embed(s) and 0/0 field(s) belonging to this TAuthnRequestType instance.
func (me *TAuthnRequestType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemRequestedAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemNameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemScoping.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnRequest defines element AuthnRequest
type XElemAuthnRequest struct {
	AuthnRequest *TAuthnRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnRequest"`
}

// Walk : if the WalkHandlers.XElemAuthnRequest function is not nil (ie. was set by outside code), calls it with this XElemAuthnRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthnRequest instance.
func (me *XElemAuthnRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnRequest defines element AuthnRequest
type XElemsAuthnRequest struct {
	AuthnRequests []*TAuthnRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol AuthnRequest"`
}

// Walk : if the WalkHandlers.XElemsAuthnRequest function is not nil (ie. was set by outside code), calls it with this XElemsAuthnRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnRequest instance.
func (me *XElemsAuthnRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNameIDPolicy defines element NameIDPolicy
type XElemsNameIDPolicy struct {
	NameIDPolicies []*TNameIDPolicyType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDPolicy"`
}

// Walk : if the WalkHandlers.XElemsNameIDPolicy function is not nil (ie. was set by outside code), calls it with this XElemsNameIDPolicy instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNameIDPolicy instance.
func (me *XElemsNameIDPolicy) Walk() (err error) {
	if fn := WalkHandlers.XElemsNameIDPolicy; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDPolicies {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsScoping defines element Scoping
type XElemsScoping struct {
	Scopings []*TScopingType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Scoping"`
}

// Walk : if the WalkHandlers.XElemsScoping function is not nil (ie. was set by outside code), calls it with this XElemsScoping instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsScoping instance.
func (me *XElemsScoping) Walk() (err error) {
	if fn := WalkHandlers.XElemsScoping; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scopings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRequesterID defines element RequesterID
type XElemRequesterID struct {
	RequesterID xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol RequesterID"`
}

// Walk : if the WalkHandlers.XElemRequesterID function is not nil (ie. was set by outside code), calls it with this XElemRequesterID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemRequesterID instance.
func (me *XElemRequesterID) Walk() (err error) {
	if fn := WalkHandlers.XElemRequesterID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsIDPList defines element IDPList
type XElemsIDPList struct {
	IDPLists []*TIDPListType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPList"`
}

// Walk : if the WalkHandlers.XElemsIDPList function is not nil (ie. was set by outside code), calls it with this XElemsIDPList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsIDPList instance.
func (me *XElemsIDPList) Walk() (err error) {
	if fn := WalkHandlers.XElemsIDPList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPLists {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemIDPEntry defines element IDPEntry
type XElemIDPEntry struct {
	IDPEntry *TIDPEntryType `xml:"urn:oasis:names:tc:SAML:2.0:protocol IDPEntry"`
}

// Walk : if the WalkHandlers.XElemIDPEntry function is not nil (ie. was set by outside code), calls it with this XElemIDPEntry instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemIDPEntry instance.
func (me *XElemIDPEntry) Walk() (err error) {
	if fn := WalkHandlers.XElemIDPEntry; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPEntry.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsGetComplete defines element GetComplete
type XElemsGetComplete struct {
	GetCompletes []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:protocol GetComplete"`
}

// Walk : if the WalkHandlers.XElemsGetComplete function is not nil (ie. was set by outside code), calls it with this XElemsGetComplete instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsGetComplete instance.
func (me *XElemsGetComplete) Walk() (err error) {
	if fn := WalkHandlers.XElemsGetComplete; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrInResponseToXsdtNCName defines attribute InResponseTo
type XAttrInResponseToXsdtNCName struct {
	InResponseTo xsdt.NCName `xml:"InResponseTo,attr,omitempty"`
}

// TStatusResponseType defines type StatusResponseType
type TStatusResponseType struct {
	XAttrIDXsdtID
	XAttrInResponseToXsdtNCName
	XAttrVersionXsdtString
	XAttrIssueInstantXsdtDateTime
	XAttrDestinationXsdtAnyURI
	XAttrConsentXsdtAnyURI
	saml.XElemIssuer
	ds.XElemSignature
	XElemExtensions
	XElemStatus
}

// Walk : if the WalkHandlers.TStatusResponseType function is not nil (ie. was set by outside code), calls it with this TStatusResponseType instance as the single argument. Then calls the Walk() method on 2/10 embed(s) and 0/0 field(s) belonging to this TStatusResponseType instance.
func (me *TStatusResponseType) Walk() (err error) {
	if fn := WalkHandlers.TStatusResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemStatus.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TResponseType defines type ResponseType
type TResponseType struct {
	TStatusResponseType
	saml.XElemsAssertion
	saml.XElemsEncryptedAssertion
}

// Walk : if the WalkHandlers.TResponseType function is not nil (ie. was set by outside code), calls it with this TResponseType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TResponseType instance.
func (me *TResponseType) Walk() (err error) {
	if fn := WalkHandlers.TResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemResponse defines element Response
type XElemResponse struct {
	Response *TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Response"`
}

// Walk : if the WalkHandlers.XElemResponse function is not nil (ie. was set by outside code), calls it with this XElemResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemResponse instance.
func (me *XElemResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Response.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsResponse defines element Response
type XElemsResponse struct {
	Responses []*TResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Response"`
}

// Walk : if the WalkHandlers.XElemsResponse function is not nil (ie. was set by outside code), calls it with this XElemsResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsResponse instance.
func (me *XElemsResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemsResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Responses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemArtifact defines element Artifact
type XElemArtifact struct {
	Artifact xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Artifact"`
}

// Walk : if the WalkHandlers.XElemArtifact function is not nil (ie. was set by outside code), calls it with this XElemArtifact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemArtifact instance.
func (me *XElemArtifact) Walk() (err error) {
	if fn := WalkHandlers.XElemArtifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TArtifactResolveType defines type ArtifactResolveType
type TArtifactResolveType struct {
	TRequestAbstractType
	XElemArtifact
}

// Walk : if the WalkHandlers.TArtifactResolveType function is not nil (ie. was set by outside code), calls it with this TArtifactResolveType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TArtifactResolveType instance.
func (me *TArtifactResolveType) Walk() (err error) {
	if fn := WalkHandlers.TArtifactResolveType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemArtifact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemArtifactResolve defines element ArtifactResolve
type XElemArtifactResolve struct {
	ArtifactResolve *TArtifactResolveType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResolve"`
}

// Walk : if the WalkHandlers.XElemArtifactResolve function is not nil (ie. was set by outside code), calls it with this XElemArtifactResolve instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemArtifactResolve instance.
func (me *XElemArtifactResolve) Walk() (err error) {
	if fn := WalkHandlers.XElemArtifactResolve; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResolve.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsArtifactResolve defines element ArtifactResolve
type XElemsArtifactResolve struct {
	ArtifactResolves []*TArtifactResolveType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResolve"`
}

// Walk : if the WalkHandlers.XElemsArtifactResolve function is not nil (ie. was set by outside code), calls it with this XElemsArtifactResolve instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsArtifactResolve instance.
func (me *XElemsArtifactResolve) Walk() (err error) {
	if fn := WalkHandlers.XElemsArtifactResolve; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResolves {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsArtifact defines element Artifact
type XElemsArtifact struct {
	Artifacts []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol Artifact"`
}

// Walk : if the WalkHandlers.XElemsArtifact function is not nil (ie. was set by outside code), calls it with this XElemsArtifact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsArtifact instance.
func (me *XElemsArtifact) Walk() (err error) {
	if fn := WalkHandlers.XElemsArtifact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TArtifactResponseType defines type ArtifactResponseType
type TArtifactResponseType struct {
	TStatusResponseType
}

// Walk : if the WalkHandlers.TArtifactResponseType function is not nil (ie. was set by outside code), calls it with this TArtifactResponseType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TArtifactResponseType instance.
func (me *TArtifactResponseType) Walk() (err error) {
	if fn := WalkHandlers.TArtifactResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemArtifactResponse defines element ArtifactResponse
type XElemArtifactResponse struct {
	ArtifactResponse *TArtifactResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResponse"`
}

// Walk : if the WalkHandlers.XElemArtifactResponse function is not nil (ie. was set by outside code), calls it with this XElemArtifactResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemArtifactResponse instance.
func (me *XElemArtifactResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemArtifactResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsArtifactResponse defines element ArtifactResponse
type XElemsArtifactResponse struct {
	ArtifactResponses []*TArtifactResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ArtifactResponse"`
}

// Walk : if the WalkHandlers.XElemsArtifactResponse function is not nil (ie. was set by outside code), calls it with this XElemsArtifactResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsArtifactResponse instance.
func (me *XElemsArtifactResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemsArtifactResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNewID defines element NewID
type XElemNewID struct {
	NewID xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewID"`
}

// Walk : if the WalkHandlers.XElemNewID function is not nil (ie. was set by outside code), calls it with this XElemNewID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemNewID instance.
func (me *XElemNewID) Walk() (err error) {
	if fn := WalkHandlers.XElemNewID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNewEncryptedID defines element NewEncryptedID
type XElemNewEncryptedID struct {
	NewEncryptedID saml.TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewEncryptedID"`
}

// Walk : if the WalkHandlers.XElemNewEncryptedID function is not nil (ie. was set by outside code), calls it with this XElemNewEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemNewEncryptedID instance.
func (me *XElemNewEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XElemNewEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TerminateType defines type erminateType
type TerminateType struct {
}

// Walk : if the WalkHandlers.TerminateType function is not nil (ie. was set by outside code), calls it with this TerminateType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TerminateType instance.
func (me *TerminateType) Walk() (err error) {
	if fn := WalkHandlers.TerminateType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTerminate defines element Terminate
type XElemTerminate struct {
	Terminate *TerminateType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Terminate"`
}

// Walk : if the WalkHandlers.XElemTerminate function is not nil (ie. was set by outside code), calls it with this XElemTerminate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemTerminate instance.
func (me *XElemTerminate) Walk() (err error) {
	if fn := WalkHandlers.XElemTerminate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Terminate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TManageNameIDRequestType defines type ManageNameIDRequestType
type TManageNameIDRequestType struct {
	XElemNewID
	XElemNewEncryptedID
	XElemTerminate
	TRequestAbstractType
	saml.XElemNameID
	saml.XElemEncryptedID
}

// Walk : if the WalkHandlers.TManageNameIDRequestType function is not nil (ie. was set by outside code), calls it with this TManageNameIDRequestType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TManageNameIDRequestType instance.
func (me *TManageNameIDRequestType) Walk() (err error) {
	if fn := WalkHandlers.TManageNameIDRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemNewID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemNewEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemTerminate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemManageNameIDRequest defines element ManageNameIDRequest
type XElemManageNameIDRequest struct {
	ManageNameIDRequest *TManageNameIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDRequest"`
}

// Walk : if the WalkHandlers.XElemManageNameIDRequest function is not nil (ie. was set by outside code), calls it with this XElemManageNameIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemManageNameIDRequest instance.
func (me *XElemManageNameIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemManageNameIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsManageNameIDRequest defines element ManageNameIDRequest
type XElemsManageNameIDRequest struct {
	ManageNameIDRequests []*TManageNameIDRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDRequest"`
}

// Walk : if the WalkHandlers.XElemsManageNameIDRequest function is not nil (ie. was set by outside code), calls it with this XElemsManageNameIDRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsManageNameIDRequest instance.
func (me *XElemsManageNameIDRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemsManageNameIDRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNewID defines element NewID
type XElemsNewID struct {
	NewIDs []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewID"`
}

// Walk : if the WalkHandlers.XElemsNewID function is not nil (ie. was set by outside code), calls it with this XElemsNewID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNewID instance.
func (me *XElemsNewID) Walk() (err error) {
	if fn := WalkHandlers.XElemsNewID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNewEncryptedID defines element NewEncryptedID
type XElemsNewEncryptedID struct {
	NewEncryptedIDs []saml.TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NewEncryptedID"`
}

// Walk : if the WalkHandlers.XElemsNewEncryptedID function is not nil (ie. was set by outside code), calls it with this XElemsNewEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNewEncryptedID instance.
func (me *XElemsNewEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XElemsNewEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTerminate defines element Terminate
type XElemsTerminate struct {
	Terminates []*TerminateType `xml:"urn:oasis:names:tc:SAML:2.0:protocol Terminate"`
}

// Walk : if the WalkHandlers.XElemsTerminate function is not nil (ie. was set by outside code), calls it with this XElemsTerminate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTerminate instance.
func (me *XElemsTerminate) Walk() (err error) {
	if fn := WalkHandlers.XElemsTerminate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Terminates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemManageNameIDResponse defines element ManageNameIDResponse
type XElemManageNameIDResponse struct {
	ManageNameIDResponse *TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDResponse"`
}

// Walk : if the WalkHandlers.XElemManageNameIDResponse function is not nil (ie. was set by outside code), calls it with this XElemManageNameIDResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemManageNameIDResponse instance.
func (me *XElemManageNameIDResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemManageNameIDResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsManageNameIDResponse defines element ManageNameIDResponse
type XElemsManageNameIDResponse struct {
	ManageNameIDResponses []*TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol ManageNameIDResponse"`
}

// Walk : if the WalkHandlers.XElemsManageNameIDResponse function is not nil (ie. was set by outside code), calls it with this XElemsManageNameIDResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsManageNameIDResponse instance.
func (me *XElemsManageNameIDResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemsManageNameIDResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSessionIndex defines element SessionIndex
type XElemsSessionIndex struct {
	SessionIndexs []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex"`
}

// Walk : if the WalkHandlers.XElemsSessionIndex function is not nil (ie. was set by outside code), calls it with this XElemsSessionIndex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSessionIndex instance.
func (me *XElemsSessionIndex) Walk() (err error) {
	if fn := WalkHandlers.XElemsSessionIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrReasonXsdtString defines attribute Reason
type XAttrReasonXsdtString struct {
	Reason xsdt.String `xml:"Reason,attr,omitempty"`
}

// XAttrNotOnOrAfterXsdtDateTime defines attribute NotOnOrAfter
type XAttrNotOnOrAfterXsdtDateTime struct {
	NotOnOrAfter xsdt.DateTime `xml:"NotOnOrAfter,attr,omitempty"`
}

// TLogoutRequestType defines type LogoutRequestType
type TLogoutRequestType struct {
	XAttrReasonXsdtString
	XAttrNotOnOrAfterXsdtDateTime
	TRequestAbstractType
	saml.XElemBaseID
	saml.XElemNameID
	saml.XElemEncryptedID
	XElemsSessionIndex
}

// Walk : if the WalkHandlers.TLogoutRequestType function is not nil (ie. was set by outside code), calls it with this TLogoutRequestType instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TLogoutRequestType instance.
func (me *TLogoutRequestType) Walk() (err error) {
	if fn := WalkHandlers.TLogoutRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSessionIndex.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsLogoutRequest defines element LogoutRequest
type XElemsLogoutRequest struct {
	LogoutRequests []*TLogoutRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutRequest"`
}

// Walk : if the WalkHandlers.XElemsLogoutRequest function is not nil (ie. was set by outside code), calls it with this XElemsLogoutRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsLogoutRequest instance.
func (me *XElemsLogoutRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemsLogoutRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LogoutRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemLogoutRequest defines element LogoutRequest
type XElemLogoutRequest struct {
	LogoutRequest *TLogoutRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutRequest"`
}

// Walk : if the WalkHandlers.XElemLogoutRequest function is not nil (ie. was set by outside code), calls it with this XElemLogoutRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemLogoutRequest instance.
func (me *XElemLogoutRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemLogoutRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogoutRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSessionIndex defines element SessionIndex
type XElemSessionIndex struct {
	SessionIndex xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:protocol SessionIndex"`
}

// Walk : if the WalkHandlers.XElemSessionIndex function is not nil (ie. was set by outside code), calls it with this XElemSessionIndex instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemSessionIndex instance.
func (me *XElemSessionIndex) Walk() (err error) {
	if fn := WalkHandlers.XElemSessionIndex; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemLogoutResponse defines element LogoutResponse
type XElemLogoutResponse struct {
	LogoutResponse *TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutResponse"`
}

// Walk : if the WalkHandlers.XElemLogoutResponse function is not nil (ie. was set by outside code), calls it with this XElemLogoutResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemLogoutResponse instance.
func (me *XElemLogoutResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemLogoutResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.LogoutResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsLogoutResponse defines element LogoutResponse
type XElemsLogoutResponse struct {
	LogoutResponses []*TStatusResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol LogoutResponse"`
}

// Walk : if the WalkHandlers.XElemsLogoutResponse function is not nil (ie. was set by outside code), calls it with this XElemsLogoutResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsLogoutResponse instance.
func (me *XElemsLogoutResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemsLogoutResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LogoutResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TNameIDMappingRequestType defines type NameIDMappingRequestType
type TNameIDMappingRequestType struct {
	TRequestAbstractType
	saml.XElemBaseID
	saml.XElemNameID
	saml.XElemEncryptedID
	XElemNameIDPolicy
}

// Walk : if the WalkHandlers.TNameIDMappingRequestType function is not nil (ie. was set by outside code), calls it with this TNameIDMappingRequestType instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TNameIDMappingRequestType instance.
func (me *TNameIDMappingRequestType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDMappingRequestType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemNameIDPolicy.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRequestAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNameIDMappingRequest defines element NameIDMappingRequest
type XElemNameIDMappingRequest struct {
	NameIDMappingRequest *TNameIDMappingRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingRequest"`
}

// Walk : if the WalkHandlers.XElemNameIDMappingRequest function is not nil (ie. was set by outside code), calls it with this XElemNameIDMappingRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemNameIDMappingRequest instance.
func (me *XElemNameIDMappingRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemNameIDMappingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingRequest.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNameIDMappingRequest defines element NameIDMappingRequest
type XElemsNameIDMappingRequest struct {
	NameIDMappingRequests []*TNameIDMappingRequestType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingRequest"`
}

// Walk : if the WalkHandlers.XElemsNameIDMappingRequest function is not nil (ie. was set by outside code), calls it with this XElemsNameIDMappingRequest instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNameIDMappingRequest instance.
func (me *XElemsNameIDMappingRequest) Walk() (err error) {
	if fn := WalkHandlers.XElemsNameIDMappingRequest; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingRequests {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TNameIDMappingResponseType defines type NameIDMappingResponseType
type TNameIDMappingResponseType struct {
	TStatusResponseType
	saml.XElemNameID
	saml.XElemEncryptedID
}

// Walk : if the WalkHandlers.TNameIDMappingResponseType function is not nil (ie. was set by outside code), calls it with this TNameIDMappingResponseType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TNameIDMappingResponseType instance.
func (me *TNameIDMappingResponseType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDMappingResponseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatusResponseType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNameIDMappingResponse defines element NameIDMappingResponse
type XElemNameIDMappingResponse struct {
	NameIDMappingResponse *TNameIDMappingResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingResponse"`
}

// Walk : if the WalkHandlers.XElemNameIDMappingResponse function is not nil (ie. was set by outside code), calls it with this XElemNameIDMappingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemNameIDMappingResponse instance.
func (me *XElemNameIDMappingResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemNameIDMappingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingResponse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNameIDMappingResponse defines element NameIDMappingResponse
type XElemsNameIDMappingResponse struct {
	NameIDMappingResponses []*TNameIDMappingResponseType `xml:"urn:oasis:names:tc:SAML:2.0:protocol NameIDMappingResponse"`
}

// Walk : if the WalkHandlers.XElemsNameIDMappingResponse function is not nil (ie. was set by outside code), calls it with this XElemsNameIDMappingResponse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNameIDMappingResponse instance.
func (me *XElemsNameIDMappingResponse) Walk() (err error) {
	if fn := WalkHandlers.XElemsNameIDMappingResponse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingResponses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XElemsAssertionIDRequest    func(*XElemsAssertionIDRequest, bool) error
	TSubjectQueryAbstractType   func(*TSubjectQueryAbstractType, bool) error
	XElemsIDPList               func(*XElemsIDPList, bool) error
	XElemArtifactResponse       func(*XElemArtifactResponse, bool) error
	XElemsManageNameIDRequest   func(*XElemsManageNameIDRequest, bool) error
	XElemsTerminate             func(*XElemsTerminate, bool) error
	TLogoutRequestType          func(*TLogoutRequestType, bool) error
	TStatusCodeType             func(*TStatusCodeType, bool) error
	TAuthnQueryType             func(*TAuthnQueryType, bool) error
	XElemsIDPEntry              func(*XElemsIDPEntry, bool) error
	XElemIDPList                func(*XElemIDPList, bool) error
	XElemResponse               func(*XElemResponse, bool) error
	XElemStatus                 func(*XElemStatus, bool) error
	XElemsExtensions            func(*XElemsExtensions, bool) error
	XElemsStatusCode            func(*XElemsStatusCode, bool) error
	XElemRequestedAuthnContext  func(*XElemRequestedAuthnContext, bool) error
	XElemsAuthnRequest          func(*XElemsAuthnRequest, bool) error
	XElemArtifactResolve        func(*XElemArtifactResolve, bool) error
	XElemExtensions             func(*XElemExtensions, bool) error
	TRequestedAuthnContextType  func(*TRequestedAuthnContextType, bool) error
	XElemAttributeQuery         func(*XElemAttributeQuery, bool) error
	XElemAuthzDecisionQuery     func(*XElemAuthzDecisionQuery, bool) error
	XElemsNameIDPolicy          func(*XElemsNameIDPolicy, bool) error
	XElemArtifact               func(*XElemArtifact, bool) error
	XElemsLogoutRequest         func(*XElemsLogoutRequest, bool) error
	XElemLogoutResponse         func(*XElemLogoutResponse, bool) error
	TStatusType                 func(*TStatusType, bool) error
	XElemNameIDMappingResponse  func(*XElemNameIDMappingResponse, bool) error
	TNameIDPolicyType           func(*TNameIDPolicyType, bool) error
	XElemNameIDPolicy           func(*XElemNameIDPolicy, bool) error
	TIDPEntryType               func(*TIDPEntryType, bool) error
	XElemAuthnQuery             func(*XElemAuthnQuery, bool) error
	TAuthnRequestType           func(*TAuthnRequestType, bool) error
	XElemIDPEntry               func(*XElemIDPEntry, bool) error
	XElemsArtifactResolve       func(*XElemsArtifactResolve, bool) error
	TerminateType               func(*TerminateType, bool) error
	XElemsManageNameIDResponse  func(*XElemsManageNameIDResponse, bool) error
	XElemSessionIndex           func(*XElemSessionIndex, bool) error
	XElemsNameIDMappingResponse func(*XElemsNameIDMappingResponse, bool) error
	TAuthzDecisionQueryType     func(*TAuthzDecisionQueryType, bool) error
	TIDPListType                func(*TIDPListType, bool) error
	XElemScoping                func(*XElemScoping, bool) error
	XElemsGetComplete           func(*XElemsGetComplete, bool) error
	XElemsArtifact              func(*XElemsArtifact, bool) error
	XElemsNewEncryptedID        func(*XElemsNewEncryptedID, bool) error
	XElemsNameIDMappingRequest  func(*XElemsNameIDMappingRequest, bool) error
	TRequestAbstractType        func(*TRequestAbstractType, bool) error
	XElemManageNameIDResponse   func(*XElemManageNameIDResponse, bool) error
	XElemLogoutRequest          func(*XElemLogoutRequest, bool) error
	XCdata                      func(*XCdata, bool) error
	XElemsRequestedAuthnContext func(*XElemsRequestedAuthnContext, bool) error
	XElemsRequesterID           func(*XElemsRequesterID, bool) error
	TArtifactResolveType        func(*TArtifactResolveType, bool) error
	XElemsSessionIndex          func(*XElemsSessionIndex, bool) error
	XElemsLogoutResponse        func(*XElemsLogoutResponse, bool) error
	XElemStatusCode             func(*XElemStatusCode, bool) error
	XElemAssertionIDRequest     func(*XElemAssertionIDRequest, bool) error
	XElemSubjectQuery           func(*XElemSubjectQuery, bool) error
	XElemsAuthzDecisionQuery    func(*XElemsAuthzDecisionQuery, bool) error
	XElemNewID                  func(*XElemNewID, bool) error
	TNameIDMappingRequestType   func(*TNameIDMappingRequestType, bool) error
	XElemsStatusDetail          func(*XElemsStatusDetail, bool) error
	XElemRequesterID            func(*XElemRequesterID, bool) error
	TArtifactResponseType       func(*TArtifactResponseType, bool) error
	XElemNameIDMappingRequest   func(*XElemNameIDMappingRequest, bool) error
	TAttributeQueryType         func(*TAttributeQueryType, bool) error
	XElemsStatus                func(*XElemsStatus, bool) error
	XElemManageNameIDRequest    func(*XElemManageNameIDRequest, bool) error
	TStatusDetailType           func(*TStatusDetailType, bool) error
	TAssertionIDRequestType     func(*TAssertionIDRequestType, bool) error
	XElemsSubjectQuery          func(*XElemsSubjectQuery, bool) error
	XElemsAuthnQuery            func(*XElemsAuthnQuery, bool) error
	XElemsAttributeQuery        func(*XElemsAttributeQuery, bool) error
	XElemGetComplete            func(*XElemGetComplete, bool) error
	XElemAuthnRequest           func(*XElemAuthnRequest, bool) error
	TResponseType               func(*TResponseType, bool) error
	XElemStatusMessage          func(*XElemStatusMessage, bool) error
	TNameIDMappingResponseType  func(*TNameIDMappingResponseType, bool) error
	XElemsResponse              func(*XElemsResponse, bool) error
	XElemsStatusMessage         func(*XElemsStatusMessage, bool) error
	XElemsScoping               func(*XElemsScoping, bool) error
	TStatusResponseType         func(*TStatusResponseType, bool) error
	XElemsArtifactResponse      func(*XElemsArtifactResponse, bool) error
	XElemsNewID                 func(*XElemsNewID, bool) error
	TExtensionsType             func(*TExtensionsType, bool) error
	TScopingType                func(*TScopingType, bool) error
	XElemNewEncryptedID         func(*XElemNewEncryptedID, bool) error
	XElemTerminate              func(*XElemTerminate, bool) error
	TManageNameIDRequestType    func(*TManageNameIDRequestType, bool) error
	XElemStatusDetail           func(*XElemStatusDetail, bool) error
}
