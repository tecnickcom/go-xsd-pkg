// Package goSamlMetadata20 : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goSamlMetadata20

//	Document identifier: saml-schema-metadata-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V2.0 (March, 2005): Schema for SAML metadata, first published in SAML 2.0.

import (
	saml "github.com/miracl/go-xsd-pkg/docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd_go"
	xml "github.com/miracl/go-xsd-pkg/www.w3.org/2001/xml.xsd_go"
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xenc "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// TExtensionsType defines type ExtensionsType
type TExtensionsType struct {
	InnerXML string `xml:",innerxml"`
}

// Walk : if the WalkHandlers.TExtensionsType function is not nil (ie. was set by outside code), calls it with this TExtensionsType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TExtensionsType instance.
func (me *TExtensionsType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemExtensions defines element Extensions
type XElemExtensions struct {
	Extensions *TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Extensions"`
}

// Walk : if the WalkHandlers.XElemExtensions function is not nil (ie. was set by outside code), calls it with this XElemExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemExtensions instance.
func (me *XElemExtensions) Walk() (err error) {
	if fn := WalkHandlers.XElemExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Extensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsExtensions defines element Extensions
type XElemsExtensions struct {
	Extensionses []*TExtensionsType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Extensions"`
}

// Walk : if the WalkHandlers.XElemsExtensions function is not nil (ie. was set by outside code), calls it with this XElemsExtensions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsExtensions instance.
func (me *XElemsExtensions) Walk() (err error) {
	if fn := WalkHandlers.XElemsExtensions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Extensionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrBindingXsdtAnyURI defines attribute Binding
type XAttrBindingXsdtAnyURI struct {
	Binding xsdt.AnyURI `xml:"Binding,attr,omitempty"`
}

// XAttrLocationXsdtAnyURI defines attribute Location
type XAttrLocationXsdtAnyURI struct {
	Location xsdt.AnyURI `xml:"Location,attr,omitempty"`
}

// XAttrResponseLocationXsdtAnyURI defines attribute ResponseLocation
type XAttrResponseLocationXsdtAnyURI struct {
	ResponseLocation xsdt.AnyURI `xml:"ResponseLocation,attr,omitempty"`
}

// TEndpointType defines type EndpointType
type TEndpointType struct {
	XAttrBindingXsdtAnyURI
	XAttrLocationXsdtAnyURI
	XAttrResponseLocationXsdtAnyURI
}

// Walk : if the WalkHandlers.TEndpointType function is not nil (ie. was set by outside code), calls it with this TEndpointType instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TEndpointType instance.
func (me *TEndpointType) Walk() (err error) {
	if fn := WalkHandlers.TEndpointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSingleLogoutService defines element SingleLogoutService
type XElemsSingleLogoutService struct {
	SingleLogoutServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleLogoutService"`
}

// Walk : if the WalkHandlers.XElemsSingleLogoutService function is not nil (ie. was set by outside code), calls it with this XElemsSingleLogoutService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSingleLogoutService instance.
func (me *XElemsSingleLogoutService) Walk() (err error) {
	if fn := WalkHandlers.XElemsSingleLogoutService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SingleLogoutServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsManageNameIDService defines element ManageNameIDService
type XElemsManageNameIDService struct {
	ManageNameIDServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ManageNameIDService"`
}

// Walk : if the WalkHandlers.XElemsManageNameIDService function is not nil (ie. was set by outside code), calls it with this XElemsManageNameIDService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsManageNameIDService instance.
func (me *XElemsManageNameIDService) Walk() (err error) {
	if fn := WalkHandlers.XElemsManageNameIDService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ManageNameIDServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNameIDFormat defines element NameIDFormat
type XElemsNameIDFormat struct {
	NameIDFormats []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDFormat"`
}

// Walk : if the WalkHandlers.XElemsNameIDFormat function is not nil (ie. was set by outside code), calls it with this XElemsNameIDFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNameIDFormat instance.
func (me *XElemsNameIDFormat) Walk() (err error) {
	if fn := WalkHandlers.XElemsNameIDFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCompany defines element Company
type XElemCompany struct {
	Company xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Company"`
}

// Walk : if the WalkHandlers.XElemCompany function is not nil (ie. was set by outside code), calls it with this XElemCompany instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemCompany instance.
func (me *XElemCompany) Walk() (err error) {
	if fn := WalkHandlers.XElemCompany; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemGivenName defines element GivenName
type XElemGivenName struct {
	GivenName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata GivenName"`
}

// Walk : if the WalkHandlers.XElemGivenName function is not nil (ie. was set by outside code), calls it with this XElemGivenName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemGivenName instance.
func (me *XElemGivenName) Walk() (err error) {
	if fn := WalkHandlers.XElemGivenName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSurName defines element SurName
type XElemSurName struct {
	SurName xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata SurName"`
}

// Walk : if the WalkHandlers.XElemSurName function is not nil (ie. was set by outside code), calls it with this XElemSurName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemSurName instance.
func (me *XElemSurName) Walk() (err error) {
	if fn := WalkHandlers.XElemSurName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEmailAddress defines element EmailAddress
type XElemsEmailAddress struct {
	EmailAddresses []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata EmailAddress"`
}

// Walk : if the WalkHandlers.XElemsEmailAddress function is not nil (ie. was set by outside code), calls it with this XElemsEmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEmailAddress instance.
func (me *XElemsEmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XElemsEmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsTelephoneNumber defines element TelephoneNumber
type XElemsTelephoneNumber struct {
	TelephoneNumbers []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata TelephoneNumber"`
}

// Walk : if the WalkHandlers.XElemsTelephoneNumber function is not nil (ie. was set by outside code), calls it with this XElemsTelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsTelephoneNumber instance.
func (me *XElemsTelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XElemsTelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TContactTypeType defines type ContactTypeType
type TContactTypeType xsdt.String

// IsTechnical : Returns true if the value of this enumerated TContactTypeType is "technical".
func (me TContactTypeType) IsTechnical() bool { return me.String() == "technical" }

// IsSupport : Returns true if the value of this enumerated TContactTypeType is "support".
func (me TContactTypeType) IsSupport() bool { return me.String() == "support" }

// IsAdministrative : Returns true if the value of this enumerated TContactTypeType is "administrative".
func (me TContactTypeType) IsAdministrative() bool { return me.String() == "administrative" }

// IsBilling : Returns true if the value of this enumerated TContactTypeType is "billing".
func (me TContactTypeType) IsBilling() bool { return me.String() == "billing" }

// IsOther : Returns true if the value of this enumerated TContactTypeType is "other".
func (me TContactTypeType) IsOther() bool { return me.String() == "other" }

// Set : Since TContactTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TContactTypeType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TContactTypeType is just a simple String type, this merely returns the current string value.
func (me TContactTypeType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TContactTypeType's alias type xsdt.String.
func (me TContactTypeType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrContactTypeTContactTypeType defines attribute ContactTypeTContactTypeType
type XAttrContactTypeTContactTypeType struct {
	ContactType TContactTypeType `xml:"contactType,attr,omitempty"`
}

// TContactType defines type ContactType
type TContactType struct {
	XElemExtensions
	XElemCompany
	XElemGivenName
	XElemSurName
	XElemsEmailAddress
	XElemsTelephoneNumber
	XAttrContactTypeTContactTypeType
}

// Walk : if the WalkHandlers.TContactType function is not nil (ie. was set by outside code), calls it with this TContactType instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TContactType instance.
func (me *TContactType) Walk() (err error) {
	if fn := WalkHandlers.TContactType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemGivenName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemSurName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEmailAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsTelephoneNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemCompany.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsContactPerson defines element ContactPerson
type XElemsContactPerson struct {
	ContactPersons []*TContactType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ContactPerson"`
}

// Walk : if the WalkHandlers.XElemsContactPerson function is not nil (ie. was set by outside code), calls it with this XElemsContactPerson instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsContactPerson instance.
func (me *XElemsContactPerson) Walk() (err error) {
	if fn := WalkHandlers.XElemsContactPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactPersons {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrIDXsdtID defines attribute Id
type XAttrIDXsdtID struct {
	ID xsdt.ID `xml:"ID,attr,omitempty"`
}

// XAttrValidUntilXsdtDateTime defines attribute ValidUntil
type XAttrValidUntilXsdtDateTime struct {
	ValidUntil xsdt.DateTime `xml:"validUntil,attr,omitempty"`
}

// XAttrCacheDurationXsdtDuration defines attribute CacheDuration
type XAttrCacheDurationXsdtDuration struct {
	CacheDuration xsdt.Duration `xml:"cacheDuration,attr,omitempty"`
}

// TanyURIListType defines type anyURIListType
type TanyURIListType xsdt.String

// Values : TanyURIListType declares a String containing a whitespace-separated list of xsdt.AnyURI values. This Values() method creates and returns a slice of all elements in that list.
func (me TanyURIListType) Values() (list []xsdt.AnyURI) {
	svals := xsdt.ListValues(string(me))
	list = make([]xsdt.AnyURI, len(svals))
	for i, s := range svals {
		list[i].Set(s)
	}
	return
}

// Set : Since TanyURIListType is just a simple String type, this merely sets the current value from the specified string.
func (me *TanyURIListType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TanyURIListType is just a simple String type, this merely returns the current string value.
func (me TanyURIListType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TanyURIListType's alias type xsdt.String.
func (me TanyURIListType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrProtocolSupportEnumerationTanyURIListType defines attribute ProtocolSupportEnumerationTanyURIListType
type XAttrProtocolSupportEnumerationTanyURIListType struct {
	ProtocolSupportEnumeration TanyURIListType `xml:"protocolSupportEnumeration,attr,omitempty"`
}

// XElemsEncryptionMethod defines element EncryptionMethod
type XElemsEncryptionMethod struct {
	EncryptionMethods []xenc.TEncryptionMethodType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EncryptionMethod"`
}

// Walk : if the WalkHandlers.XElemsEncryptionMethod function is not nil (ie. was set by outside code), calls it with this XElemsEncryptionMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptionMethod instance.
func (me *XElemsEncryptionMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptionMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyTypes defines type KeyTypes
type TKeyTypes xsdt.String

// ToXsdtString : This convenience method just performs a simple type conversion to TKeyTypes's alias type xsdt.String.
func (me TKeyTypes) ToXsdtString() xsdt.String { return xsdt.String(me) }

// IsEncryption : Returns true if the value of this enumerated TKeyTypes is "encryption".
func (me TKeyTypes) IsEncryption() bool { return me.String() == "encryption" }

// IsSigning : Returns true if the value of this enumerated TKeyTypes is "signing".
func (me TKeyTypes) IsSigning() bool { return me.String() == "signing" }

// Set : Since TKeyTypes is just a simple String type, this merely sets the current value from the specified string.
func (me *TKeyTypes) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TKeyTypes is just a simple String type, this merely returns the current string value.
func (me TKeyTypes) String() string { return xsdt.String(me).String() }

// XAttrUseTKeyTypes defines attribute UseTKeyTypes
type XAttrUseTKeyTypes struct {
	Use TKeyTypes `xml:"use,attr,omitempty"`
}

// TKeyDescriptorType defines type KeyDescriptorType
type TKeyDescriptorType struct {
	ds.XElemKeyInfo
	XElemsEncryptionMethod
	XAttrUseTKeyTypes
}

// Walk : if the WalkHandlers.TKeyDescriptorType function is not nil (ie. was set by outside code), calls it with this TKeyDescriptorType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TKeyDescriptorType instance.
func (me *TKeyDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TKeyDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsEncryptionMethod.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsKeyDescriptor defines element KeyDescriptor
type XElemsKeyDescriptor struct {
	KeyDescriptors []*TKeyDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata KeyDescriptor"`
}

// Walk : if the WalkHandlers.XElemsKeyDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsKeyDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsKeyDescriptor instance.
func (me *XElemsKeyDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsKeyDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.KeyDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAnyURICdata defines XAnyURICdata
type XAnyURICdata struct {
	XCDATA xsdt.AnyURI `xml:",chardata"`
}

// TlocalizedURIType defines type localizedURIType
type TlocalizedURIType struct {
	XAnyURICdata
	xml.XAttrLang
}

// Walk : if the WalkHandlers.TlocalizedURIType function is not nil (ie. was set by outside code), calls it with this TlocalizedURIType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TlocalizedURIType instance.
func (me *TlocalizedURIType) Walk() (err error) {
	if fn := WalkHandlers.TlocalizedURIType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOrganizationURL defines element OrganizationURL
type XElemsOrganizationURL struct {
	OrganizationURLs []*TlocalizedURIType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationURL"`
}

// Walk : if the WalkHandlers.XElemsOrganizationURL function is not nil (ie. was set by outside code), calls it with this XElemsOrganizationURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOrganizationURL instance.
func (me *XElemsOrganizationURL) Walk() (err error) {
	if fn := WalkHandlers.XElemsOrganizationURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationURLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TlocalizedNameType defines type localizedNameType
type TlocalizedNameType struct {
	XCdata
	xml.XAttrLang
}

// Walk : if the WalkHandlers.TlocalizedNameType function is not nil (ie. was set by outside code), calls it with this TlocalizedNameType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TlocalizedNameType instance.
func (me *TlocalizedNameType) Walk() (err error) {
	if fn := WalkHandlers.TlocalizedNameType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOrganizationName defines element OrganizationName
type XElemsOrganizationName struct {
	OrganizationNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationName"`
}

// Walk : if the WalkHandlers.XElemsOrganizationName function is not nil (ie. was set by outside code), calls it with this XElemsOrganizationName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOrganizationName instance.
func (me *XElemsOrganizationName) Walk() (err error) {
	if fn := WalkHandlers.XElemsOrganizationName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOrganizationDisplayName defines element OrganizationDisplayName
type XElemsOrganizationDisplayName struct {
	OrganizationDisplayNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationDisplayName"`
}

// Walk : if the WalkHandlers.XElemsOrganizationDisplayName function is not nil (ie. was set by outside code), calls it with this XElemsOrganizationDisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOrganizationDisplayName instance.
func (me *XElemsOrganizationDisplayName) Walk() (err error) {
	if fn := WalkHandlers.XElemsOrganizationDisplayName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OrganizationDisplayNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TOrganizationType defines type OrganizationType
type TOrganizationType struct {
	XElemExtensions
	XElemsOrganizationName
	XElemsOrganizationDisplayName
	XElemsOrganizationURL
}

// Walk : if the WalkHandlers.TOrganizationType function is not nil (ie. was set by outside code), calls it with this TOrganizationType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TOrganizationType instance.
func (me *TOrganizationType) Walk() (err error) {
	if fn := WalkHandlers.TOrganizationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsOrganizationName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsOrganizationDisplayName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsOrganizationURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOrganization defines element Organization
type XElemOrganization struct {
	Organization *TOrganizationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Organization"`
}

// Walk : if the WalkHandlers.XElemOrganization function is not nil (ie. was set by outside code), calls it with this XElemOrganization instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemOrganization instance.
func (me *XElemOrganization) Walk() (err error) {
	if fn := WalkHandlers.XElemOrganization; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Organization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrErrorURLXsdtAnyURI defines attribute ErrorURL
type XAttrErrorURLXsdtAnyURI struct {
	ErrorURL xsdt.AnyURI `xml:"errorURL,attr,omitempty"`
}

// TRoleDescriptorType defines type RoleDescriptorType
type TRoleDescriptorType struct {
	XElemsContactPerson
	XAttrIDXsdtID
	XElemOrganization
	XAttrErrorURLXsdtAnyURI
	XAttrValidUntilXsdtDateTime
	XAttrCacheDurationXsdtDuration
	XAttrProtocolSupportEnumerationTanyURIListType
	ds.XElemSignature
	XElemExtensions
	XElemsKeyDescriptor
}

// Walk : if the WalkHandlers.TRoleDescriptorType function is not nil (ie. was set by outside code), calls it with this TRoleDescriptorType instance as the single argument. Then calls the Walk() method on 4/10 embed(s) and 0/0 field(s) belonging to this TRoleDescriptorType instance.
func (me *TRoleDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TRoleDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsKeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemOrganization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrIndexXsdtUnsignedShort defines attribute Index
type XAttrIndexXsdtUnsignedShort struct {
	Index *xsdt.UnsignedShort `xml:"index,attr,omitempty"`
}

// XAttrIsDefaultXsdtBoolean defines attribute IsDefault
type XAttrIsDefaultXsdtBoolean struct {
	IsDefault xsdt.Boolean `xml:"isDefault,attr,omitempty"`
}

// TIndexedEndpointType defines type IndexedEndpointType
type TIndexedEndpointType struct {
	TEndpointType
	XAttrIndexXsdtUnsignedShort
	XAttrIsDefaultXsdtBoolean
}

// Walk : if the WalkHandlers.TIndexedEndpointType function is not nil (ie. was set by outside code), calls it with this TIndexedEndpointType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TIndexedEndpointType instance.
func (me *TIndexedEndpointType) Walk() (err error) {
	if fn := WalkHandlers.TIndexedEndpointType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TEndpointType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsArtifactResolutionService defines element ArtifactResolutionService
type XElemsArtifactResolutionService struct {
	ArtifactResolutionServices []*TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ArtifactResolutionService"`
}

// Walk : if the WalkHandlers.XElemsArtifactResolutionService function is not nil (ie. was set by outside code), calls it with this XElemsArtifactResolutionService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsArtifactResolutionService instance.
func (me *XElemsArtifactResolutionService) Walk() (err error) {
	if fn := WalkHandlers.XElemsArtifactResolutionService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ArtifactResolutionServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSSODescriptorType defines type SSODescriptorType
type TSSODescriptorType struct {
	TRoleDescriptorType
	XElemsArtifactResolutionService
	XElemsSingleLogoutService
	XElemsManageNameIDService
	XElemsNameIDFormat
}

// Walk : if the WalkHandlers.TSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TSSODescriptorType instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TSSODescriptorType instance.
func (me *TSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsArtifactResolutionService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSingleLogoutService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsManageNameIDService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSingleSignOnService defines element SingleSignOnService
type XElemsSingleSignOnService struct {
	SingleSignOnServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleSignOnService"`
}

// Walk : if the WalkHandlers.XElemsSingleSignOnService function is not nil (ie. was set by outside code), calls it with this XElemsSingleSignOnService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSingleSignOnService instance.
func (me *XElemsSingleSignOnService) Walk() (err error) {
	if fn := WalkHandlers.XElemsSingleSignOnService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SingleSignOnServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNameIDMappingService defines element NameIDMappingService
type XElemsNameIDMappingService struct {
	NameIDMappingServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDMappingService"`
}

// Walk : if the WalkHandlers.XElemsNameIDMappingService function is not nil (ie. was set by outside code), calls it with this XElemsNameIDMappingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNameIDMappingService instance.
func (me *XElemsNameIDMappingService) Walk() (err error) {
	if fn := WalkHandlers.XElemsNameIDMappingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDMappingServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAssertionIDRequestService defines element AssertionIDRequestService
type XElemsAssertionIDRequestService struct {
	AssertionIDRequestServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionIDRequestService"`
}

// Walk : if the WalkHandlers.XElemsAssertionIDRequestService function is not nil (ie. was set by outside code), calls it with this XElemsAssertionIDRequestService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAssertionIDRequestService instance.
func (me *XElemsAssertionIDRequestService) Walk() (err error) {
	if fn := WalkHandlers.XElemsAssertionIDRequestService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionIDRequestServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeProfile defines element AttributeProfile
type XElemsAttributeProfile struct {
	AttributeProfiles []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeProfile"`
}

// Walk : if the WalkHandlers.XElemsAttributeProfile function is not nil (ie. was set by outside code), calls it with this XElemsAttributeProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeProfile instance.
func (me *XElemsAttributeProfile) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrWantAuthnRequestsSignedXsdtBoolean defines attribute WantAuthnRequestsSigned
type XAttrWantAuthnRequestsSignedXsdtBoolean struct {
	WantAuthnRequestsSigned xsdt.Boolean `xml:"WantAuthnRequestsSigned,attr,omitempty"`
}

// TIDPSSODescriptorType defines type IDPSSODescriptorType
type TIDPSSODescriptorType struct {
	XElemsAssertionIDRequestService
	XElemsAttributeProfile
	saml.XElemsAttribute
	XAttrWantAuthnRequestsSignedXsdtBoolean
	TSSODescriptorType
	XElemsSingleSignOnService
	XElemsNameIDMappingService
}

// Walk : if the WalkHandlers.TIDPSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TIDPSSODescriptorType instance as the single argument. Then calls the Walk() method on 5/7 embed(s) and 0/0 field(s) belonging to this TIDPSSODescriptorType instance.
func (me *TIDPSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TIDPSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAttributeProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TSSODescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSingleSignOnService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsNameIDMappingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsIDPSSODescriptor defines element IDPSSODescriptor
type XElemsIDPSSODescriptor struct {
	IDPSSODescriptors []*TIDPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata IDPSSODescriptor"`
}

// Walk : if the WalkHandlers.XElemsIDPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XElemsIDPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsIDPSSODescriptor instance.
func (me *XElemsIDPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsIDPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IDPSSODescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRoleDescriptor defines element RoleDescriptor
type XElemsRoleDescriptor struct {
	RoleDescriptors []*TRoleDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RoleDescriptor"`
}

// Walk : if the WalkHandlers.XElemsRoleDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsRoleDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRoleDescriptor instance.
func (me *XElemsRoleDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsRoleDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RoleDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAssertionConsumerService defines element AssertionConsumerService
type XElemsAssertionConsumerService struct {
	AssertionConsumerServices []*TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionConsumerService"`
}

// Walk : if the WalkHandlers.XElemsAssertionConsumerService function is not nil (ie. was set by outside code), calls it with this XElemsAssertionConsumerService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAssertionConsumerService instance.
func (me *XElemsAssertionConsumerService) Walk() (err error) {
	if fn := WalkHandlers.XElemsAssertionConsumerService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssertionConsumerServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsServiceDescription defines element ServiceDescription
type XElemsServiceDescription struct {
	ServiceDescriptions []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceDescription"`
}

// Walk : if the WalkHandlers.XElemsServiceDescription function is not nil (ie. was set by outside code), calls it with this XElemsServiceDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsServiceDescription instance.
func (me *XElemsServiceDescription) Walk() (err error) {
	if fn := WalkHandlers.XElemsServiceDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceDescriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrIsRequiredXsdtBoolean defines attribute IsRequired
type XAttrIsRequiredXsdtBoolean struct {
	IsRequired xsdt.Boolean `xml:"isRequired,attr,omitempty"`
}

// TRequestedAttributeType defines type RequestedAttributeType
type TRequestedAttributeType struct {
	saml.TAttributeType
	XAttrIsRequiredXsdtBoolean
}

// Walk : if the WalkHandlers.TRequestedAttributeType function is not nil (ie. was set by outside code), calls it with this TRequestedAttributeType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TRequestedAttributeType instance.
func (me *TRequestedAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TRequestedAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsRequestedAttribute defines element RequestedAttribute
type XElemsRequestedAttribute struct {
	RequestedAttributes []*TRequestedAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RequestedAttribute"`
}

// Walk : if the WalkHandlers.XElemsRequestedAttribute function is not nil (ie. was set by outside code), calls it with this XElemsRequestedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsRequestedAttribute instance.
func (me *XElemsRequestedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XElemsRequestedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RequestedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsServiceName defines element ServiceName
type XElemsServiceName struct {
	ServiceNames []*TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceName"`
}

// Walk : if the WalkHandlers.XElemsServiceName function is not nil (ie. was set by outside code), calls it with this XElemsServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsServiceName instance.
func (me *XElemsServiceName) Walk() (err error) {
	if fn := WalkHandlers.XElemsServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeConsumingServiceType defines type AttributeConsumingServiceType
type TAttributeConsumingServiceType struct {
	XElemsServiceName
	XElemsServiceDescription
	XElemsRequestedAttribute
	XAttrIndexXsdtUnsignedShort
	XAttrIsDefaultXsdtBoolean
}

// Walk : if the WalkHandlers.TAttributeConsumingServiceType function is not nil (ie. was set by outside code), calls it with this TAttributeConsumingServiceType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TAttributeConsumingServiceType instance.
func (me *TAttributeConsumingServiceType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeConsumingServiceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsServiceDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRequestedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeConsumingService defines element AttributeConsumingService
type XElemsAttributeConsumingService struct {
	AttributeConsumingServices []*TAttributeConsumingServiceType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeConsumingService"`
}

// Walk : if the WalkHandlers.XElemsAttributeConsumingService function is not nil (ie. was set by outside code), calls it with this XElemsAttributeConsumingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeConsumingService instance.
func (me *XElemsAttributeConsumingService) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeConsumingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeConsumingServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAuthnRequestsSignedXsdtBoolean defines attribute AuthnRequestsSigned
type XAttrAuthnRequestsSignedXsdtBoolean struct {
	AuthnRequestsSigned xsdt.Boolean `xml:"AuthnRequestsSigned,attr,omitempty"`
}

// XAttrWantAssertionsSignedXsdtBoolean defines attribute WantAssertionsSigned
type XAttrWantAssertionsSignedXsdtBoolean struct {
	WantAssertionsSigned xsdt.Boolean `xml:"WantAssertionsSigned,attr,omitempty"`
}

// TSPSSODescriptorType defines type SPSSODescriptorType
type TSPSSODescriptorType struct {
	XAttrAuthnRequestsSignedXsdtBoolean
	XAttrWantAssertionsSignedXsdtBoolean
	TSSODescriptorType
	XElemsAssertionConsumerService
	XElemsAttributeConsumingService
}

// Walk : if the WalkHandlers.TSPSSODescriptorType function is not nil (ie. was set by outside code), calls it with this TSPSSODescriptorType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TSPSSODescriptorType instance.
func (me *TSPSSODescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TSPSSODescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSSODescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionConsumerService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAttributeConsumingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSPSSODescriptor defines element SPSSODescriptor
type XElemsSPSSODescriptor struct {
	SPSSODescriptors []*TSPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SPSSODescriptor"`
}

// Walk : if the WalkHandlers.XElemsSPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XElemsSPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSPSSODescriptor instance.
func (me *XElemsSPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsSPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SPSSODescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnQueryService defines element AuthnQueryService
type XElemsAuthnQueryService struct {
	AuthnQueryServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnQueryService"`
}

// Walk : if the WalkHandlers.XElemsAuthnQueryService function is not nil (ie. was set by outside code), calls it with this XElemsAuthnQueryService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnQueryService instance.
func (me *XElemsAuthnQueryService) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnQueryService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnQueryServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnAuthorityDescriptorType defines type AuthnAuthorityDescriptorType
type TAuthnAuthorityDescriptorType struct {
	TRoleDescriptorType
	XElemsAuthnQueryService
	XElemsAssertionIDRequestService
	XElemsNameIDFormat
}

// Walk : if the WalkHandlers.TAuthnAuthorityDescriptorType function is not nil (ie. was set by outside code), calls it with this TAuthnAuthorityDescriptorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnAuthorityDescriptorType instance.
func (me *TAuthnAuthorityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnAuthorityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAuthnQueryService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnAuthorityDescriptor defines element AuthnAuthorityDescriptor
type XElemsAuthnAuthorityDescriptor struct {
	AuthnAuthorityDescriptors []*TAuthnAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XElemsAuthnAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsAuthnAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnAuthorityDescriptor instance.
func (me *XElemsAuthnAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnAuthorityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthzService defines element AuthzService
type XElemsAuthzService struct {
	AuthzServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthzService"`
}

// Walk : if the WalkHandlers.XElemsAuthzService function is not nil (ie. was set by outside code), calls it with this XElemsAuthzService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthzService instance.
func (me *XElemsAuthzService) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthzService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TPDPDescriptorType defines type PDPDescriptorType
type TPDPDescriptorType struct {
	TRoleDescriptorType
	XElemsAuthzService
	XElemsAssertionIDRequestService
	XElemsNameIDFormat
}

// Walk : if the WalkHandlers.TPDPDescriptorType function is not nil (ie. was set by outside code), calls it with this TPDPDescriptorType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TPDPDescriptorType instance.
func (me *TPDPDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TPDPDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAuthzService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsPDPDescriptor defines element PDPDescriptor
type XElemsPDPDescriptor struct {
	PDPDescriptors []*TPDPDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata PDPDescriptor"`
}

// Walk : if the WalkHandlers.XElemsPDPDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsPDPDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsPDPDescriptor instance.
func (me *XElemsPDPDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsPDPDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PDPDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrNamespaceXsdtAnyURI defines attribute Namespace
type XAttrNamespaceXsdtAnyURI struct {
	Namespace xsdt.AnyURI `xml:"namespace,attr,omitempty"`
}

// TAdditionalMetadataLocationType defines type AdditionalMetadataLocationType
type TAdditionalMetadataLocationType struct {
	XAnyURICdata
	XAttrNamespaceXsdtAnyURI
}

// Walk : if the WalkHandlers.TAdditionalMetadataLocationType function is not nil (ie. was set by outside code), calls it with this TAdditionalMetadataLocationType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TAdditionalMetadataLocationType instance.
func (me *TAdditionalMetadataLocationType) Walk() (err error) {
	if fn := WalkHandlers.TAdditionalMetadataLocationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAdditionalMetadataLocation defines element AdditionalMetadataLocation
type XElemsAdditionalMetadataLocation struct {
	AdditionalMetadataLocations []*TAdditionalMetadataLocationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AdditionalMetadataLocation"`
}

// Walk : if the WalkHandlers.XElemsAdditionalMetadataLocation function is not nil (ie. was set by outside code), calls it with this XElemsAdditionalMetadataLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAdditionalMetadataLocation instance.
func (me *XElemsAdditionalMetadataLocation) Walk() (err error) {
	if fn := WalkHandlers.XElemsAdditionalMetadataLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdditionalMetadataLocations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeService defines element AttributeService
type XElemsAttributeService struct {
	AttributeServices []*TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeService"`
}

// Walk : if the WalkHandlers.XElemsAttributeService function is not nil (ie. was set by outside code), calls it with this XElemsAttributeService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeService instance.
func (me *XElemsAttributeService) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeServices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeAuthorityDescriptorType defines type AttributeAuthorityDescriptorType
type TAttributeAuthorityDescriptorType struct {
	saml.XElemsAttribute
	TRoleDescriptorType
	XElemsAttributeService
	XElemsAssertionIDRequestService
	XElemsNameIDFormat
	XElemsAttributeProfile
}

// Walk : if the WalkHandlers.TAttributeAuthorityDescriptorType function is not nil (ie. was set by outside code), calls it with this TAttributeAuthorityDescriptorType instance as the single argument. Then calls the Walk() method on 5/6 embed(s) and 0/0 field(s) belonging to this TAttributeAuthorityDescriptorType instance.
func (me *TAttributeAuthorityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeAuthorityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TRoleDescriptorType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAttributeService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsNameIDFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAttributeProfile.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeAuthorityDescriptor defines element AttributeAuthorityDescriptor
type XElemsAttributeAuthorityDescriptor struct {
	AttributeAuthorityDescriptors []*TAttributeAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XElemsAttributeAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsAttributeAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeAuthorityDescriptor instance.
func (me *XElemsAttributeAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeAuthorityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TentityIDType defines type entityIDType
type TentityIDType xsdt.AnyURI

// Set : Since TentityIDType is just a simple String type, this merely sets the current value from the specified string.
func (me *TentityIDType) Set(s string) { (*xsdt.AnyURI)(me).Set(s) }

// String : Since TentityIDType is just a simple String type, this merely returns the current string value.
func (me TentityIDType) String() string { return xsdt.AnyURI(me).String() }

// ToXsdtAnyURI : This convenience method just performs a simple type conversion to TentityIDType's alias type xsdt.AnyURI.
func (me TentityIDType) ToXsdtAnyURI() xsdt.AnyURI { return xsdt.AnyURI(me) }

// XAttrEntityIDTentityIDType defines attribute EntityIDTentityIDType
type XAttrEntityIDTentityIDType struct {
	EntityID TentityIDType `xml:"entityID,attr,omitempty"`
}

// XElemsAffiliateMember defines element AffiliateMember
type XElemsAffiliateMember struct {
	AffiliateMembers []TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliateMember"`
}

// Walk : if the WalkHandlers.XElemsAffiliateMember function is not nil (ie. was set by outside code), calls it with this XElemsAffiliateMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAffiliateMember instance.
func (me *XElemsAffiliateMember) Walk() (err error) {
	if fn := WalkHandlers.XElemsAffiliateMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAffiliationOwnerIDTentityIDType defines attribute AffiliationOwnerIDTentityIDType
type XAttrAffiliationOwnerIDTentityIDType struct {
	AffiliationOwnerID TentityIDType `xml:"affiliationOwnerID,attr,omitempty"`
}

// TAffiliationDescriptorType defines type AffiliationDescriptorType
type TAffiliationDescriptorType struct {
	ds.XElemSignature
	XElemExtensions
	XElemsAffiliateMember
	XElemsKeyDescriptor
	XAttrValidUntilXsdtDateTime
	XAttrCacheDurationXsdtDuration
	XAttrIDXsdtID
	XAttrAffiliationOwnerIDTentityIDType
}

// Walk : if the WalkHandlers.TAffiliationDescriptorType function is not nil (ie. was set by outside code), calls it with this TAffiliationDescriptorType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TAffiliationDescriptorType instance.
func (me *TAffiliationDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TAffiliationDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAffiliateMember.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsKeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAffiliationDescriptor defines element AffiliationDescriptor
type XElemAffiliationDescriptor struct {
	AffiliationDescriptor *TAffiliationDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliationDescriptor"`
}

// Walk : if the WalkHandlers.XElemAffiliationDescriptor function is not nil (ie. was set by outside code), calls it with this XElemAffiliationDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAffiliationDescriptor instance.
func (me *XElemAffiliationDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemAffiliationDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AffiliationDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEntityDescriptorType defines type EntityDescriptorType
type TEntityDescriptorType struct {
	ds.XElemSignature
	XElemExtensions
	XElemsRoleDescriptor
	XElemsIDPSSODescriptor
	XElemsSPSSODescriptor
	XElemsAuthnAuthorityDescriptor
	XElemsAttributeAuthorityDescriptor
	XElemsPDPDescriptor
	XElemAffiliationDescriptor
	XElemOrganization
	XElemsContactPerson
	XElemsAdditionalMetadataLocation
	XAttrEntityIDTentityIDType
	XAttrValidUntilXsdtDateTime
	XAttrCacheDurationXsdtDuration
	XAttrIDXsdtID
}

// Walk : if the WalkHandlers.TEntityDescriptorType function is not nil (ie. was set by outside code), calls it with this TEntityDescriptorType instance as the single argument. Then calls the Walk() method on 11/16 embed(s) and 0/0 field(s) belonging to this TEntityDescriptorType instance.
func (me *TEntityDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TEntityDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemAffiliationDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsIDPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAdditionalMetadataLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsRoleDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsSPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAuthnAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsPDPDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAttributeAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemOrganization.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEntityDescriptor defines element EntityDescriptor
type XElemsEntityDescriptor struct {
	EntityDescriptors []*TEntityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
}

// Walk : if the WalkHandlers.XElemsEntityDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsEntityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEntityDescriptor instance.
func (me *XElemsEntityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsEntityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EntityDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEntitiesDescriptor defines element EntitiesDescriptor
type XElemsEntitiesDescriptor struct {
	EntitiesDescriptors []*TEntitiesDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
}

// Walk : if the WalkHandlers.XElemsEntitiesDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsEntitiesDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEntitiesDescriptor instance.
func (me *XElemsEntitiesDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsEntitiesDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrNameXsdtString defines attribute Name
type XAttrNameXsdtString struct {
	Name xsdt.String `xml:"Name,attr,omitempty"`
}

// TEntitiesDescriptorType defines type EntitiesDescriptorType
type TEntitiesDescriptorType struct {
	XAttrIDXsdtID
	XAttrNameXsdtString
	XElemsEntityDescriptor
	XElemsEntitiesDescriptor
	ds.XElemSignature
	XElemExtensions
	XAttrValidUntilXsdtDateTime
	XAttrCacheDurationXsdtDuration
}

// Walk : if the WalkHandlers.TEntitiesDescriptorType function is not nil (ie. was set by outside code), calls it with this TEntitiesDescriptorType instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TEntitiesDescriptorType instance.
func (me *TEntitiesDescriptorType) Walk() (err error) {
	if fn := WalkHandlers.TEntitiesDescriptorType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsEntityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEntitiesDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemExtensions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEntitiesDescriptor defines element EntitiesDescriptor
type XElemEntitiesDescriptor struct {
	EntitiesDescriptor *TEntitiesDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntitiesDescriptor"`
}

// Walk : if the WalkHandlers.XElemEntitiesDescriptor function is not nil (ie. was set by outside code), calls it with this XElemEntitiesDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEntitiesDescriptor instance.
func (me *XElemEntitiesDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemEntitiesDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntitiesDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEntityDescriptor defines element EntityDescriptor
type XElemEntityDescriptor struct {
	EntityDescriptor *TEntityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EntityDescriptor"`
}

// Walk : if the WalkHandlers.XElemEntityDescriptor function is not nil (ie. was set by outside code), calls it with this XElemEntityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEntityDescriptor instance.
func (me *XElemEntityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemEntityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EntityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOrganization defines element Organization
type XElemsOrganization struct {
	Organizations []*TOrganizationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata Organization"`
}

// Walk : if the WalkHandlers.XElemsOrganization function is not nil (ie. was set by outside code), calls it with this XElemsOrganization instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOrganization instance.
func (me *XElemsOrganization) Walk() (err error) {
	if fn := WalkHandlers.XElemsOrganization; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Organizations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOrganizationName defines element OrganizationName
type XElemOrganizationName struct {
	OrganizationName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationName"`
}

// Walk : if the WalkHandlers.XElemOrganizationName function is not nil (ie. was set by outside code), calls it with this XElemOrganizationName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemOrganizationName instance.
func (me *XElemOrganizationName) Walk() (err error) {
	if fn := WalkHandlers.XElemOrganizationName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOrganizationDisplayName defines element OrganizationDisplayName
type XElemOrganizationDisplayName struct {
	OrganizationDisplayName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationDisplayName"`
}

// Walk : if the WalkHandlers.XElemOrganizationDisplayName function is not nil (ie. was set by outside code), calls it with this XElemOrganizationDisplayName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemOrganizationDisplayName instance.
func (me *XElemOrganizationDisplayName) Walk() (err error) {
	if fn := WalkHandlers.XElemOrganizationDisplayName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationDisplayName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOrganizationURL defines element OrganizationURL
type XElemOrganizationURL struct {
	OrganizationURL *TlocalizedURIType `xml:"urn:oasis:names:tc:SAML:2.0:metadata OrganizationURL"`
}

// Walk : if the WalkHandlers.XElemOrganizationURL function is not nil (ie. was set by outside code), calls it with this XElemOrganizationURL instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemOrganizationURL instance.
func (me *XElemOrganizationURL) Walk() (err error) {
	if fn := WalkHandlers.XElemOrganizationURL; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OrganizationURL.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemContactPerson defines element ContactPerson
type XElemContactPerson struct {
	ContactPerson *TContactType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ContactPerson"`
}

// Walk : if the WalkHandlers.XElemContactPerson function is not nil (ie. was set by outside code), calls it with this XElemContactPerson instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemContactPerson instance.
func (me *XElemContactPerson) Walk() (err error) {
	if fn := WalkHandlers.XElemContactPerson; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactPerson.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCompany defines element Company
type XElemsCompany struct {
	Companies []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata Company"`
}

// Walk : if the WalkHandlers.XElemsCompany function is not nil (ie. was set by outside code), calls it with this XElemsCompany instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCompany instance.
func (me *XElemsCompany) Walk() (err error) {
	if fn := WalkHandlers.XElemsCompany; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsGivenName defines element GivenName
type XElemsGivenName struct {
	GivenNames []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata GivenName"`
}

// Walk : if the WalkHandlers.XElemsGivenName function is not nil (ie. was set by outside code), calls it with this XElemsGivenName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsGivenName instance.
func (me *XElemsGivenName) Walk() (err error) {
	if fn := WalkHandlers.XElemsGivenName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSurName defines element SurName
type XElemsSurName struct {
	SurNames []xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata SurName"`
}

// Walk : if the WalkHandlers.XElemsSurName function is not nil (ie. was set by outside code), calls it with this XElemsSurName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSurName instance.
func (me *XElemsSurName) Walk() (err error) {
	if fn := WalkHandlers.XElemsSurName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEmailAddress defines element EmailAddress
type XElemEmailAddress struct {
	EmailAddress xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata EmailAddress"`
}

// Walk : if the WalkHandlers.XElemEmailAddress function is not nil (ie. was set by outside code), calls it with this XElemEmailAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemEmailAddress instance.
func (me *XElemEmailAddress) Walk() (err error) {
	if fn := WalkHandlers.XElemEmailAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemTelephoneNumber defines element TelephoneNumber
type XElemTelephoneNumber struct {
	TelephoneNumber xsdt.String `xml:"urn:oasis:names:tc:SAML:2.0:metadata TelephoneNumber"`
}

// Walk : if the WalkHandlers.XElemTelephoneNumber function is not nil (ie. was set by outside code), calls it with this XElemTelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemTelephoneNumber instance.
func (me *XElemTelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XElemTelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAdditionalMetadataLocation defines element AdditionalMetadataLocation
type XElemAdditionalMetadataLocation struct {
	AdditionalMetadataLocation *TAdditionalMetadataLocationType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AdditionalMetadataLocation"`
}

// Walk : if the WalkHandlers.XElemAdditionalMetadataLocation function is not nil (ie. was set by outside code), calls it with this XElemAdditionalMetadataLocation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAdditionalMetadataLocation instance.
func (me *XElemAdditionalMetadataLocation) Walk() (err error) {
	if fn := WalkHandlers.XElemAdditionalMetadataLocation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdditionalMetadataLocation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRoleDescriptor defines element RoleDescriptor
type XElemRoleDescriptor struct {
	RoleDescriptor *TRoleDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RoleDescriptor"`
}

// Walk : if the WalkHandlers.XElemRoleDescriptor function is not nil (ie. was set by outside code), calls it with this XElemRoleDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRoleDescriptor instance.
func (me *XElemRoleDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemRoleDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RoleDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemKeyDescriptor defines element KeyDescriptor
type XElemKeyDescriptor struct {
	KeyDescriptor *TKeyDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata KeyDescriptor"`
}

// Walk : if the WalkHandlers.XElemKeyDescriptor function is not nil (ie. was set by outside code), calls it with this XElemKeyDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemKeyDescriptor instance.
func (me *XElemKeyDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemKeyDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.KeyDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptionMethod defines element EncryptionMethod
type XElemEncryptionMethod struct {
	EncryptionMethod xenc.TEncryptionMethodType `xml:"urn:oasis:names:tc:SAML:2.0:metadata EncryptionMethod"`
}

// Walk : if the WalkHandlers.XElemEncryptionMethod function is not nil (ie. was set by outside code), calls it with this XElemEncryptionMethod instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemEncryptionMethod instance.
func (me *XElemEncryptionMethod) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptionMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemArtifactResolutionService defines element ArtifactResolutionService
type XElemArtifactResolutionService struct {
	ArtifactResolutionService *TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ArtifactResolutionService"`
}

// Walk : if the WalkHandlers.XElemArtifactResolutionService function is not nil (ie. was set by outside code), calls it with this XElemArtifactResolutionService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemArtifactResolutionService instance.
func (me *XElemArtifactResolutionService) Walk() (err error) {
	if fn := WalkHandlers.XElemArtifactResolutionService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ArtifactResolutionService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSingleLogoutService defines element SingleLogoutService
type XElemSingleLogoutService struct {
	SingleLogoutService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleLogoutService"`
}

// Walk : if the WalkHandlers.XElemSingleLogoutService function is not nil (ie. was set by outside code), calls it with this XElemSingleLogoutService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSingleLogoutService instance.
func (me *XElemSingleLogoutService) Walk() (err error) {
	if fn := WalkHandlers.XElemSingleLogoutService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SingleLogoutService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemManageNameIDService defines element ManageNameIDService
type XElemManageNameIDService struct {
	ManageNameIDService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ManageNameIDService"`
}

// Walk : if the WalkHandlers.XElemManageNameIDService function is not nil (ie. was set by outside code), calls it with this XElemManageNameIDService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemManageNameIDService instance.
func (me *XElemManageNameIDService) Walk() (err error) {
	if fn := WalkHandlers.XElemManageNameIDService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ManageNameIDService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNameIDFormat defines element NameIDFormat
type XElemNameIDFormat struct {
	NameIDFormat xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDFormat"`
}

// Walk : if the WalkHandlers.XElemNameIDFormat function is not nil (ie. was set by outside code), calls it with this XElemNameIDFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemNameIDFormat instance.
func (me *XElemNameIDFormat) Walk() (err error) {
	if fn := WalkHandlers.XElemNameIDFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemIDPSSODescriptor defines element IDPSSODescriptor
type XElemIDPSSODescriptor struct {
	IDPSSODescriptor *TIDPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata IDPSSODescriptor"`
}

// Walk : if the WalkHandlers.XElemIDPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XElemIDPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemIDPSSODescriptor instance.
func (me *XElemIDPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemIDPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IDPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSingleSignOnService defines element SingleSignOnService
type XElemSingleSignOnService struct {
	SingleSignOnService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SingleSignOnService"`
}

// Walk : if the WalkHandlers.XElemSingleSignOnService function is not nil (ie. was set by outside code), calls it with this XElemSingleSignOnService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSingleSignOnService instance.
func (me *XElemSingleSignOnService) Walk() (err error) {
	if fn := WalkHandlers.XElemSingleSignOnService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SingleSignOnService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNameIDMappingService defines element NameIDMappingService
type XElemNameIDMappingService struct {
	NameIDMappingService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata NameIDMappingService"`
}

// Walk : if the WalkHandlers.XElemNameIDMappingService function is not nil (ie. was set by outside code), calls it with this XElemNameIDMappingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemNameIDMappingService instance.
func (me *XElemNameIDMappingService) Walk() (err error) {
	if fn := WalkHandlers.XElemNameIDMappingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameIDMappingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAssertionIDRequestService defines element AssertionIDRequestService
type XElemAssertionIDRequestService struct {
	AssertionIDRequestService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionIDRequestService"`
}

// Walk : if the WalkHandlers.XElemAssertionIDRequestService function is not nil (ie. was set by outside code), calls it with this XElemAssertionIDRequestService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAssertionIDRequestService instance.
func (me *XElemAssertionIDRequestService) Walk() (err error) {
	if fn := WalkHandlers.XElemAssertionIDRequestService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionIDRequestService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeProfile defines element AttributeProfile
type XElemAttributeProfile struct {
	AttributeProfile xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeProfile"`
}

// Walk : if the WalkHandlers.XElemAttributeProfile function is not nil (ie. was set by outside code), calls it with this XElemAttributeProfile instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAttributeProfile instance.
func (me *XElemAttributeProfile) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeProfile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSPSSODescriptor defines element SPSSODescriptor
type XElemSPSSODescriptor struct {
	SPSSODescriptor *TSPSSODescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata SPSSODescriptor"`
}

// Walk : if the WalkHandlers.XElemSPSSODescriptor function is not nil (ie. was set by outside code), calls it with this XElemSPSSODescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSPSSODescriptor instance.
func (me *XElemSPSSODescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemSPSSODescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SPSSODescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAssertionConsumerService defines element AssertionConsumerService
type XElemAssertionConsumerService struct {
	AssertionConsumerService *TIndexedEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AssertionConsumerService"`
}

// Walk : if the WalkHandlers.XElemAssertionConsumerService function is not nil (ie. was set by outside code), calls it with this XElemAssertionConsumerService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAssertionConsumerService instance.
func (me *XElemAssertionConsumerService) Walk() (err error) {
	if fn := WalkHandlers.XElemAssertionConsumerService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssertionConsumerService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeConsumingService defines element AttributeConsumingService
type XElemAttributeConsumingService struct {
	AttributeConsumingService *TAttributeConsumingServiceType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeConsumingService"`
}

// Walk : if the WalkHandlers.XElemAttributeConsumingService function is not nil (ie. was set by outside code), calls it with this XElemAttributeConsumingService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAttributeConsumingService instance.
func (me *XElemAttributeConsumingService) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeConsumingService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeConsumingService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemServiceName defines element ServiceName
type XElemServiceName struct {
	ServiceName *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceName"`
}

// Walk : if the WalkHandlers.XElemServiceName function is not nil (ie. was set by outside code), calls it with this XElemServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemServiceName instance.
func (me *XElemServiceName) Walk() (err error) {
	if fn := WalkHandlers.XElemServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemServiceDescription defines element ServiceDescription
type XElemServiceDescription struct {
	ServiceDescription *TlocalizedNameType `xml:"urn:oasis:names:tc:SAML:2.0:metadata ServiceDescription"`
}

// Walk : if the WalkHandlers.XElemServiceDescription function is not nil (ie. was set by outside code), calls it with this XElemServiceDescription instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemServiceDescription instance.
func (me *XElemServiceDescription) Walk() (err error) {
	if fn := WalkHandlers.XElemServiceDescription; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceDescription.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemRequestedAttribute defines element RequestedAttribute
type XElemRequestedAttribute struct {
	RequestedAttribute *TRequestedAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:metadata RequestedAttribute"`
}

// Walk : if the WalkHandlers.XElemRequestedAttribute function is not nil (ie. was set by outside code), calls it with this XElemRequestedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemRequestedAttribute instance.
func (me *XElemRequestedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XElemRequestedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RequestedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnAuthorityDescriptor defines element AuthnAuthorityDescriptor
type XElemAuthnAuthorityDescriptor struct {
	AuthnAuthorityDescriptor *TAuthnAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XElemAuthnAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XElemAuthnAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthnAuthorityDescriptor instance.
func (me *XElemAuthnAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnQueryService defines element AuthnQueryService
type XElemAuthnQueryService struct {
	AuthnQueryService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthnQueryService"`
}

// Walk : if the WalkHandlers.XElemAuthnQueryService function is not nil (ie. was set by outside code), calls it with this XElemAuthnQueryService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthnQueryService instance.
func (me *XElemAuthnQueryService) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnQueryService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnQueryService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemPDPDescriptor defines element PDPDescriptor
type XElemPDPDescriptor struct {
	PDPDescriptor *TPDPDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata PDPDescriptor"`
}

// Walk : if the WalkHandlers.XElemPDPDescriptor function is not nil (ie. was set by outside code), calls it with this XElemPDPDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemPDPDescriptor instance.
func (me *XElemPDPDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemPDPDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PDPDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthzService defines element AuthzService
type XElemAuthzService struct {
	AuthzService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AuthzService"`
}

// Walk : if the WalkHandlers.XElemAuthzService function is not nil (ie. was set by outside code), calls it with this XElemAuthzService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthzService instance.
func (me *XElemAuthzService) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthzService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeAuthorityDescriptor defines element AttributeAuthorityDescriptor
type XElemAttributeAuthorityDescriptor struct {
	AttributeAuthorityDescriptor *TAttributeAuthorityDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeAuthorityDescriptor"`
}

// Walk : if the WalkHandlers.XElemAttributeAuthorityDescriptor function is not nil (ie. was set by outside code), calls it with this XElemAttributeAuthorityDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAttributeAuthorityDescriptor instance.
func (me *XElemAttributeAuthorityDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeAuthorityDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeAuthorityDescriptor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeService defines element AttributeService
type XElemAttributeService struct {
	AttributeService *TEndpointType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AttributeService"`
}

// Walk : if the WalkHandlers.XElemAttributeService function is not nil (ie. was set by outside code), calls it with this XElemAttributeService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAttributeService instance.
func (me *XElemAttributeService) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAffiliationDescriptor defines element AffiliationDescriptor
type XElemsAffiliationDescriptor struct {
	AffiliationDescriptors []*TAffiliationDescriptorType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliationDescriptor"`
}

// Walk : if the WalkHandlers.XElemsAffiliationDescriptor function is not nil (ie. was set by outside code), calls it with this XElemsAffiliationDescriptor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAffiliationDescriptor instance.
func (me *XElemsAffiliationDescriptor) Walk() (err error) {
	if fn := WalkHandlers.XElemsAffiliationDescriptor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AffiliationDescriptors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAffiliateMember defines element AffiliateMember
type XElemAffiliateMember struct {
	AffiliateMember TentityIDType `xml:"urn:oasis:names:tc:SAML:2.0:metadata AffiliateMember"`
}

// Walk : if the WalkHandlers.XElemAffiliateMember function is not nil (ie. was set by outside code), calls it with this XElemAffiliateMember instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAffiliateMember instance.
func (me *XElemAffiliateMember) Walk() (err error) {
	if fn := WalkHandlers.XElemAffiliateMember; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 102 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers Provides 102 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	XElemsOrganizationName             func(*XElemsOrganizationName, bool) error
	TRoleDescriptorType                func(*TRoleDescriptorType, bool) error
	TSPSSODescriptorType               func(*TSPSSODescriptorType, bool) error
	XElemsAdditionalMetadataLocation   func(*XElemsAdditionalMetadataLocation, bool) error
	XElemsEntityDescriptor             func(*XElemsEntityDescriptor, bool) error
	XElemSPSSODescriptor               func(*XElemSPSSODescriptor, bool) error
	XElemSingleSignOnService           func(*XElemSingleSignOnService, bool) error
	XElemsExtensions                   func(*XElemsExtensions, bool) error
	XElemsNameIDFormat                 func(*XElemsNameIDFormat, bool) error
	XElemCompany                       func(*XElemCompany, bool) error
	TKeyDescriptorType                 func(*TKeyDescriptorType, bool) error
	XElemsServiceDescription           func(*XElemsServiceDescription, bool) error
	TAuthnAuthorityDescriptorType      func(*TAuthnAuthorityDescriptorType, bool) error
	XElemsCompany                      func(*XElemsCompany, bool) error
	XElemsAffiliationDescriptor        func(*XElemsAffiliationDescriptor, bool) error
	TEndpointType                      func(*TEndpointType, bool) error
	XElemsContactPerson                func(*XElemsContactPerson, bool) error
	XElemsArtifactResolutionService    func(*XElemsArtifactResolutionService, bool) error
	XElemsIDPSSODescriptor             func(*XElemsIDPSSODescriptor, bool) error
	XElemsPDPDescriptor                func(*XElemsPDPDescriptor, bool) error
	XElemOrganizationName              func(*XElemOrganizationName, bool) error
	XElemEncryptionMethod              func(*XElemEncryptionMethod, bool) error
	XElemsKeyDescriptor                func(*XElemsKeyDescriptor, bool) error
	XElemsNameIDMappingService         func(*XElemsNameIDMappingService, bool) error
	XElemsRoleDescriptor               func(*XElemsRoleDescriptor, bool) error
	TAttributeConsumingServiceType     func(*TAttributeConsumingServiceType, bool) error
	XElemContactPerson                 func(*XElemContactPerson, bool) error
	XElemIDPSSODescriptor              func(*XElemIDPSSODescriptor, bool) error
	TExtensionsType                    func(*TExtensionsType, bool) error
	XElemOrganization                  func(*XElemOrganization, bool) error
	TEntitiesDescriptorType            func(*TEntitiesDescriptorType, bool) error
	XElemsOrganization                 func(*XElemsOrganization, bool) error
	XElemAssertionIDRequestService     func(*XElemAssertionIDRequestService, bool) error
	XElemsTelephoneNumber              func(*XElemsTelephoneNumber, bool) error
	XElemsAssertionConsumerService     func(*XElemsAssertionConsumerService, bool) error
	TAffiliationDescriptorType         func(*TAffiliationDescriptorType, bool) error
	XElemOrganizationURL               func(*XElemOrganizationURL, bool) error
	XElemsGivenName                    func(*XElemsGivenName, bool) error
	XElemArtifactResolutionService     func(*XElemArtifactResolutionService, bool) error
	XElemAttributeProfile              func(*XElemAttributeProfile, bool) error
	XElemsOrganizationDisplayName      func(*XElemsOrganizationDisplayName, bool) error
	XElemsAuthnQueryService            func(*XElemsAuthnQueryService, bool) error
	XElemPDPDescriptor                 func(*XElemPDPDescriptor, bool) error
	XElemAuthzService                  func(*XElemAuthzService, bool) error
	XElemAttributeService              func(*XElemAttributeService, bool) error
	XElemsManageNameIDService          func(*XElemsManageNameIDService, bool) error
	XElemGivenName                     func(*XElemGivenName, bool) error
	TIndexedEndpointType               func(*TIndexedEndpointType, bool) error
	TIDPSSODescriptorType              func(*TIDPSSODescriptorType, bool) error
	XElemAdditionalMetadataLocation    func(*XElemAdditionalMetadataLocation, bool) error
	XElemAssertionConsumerService      func(*XElemAssertionConsumerService, bool) error
	XElemServiceName                   func(*XElemServiceName, bool) error
	XCdata                             func(*XCdata, bool) error
	XElemSurName                       func(*XElemSurName, bool) error
	XElemsEncryptionMethod             func(*XElemsEncryptionMethod, bool) error
	XElemsEntitiesDescriptor           func(*XElemsEntitiesDescriptor, bool) error
	XElemRoleDescriptor                func(*XElemRoleDescriptor, bool) error
	XElemManageNameIDService           func(*XElemManageNameIDService, bool) error
	XElemNameIDMappingService          func(*XElemNameIDMappingService, bool) error
	XElemsSingleLogoutService          func(*XElemsSingleLogoutService, bool) error
	XElemEntitiesDescriptor            func(*XElemEntitiesDescriptor, bool) error
	XElemOrganizationDisplayName       func(*XElemOrganizationDisplayName, bool) error
	XElemSingleLogoutService           func(*XElemSingleLogoutService, bool) error
	XElemAffiliateMember               func(*XElemAffiliateMember, bool) error
	TlocalizedNameType                 func(*TlocalizedNameType, bool) error
	XElemsAuthzService                 func(*XElemsAuthzService, bool) error
	XElemAffiliationDescriptor         func(*XElemAffiliationDescriptor, bool) error
	XElemAttributeConsumingService     func(*XElemAttributeConsumingService, bool) error
	XElemRequestedAttribute            func(*XElemRequestedAttribute, bool) error
	XElemsEmailAddress                 func(*XElemsEmailAddress, bool) error
	TSSODescriptorType                 func(*TSSODescriptorType, bool) error
	XElemsAffiliateMember              func(*XElemsAffiliateMember, bool) error
	XElemTelephoneNumber               func(*XElemTelephoneNumber, bool) error
	XElemNameIDFormat                  func(*XElemNameIDFormat, bool) error
	XElemAuthnQueryService             func(*XElemAuthnQueryService, bool) error
	XElemsOrganizationURL              func(*XElemsOrganizationURL, bool) error
	TOrganizationType                  func(*TOrganizationType, bool) error
	XElemsAttributeProfile             func(*XElemsAttributeProfile, bool) error
	TPDPDescriptorType                 func(*TPDPDescriptorType, bool) error
	XElemKeyDescriptor                 func(*XElemKeyDescriptor, bool) error
	XElemAuthnAuthorityDescriptor      func(*XElemAuthnAuthorityDescriptor, bool) error
	XElemsServiceName                  func(*XElemsServiceName, bool) error
	XElemsAuthnAuthorityDescriptor     func(*XElemsAuthnAuthorityDescriptor, bool) error
	TAdditionalMetadataLocationType    func(*TAdditionalMetadataLocationType, bool) error
	TAttributeAuthorityDescriptorType  func(*TAttributeAuthorityDescriptorType, bool) error
	XElemsAttributeAuthorityDescriptor func(*XElemsAttributeAuthorityDescriptor, bool) error
	XElemEmailAddress                  func(*XElemEmailAddress, bool) error
	XElemsSPSSODescriptor              func(*XElemsSPSSODescriptor, bool) error
	XElemExtensions                    func(*XElemExtensions, bool) error
	TContactType                       func(*TContactType, bool) error
	TlocalizedURIType                  func(*TlocalizedURIType, bool) error
	XElemsSingleSignOnService          func(*XElemsSingleSignOnService, bool) error
	XElemsAssertionIDRequestService    func(*XElemsAssertionIDRequestService, bool) error
	TRequestedAttributeType            func(*TRequestedAttributeType, bool) error
	XElemsAttributeConsumingService    func(*XElemsAttributeConsumingService, bool) error
	XElemsAttributeService             func(*XElemsAttributeService, bool) error
	TEntityDescriptorType              func(*TEntityDescriptorType, bool) error
	XElemEntityDescriptor              func(*XElemEntityDescriptor, bool) error
	XElemsSurName                      func(*XElemsSurName, bool) error
	XElemAttributeAuthorityDescriptor  func(*XElemAttributeAuthorityDescriptor, bool) error
	XElemsRequestedAttribute           func(*XElemsRequestedAttribute, bool) error
	XElemServiceDescription            func(*XElemServiceDescription, bool) error
}
