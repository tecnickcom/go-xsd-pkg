// Package goSamlAssertion20 : autogenerated from XSD schema and manually adjusted (Nicola Asuni - 2016-11-03)
package goSamlAssertion20

//	Document identifier: saml-schema-assertion-2.0 Location: http://docs.oasis-open.org/security/saml/v2.0/ Revision history: V1.0 (November, 2002): Initial Standard Schema. V1.1 (September, 2003): Updates within the same V1.0 namespace. V2.0 (March, 2005): New assertion schema for SAML V2.0 namespace.

import (
	ds "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xenc "github.com/miracl/go-xsd-pkg/www.w3.org/TR/2002/REC-xmlenc-core-20021210/xenc-schema.xsd_go"
	xsdt "github.com/miracl/go-xsd-pkg/xsdt"
)

// XAttrNameQualifierXsdtString defines attribute NameQualifier
type XAttrNameQualifierXsdtString struct {
	NameQualifier xsdt.String `xml:"NameQualifier,attr,omitempty"`
}

// XAttrSPNameQualifierXsdtString defines attribute SPNameQualifier
type XAttrSPNameQualifierXsdtString struct {
	SPNameQualifier xsdt.String `xml:"SPNameQualifier,attr,omitempty"`
}

// XAttsIDNameQualifiers defines XAttsIDNameQualifiers
type XAttsIDNameQualifiers struct {
	XAttrNameQualifierXsdtString
	XAttrSPNameQualifierXsdtString
}

// TBaseIDAbstractType defines type BaseIDAbstractType
type TBaseIDAbstractType struct {
	XAttsIDNameQualifiers
}

// Walk : if the WalkHandlers.TBaseIDAbstractType function is not nil (ie. was set by outside code), calls it with this TBaseIDAbstractType instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TBaseIDAbstractType instance.
func (me *TBaseIDAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TBaseIDAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsBaseID defines element BaseID
type XElemsBaseID struct {
	BaseIDs []*TBaseIDAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion BaseID"`
}

// Walk : if the WalkHandlers.XElemsBaseID function is not nil (ie. was set by outside code), calls it with this XElemsBaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsBaseID instance.
func (me *XElemsBaseID) Walk() (err error) {
	if fn := WalkHandlers.XElemsBaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BaseIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemBaseID defines element BaseID
type XElemBaseID struct {
	BaseID *TBaseIDAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion BaseID"`
}

// Walk : if the WalkHandlers.XElemBaseID function is not nil (ie. was set by outside code), calls it with this XElemBaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemBaseID instance.
func (me *XElemBaseID) Walk() (err error) {
	if fn := WalkHandlers.XElemBaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrFormatXsdtAnyURI defines attribute Format
type XAttrFormatXsdtAnyURI struct {
	Format xsdt.AnyURI `xml:"Format,attr,omitempty"`
}

// XAttrSPProvidedIDXsdtString defines attribute SPProvidedID
type XAttrSPProvidedIDXsdtString struct {
	SPProvidedID xsdt.String `xml:"SPProvidedID,attr,omitempty"`
}

// TNameIDType defines type NameIDType
type TNameIDType struct {
	XCdata
	XAttsIDNameQualifiers
	XAttrFormatXsdtAnyURI
	XAttrSPProvidedIDXsdtString
}

// Walk : if the WalkHandlers.TNameIDType function is not nil (ie. was set by outside code), calls it with this TNameIDType instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TNameIDType instance.
func (me *TNameIDType) Walk() (err error) {
	if fn := WalkHandlers.TNameIDType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemNameID defines element NameID
type XElemNameID struct {
	NameID *TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameID"`
}

// Walk : if the WalkHandlers.XElemNameID function is not nil (ie. was set by outside code), calls it with this XElemNameID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemNameID instance.
func (me *XElemNameID) Walk() (err error) {
	if fn := WalkHandlers.XElemNameID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsNameID defines element NameID
type XElemsNameID struct {
	NameIDs []*TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion NameID"`
}

// Walk : if the WalkHandlers.XElemsNameID function is not nil (ie. was set by outside code), calls it with this XElemsNameID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsNameID instance.
func (me *XElemsNameID) Walk() (err error) {
	if fn := WalkHandlers.XElemsNameID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NameIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEncryptedElementType defines type EncryptedElementType
type TEncryptedElementType struct {
	xenc.XElemsEncryptedKey
	xenc.XElemEncryptedData
}

// Walk : if the WalkHandlers.TEncryptedElementType function is not nil (ie. was set by outside code), calls it with this TEncryptedElementType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TEncryptedElementType instance.
func (me *TEncryptedElementType) Walk() (err error) {
	if fn := WalkHandlers.TEncryptedElementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptedID defines element EncryptedID
type XElemEncryptedID struct {
	EncryptedID *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedID"`
}

// Walk : if the WalkHandlers.XElemEncryptedID function is not nil (ie. was set by outside code), calls it with this XElemEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptedID instance.
func (me *XElemEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptedID defines element EncryptedID
type XElemsEncryptedID struct {
	EncryptedIDs []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedID"`
}

// Walk : if the WalkHandlers.XElemsEncryptedID function is not nil (ie. was set by outside code), calls it with this XElemsEncryptedID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptedID instance.
func (me *XElemsEncryptedID) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptedID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemIssuer defines element Issuer
type XElemIssuer struct {
	Issuer *TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Issuer"`
}

// Walk : if the WalkHandlers.XElemIssuer function is not nil (ie. was set by outside code), calls it with this XElemIssuer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemIssuer instance.
func (me *XElemIssuer) Walk() (err error) {
	if fn := WalkHandlers.XElemIssuer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Issuer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsIssuer defines element Issuer
type XElemsIssuer struct {
	Issuers []*TNameIDType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Issuer"`
}

// Walk : if the WalkHandlers.XElemsIssuer function is not nil (ie. was set by outside code), calls it with this XElemsIssuer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsIssuer instance.
func (me *XElemsIssuer) Walk() (err error) {
	if fn := WalkHandlers.XElemsIssuer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Issuers {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAssertionIDRef defines element AssertionIDRef
type XElemAssertionIDRef struct {
	AssertionIDRef xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionIDRef"`
}

// Walk : if the WalkHandlers.XElemAssertionIDRef function is not nil (ie. was set by outside code), calls it with this XElemAssertionIDRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAssertionIDRef instance.
func (me *XElemAssertionIDRef) Walk() (err error) {
	if fn := WalkHandlers.XElemAssertionIDRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAssertionIDRef defines element AssertionIDRef
type XElemsAssertionIDRef struct {
	AssertionIDRefs []xsdt.NCName `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionIDRef"`
}

// Walk : if the WalkHandlers.XElemsAssertionIDRef function is not nil (ie. was set by outside code), calls it with this XElemsAssertionIDRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAssertionIDRef instance.
func (me *XElemsAssertionIDRef) Walk() (err error) {
	if fn := WalkHandlers.XElemsAssertionIDRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAssertionURIRef defines element AssertionURIRef
type XElemAssertionURIRef struct {
	AssertionURIRef xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionURIRef"`
}

// Walk : if the WalkHandlers.XElemAssertionURIRef function is not nil (ie. was set by outside code), calls it with this XElemAssertionURIRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAssertionURIRef instance.
func (me *XElemAssertionURIRef) Walk() (err error) {
	if fn := WalkHandlers.XElemAssertionURIRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAssertionURIRef defines element AssertionURIRef
type XElemsAssertionURIRef struct {
	AssertionURIRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AssertionURIRef"`
}

// Walk : if the WalkHandlers.XElemsAssertionURIRef function is not nil (ie. was set by outside code), calls it with this XElemsAssertionURIRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAssertionURIRef instance.
func (me *XElemsAssertionURIRef) Walk() (err error) {
	if fn := WalkHandlers.XElemsAssertionURIRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TStatementAbstractType defines type StatementAbstractType
type TStatementAbstractType struct {
}

// Walk : if the WalkHandlers.TStatementAbstractType function is not nil (ie. was set by outside code), calls it with this TStatementAbstractType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TStatementAbstractType instance.
func (me *TStatementAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TStatementAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrAddressXsdtString defines attribute Address
type XAttrAddressXsdtString struct {
	Address xsdt.String `xml:"Address,attr,omitempty"`
}

// XAttrDNSNameXsdtString defines attribute DNSName
type XAttrDNSNameXsdtString struct {
	DNSName xsdt.String `xml:"DNSName,attr,omitempty"`
}

// TSubjectLocalityType defines type SubjectLocalityType
type TSubjectLocalityType struct {
	XAttrAddressXsdtString
	XAttrDNSNameXsdtString
}

// Walk : if the WalkHandlers.TSubjectLocalityType function is not nil (ie. was set by outside code), calls it with this TSubjectLocalityType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TSubjectLocalityType instance.
func (me *TSubjectLocalityType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectLocalityType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSubjectLocality defines element SubjectLocality
type XElemSubjectLocality struct {
	SubjectLocality *TSubjectLocalityType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectLocality"`
}

// Walk : if the WalkHandlers.XElemSubjectLocality function is not nil (ie. was set by outside code), calls it with this XElemSubjectLocality instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSubjectLocality instance.
func (me *XElemSubjectLocality) Walk() (err error) {
	if fn := WalkHandlers.XElemSubjectLocality; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectLocality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnContextDecl defines element AuthnContextDecl
type XElemAuthnContextDecl struct {
	AuthnContextDecl *xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDecl"`
}

// Walk : if the WalkHandlers.XElemAuthnContextDecl function is not nil (ie. was set by outside code), calls it with this XElemAuthnContextDecl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAuthnContextDecl instance.
func (me *XElemAuthnContextDecl) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnContextDecl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnContextDeclRef defines element AuthnContextDeclRef
type XElemAuthnContextDeclRef struct {
	AuthnContextDeclRef *xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDeclRef"`
}

// Walk : if the WalkHandlers.XElemAuthnContextDeclRef function is not nil (ie. was set by outside code), calls it with this XElemAuthnContextDeclRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAuthnContextDeclRef instance.
func (me *XElemAuthnContextDeclRef) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnContextDeclRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthenticatingAuthority defines element AuthenticatingAuthority
type XElemsAuthenticatingAuthority struct {
	AuthenticatingAuthorities []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthenticatingAuthority"`
}

// Walk : if the WalkHandlers.XElemsAuthenticatingAuthority function is not nil (ie. was set by outside code), calls it with this XElemsAuthenticatingAuthority instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthenticatingAuthority instance.
func (me *XElemsAuthenticatingAuthority) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthenticatingAuthority; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnContextClassRef defines element AuthnContextClassRef
type XElemAuthnContextClassRef struct {
	AuthnContextClassRef *xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextClassRef"`
}

// Walk : if the WalkHandlers.XElemAuthnContextClassRef function is not nil (ie. was set by outside code), calls it with this XElemAuthnContextClassRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAuthnContextClassRef instance.
func (me *XElemAuthnContextClassRef) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnContextClassRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAuthnContextType defines type AuthnContextType
type TAuthnContextType struct {
	XElemAuthnContextClassRef
	XElemAuthnContextDecl
	XElemAuthnContextDeclRef
	XElemsAuthenticatingAuthority
}

// Walk : if the WalkHandlers.TAuthnContextType function is not nil (ie. was set by outside code), calls it with this TAuthnContextType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAuthnContextType instance.
func (me *TAuthnContextType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnContextType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAuthenticatingAuthority.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemAuthnContextClassRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemAuthnContextDecl.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemAuthnContextDeclRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnContext defines element AuthnContext
type XElemAuthnContext struct {
	AuthnContext *TAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContext"`
}

// Walk : if the WalkHandlers.XElemAuthnContext function is not nil (ie. was set by outside code), calls it with this XElemAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthnContext instance.
func (me *XElemAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrSessionNotOnOrAfterXsdtDateTime defines attribute SessionNotOnOrAfter
type XAttrSessionNotOnOrAfterXsdtDateTime struct {
	SessionNotOnOrAfter xsdt.DateTime `xml:"SessionNotOnOrAfter,attr,omitempty"`
}

// XAttrAuthnInstantXsdtDateTime defines attribute AuthnInstant
type XAttrAuthnInstantXsdtDateTime struct {
	AuthnInstant xsdt.DateTime `xml:"AuthnInstant,attr,omitempty"`
}

// XAttrSessionIndexXsdtString defines attribute SessionIndex
type XAttrSessionIndexXsdtString struct {
	SessionIndex xsdt.String `xml:"SessionIndex,attr,omitempty"`
}

// TAuthnStatementType defines type AuthnStatementType
type TAuthnStatementType struct {
	XAttrAuthnInstantXsdtDateTime
	XAttrSessionIndexXsdtString
	TStatementAbstractType
	XElemSubjectLocality
	XElemAuthnContext
	XAttrSessionNotOnOrAfterXsdtDateTime
}

// Walk : if the WalkHandlers.TAuthnStatementType function is not nil (ie. was set by outside code), calls it with this TAuthnStatementType instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TAuthnStatementType instance.
func (me *TAuthnStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAuthnStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemSubjectLocality.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemAuthnContext.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnStatement defines element AuthnStatement
type XElemsAuthnStatement struct {
	AuthnStatements []*TAuthnStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnStatement"`
}

// Walk : if the WalkHandlers.XElemsAuthnStatement function is not nil (ie. was set by outside code), calls it with this XElemsAuthnStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnStatement instance.
func (me *XElemsAuthnStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrNotBeforeXsdtDateTime defines attribute NotBefore
type XAttrNotBeforeXsdtDateTime struct {
	NotBefore xsdt.DateTime `xml:"NotBefore,attr,omitempty"`
}

// XAttrNotOnOrAfterXsdtDateTime defines attribute NotOnOrAfter
type XAttrNotOnOrAfterXsdtDateTime struct {
	NotOnOrAfter xsdt.DateTime `xml:"NotOnOrAfter,attr,omitempty"`
}

// XAttrRecipientXsdtAnyURI defines attribute Recipient
type XAttrRecipientXsdtAnyURI struct {
	Recipient xsdt.AnyURI `xml:"Recipient,attr,omitempty"`
}

// XAttrInResponseToXsdtNCName defines attribute InResponseTo
type XAttrInResponseToXsdtNCName struct {
	InResponseTo xsdt.NCName `xml:"InResponseTo,attr,omitempty"`
}

// XAnyTypeCdata defines XAnyTypeCdata
type XAnyTypeCdata struct {
	XCDATA xsdt.AnyType `xml:",chardata"`
}

// TSubjectConfirmationDataType defines type SubjectConfirmationDataType
type TSubjectConfirmationDataType struct {
	XAttrNotBeforeXsdtDateTime
	XAttrNotOnOrAfterXsdtDateTime
	XAttrRecipientXsdtAnyURI
	XAttrInResponseToXsdtNCName
	XAttrAddressXsdtString
	XAnyTypeCdata
}

// Walk : if the WalkHandlers.TSubjectConfirmationDataType function is not nil (ie. was set by outside code), calls it with this TSubjectConfirmationDataType instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TSubjectConfirmationDataType instance.
func (me *TSubjectConfirmationDataType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectConfirmationDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSubjectConfirmationData defines element SubjectConfirmationData
type XElemSubjectConfirmationData struct {
	SubjectConfirmationData *TSubjectConfirmationDataType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmationData"`
}

// Walk : if the WalkHandlers.XElemSubjectConfirmationData function is not nil (ie. was set by outside code), calls it with this XElemSubjectConfirmationData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSubjectConfirmationData instance.
func (me *XElemSubjectConfirmationData) Walk() (err error) {
	if fn := WalkHandlers.XElemSubjectConfirmationData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectConfirmationData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrMethodXsdtAnyURI defines attribute Method
type XAttrMethodXsdtAnyURI struct {
	Method xsdt.AnyURI `xml:"Method,attr,omitempty"`
}

// TSubjectConfirmationType defines type SubjectConfirmationType
type TSubjectConfirmationType struct {
	XAttrMethodXsdtAnyURI
	XElemBaseID
	XElemNameID
	XElemEncryptedID
	XElemSubjectConfirmationData
}

// Walk : if the WalkHandlers.TSubjectConfirmationType function is not nil (ie. was set by outside code), calls it with this TSubjectConfirmationType instance as the single argument. Then calls the Walk() method on 4/5 embed(s) and 0/0 field(s) belonging to this TSubjectConfirmationType instance.
func (me *TSubjectConfirmationType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectConfirmationType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemSubjectConfirmationData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemBaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemNameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSubjectConfirmation defines element SubjectConfirmation
type XElemsSubjectConfirmation struct {
	SubjectConfirmations []*TSubjectConfirmationType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmation"`
}

// Walk : if the WalkHandlers.XElemsSubjectConfirmation function is not nil (ie. was set by outside code), calls it with this XElemsSubjectConfirmation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSubjectConfirmation instance.
func (me *XElemsSubjectConfirmation) Walk() (err error) {
	if fn := WalkHandlers.XElemsSubjectConfirmation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectConfirmations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TSubjectType defines type SubjectType
type TSubjectType struct {
	XElemBaseID
	XElemNameID
	XElemEncryptedID
	XElemsSubjectConfirmation
}

// Walk : if the WalkHandlers.TSubjectType function is not nil (ie. was set by outside code), calls it with this TSubjectType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TSubjectType instance.
func (me *TSubjectType) Walk() (err error) {
	if fn := WalkHandlers.TSubjectType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsSubjectConfirmation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemBaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemNameID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemEncryptedID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSubject defines element Subject
type XElemSubject struct {
	Subject *TSubjectType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Subject"`
}

// Walk : if the WalkHandlers.XElemSubject function is not nil (ie. was set by outside code), calls it with this XElemSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSubject instance.
func (me *XElemSubject) Walk() (err error) {
	if fn := WalkHandlers.XElemSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Subject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAssertion defines element Assertion
type XElemsAssertion struct {
	Assertions []*TAssertionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Assertion"`
}

// Walk : if the WalkHandlers.XElemsAssertion function is not nil (ie. was set by outside code), calls it with this XElemsAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAssertion instance.
func (me *XElemsAssertion) Walk() (err error) {
	if fn := WalkHandlers.XElemsAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptedAssertion defines element EncryptedAssertion
type XElemsEncryptedAssertion struct {
	EncryptedAssertions []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAssertion"`
}

// Walk : if the WalkHandlers.XElemsEncryptedAssertion function is not nil (ie. was set by outside code), calls it with this XElemsEncryptedAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptedAssertion instance.
func (me *XElemsEncryptedAssertion) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptedAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedAssertions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAdviceType defines type AdviceType
type TAdviceType struct {
	XElemsAssertionIDRef
	XElemsAssertionURIRef
	XElemsAssertion
	XElemsEncryptedAssertion
}

// Walk : if the WalkHandlers.TAdviceType function is not nil (ie. was set by outside code), calls it with this TAdviceType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TAdviceType instance.
func (me *TAdviceType) Walk() (err error) {
	if fn := WalkHandlers.TAdviceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsEncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionIDRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionURIRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAdvice defines element Advice
type XElemAdvice struct {
	Advice *TAdviceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Advice"`
}

// Walk : if the WalkHandlers.XElemAdvice function is not nil (ie. was set by outside code), calls it with this XElemAdvice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAdvice instance.
func (me *XElemAdvice) Walk() (err error) {
	if fn := WalkHandlers.XElemAdvice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Advice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrIDXsdtID defines attribute Id
type XAttrIDXsdtID struct {
	ID xsdt.ID `xml:"ID,attr,omitempty"`
}

// XAttrIssueInstantXsdtDateTime defines attribute IssueInstant
type XAttrIssueInstantXsdtDateTime struct {
	IssueInstant xsdt.DateTime `xml:"IssueInstant,attr,omitempty"`
}

// XElemsStatement defines element Statement
type XElemsStatement struct {
	Statements []*TStatementAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Statement"`
}

// Walk : if the WalkHandlers.XElemsStatement function is not nil (ie. was set by outside code), calls it with this XElemsStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsStatement instance.
func (me *XElemsStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemsStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Statements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrNamespaceXsdtAnyURI defines attribute Namespace
type XAttrNamespaceXsdtAnyURI struct {
	Namespace xsdt.AnyURI `xml:"Namespace,attr,omitempty"`
}

// TActionType defines type ActionType
type TActionType struct {
	XCdata
	XAttrNamespaceXsdtAnyURI
}

// Walk : if the WalkHandlers.TActionType function is not nil (ie. was set by outside code), calls it with this TActionType instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TActionType instance.
func (me *TActionType) Walk() (err error) {
	if fn := WalkHandlers.TActionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAction defines element Action
type XElemsAction struct {
	Actions []*TActionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Action"`
}

// Walk : if the WalkHandlers.XElemsAction function is not nil (ie. was set by outside code), calls it with this XElemsAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAction instance.
func (me *XElemsAction) Walk() (err error) {
	if fn := WalkHandlers.XElemsAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Actions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TEvidenceType defines type EvidenceType
type TEvidenceType struct {
	XElemsAssertionIDRef
	XElemsAssertionURIRef
	XElemsAssertion
	XElemsEncryptedAssertion
}

// Walk : if the WalkHandlers.TEvidenceType function is not nil (ie. was set by outside code), calls it with this TEvidenceType instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TEvidenceType instance.
func (me *TEvidenceType) Walk() (err error) {
	if fn := WalkHandlers.TEvidenceType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsEncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionIDRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertionURIRef.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEvidence defines element Evidence
type XElemEvidence struct {
	Evidence *TEvidenceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Evidence"`
}

// Walk : if the WalkHandlers.XElemEvidence function is not nil (ie. was set by outside code), calls it with this XElemEvidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEvidence instance.
func (me *XElemEvidence) Walk() (err error) {
	if fn := WalkHandlers.XElemEvidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Evidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrResourceXsdtAnyURI defines attribute Resource
type XAttrResourceXsdtAnyURI struct {
	Resource xsdt.AnyURI `xml:"Resource,attr,omitempty"`
}

// TDecisionType defines type DecisionType
type TDecisionType xsdt.String

// IsPermit : Returns true if the value of this enumerated TDecisionType is "Permit".
func (me TDecisionType) IsPermit() bool { return me.String() == "Permit" }

// IsDeny : Returns true if the value of this enumerated TDecisionType is "Deny".
func (me TDecisionType) IsDeny() bool { return me.String() == "Deny" }

// IsIndeterminate : Returns true if the value of this enumerated TDecisionType is "Indeterminate".
func (me TDecisionType) IsIndeterminate() bool { return me.String() == "Indeterminate" }

// Set : Since TDecisionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TDecisionType) Set(s string) { (*xsdt.String)(me).Set(s) }

// String : Since TDecisionType is just a simple String type, this merely returns the current string value.
func (me TDecisionType) String() string { return xsdt.String(me).String() }

// ToXsdtString : This convenience method just performs a simple type conversion to TDecisionType's alias type xsdt.String.
func (me TDecisionType) ToXsdtString() xsdt.String { return xsdt.String(me) }

// XAttrDecisionTDecisionType defines attribute DecisionTDecisionType
type XAttrDecisionTDecisionType struct {
	Decision TDecisionType `xml:"Decision,attr,omitempty"`
}

// TAuthzDecisionStatementType defines type AuthzDecisionStatementType
type TAuthzDecisionStatementType struct {
	TStatementAbstractType
	XElemsAction
	XElemEvidence
	XAttrResourceXsdtAnyURI
	XAttrDecisionTDecisionType
}

// Walk : if the WalkHandlers.TAuthzDecisionStatementType function is not nil (ie. was set by outside code), calls it with this TAuthzDecisionStatementType instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TAuthzDecisionStatementType instance.
func (me *TAuthzDecisionStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAuthzDecisionStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemEvidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthzDecisionStatement defines element AuthzDecisionStatement
type XElemsAuthzDecisionStatement struct {
	AuthzDecisionStatements []*TAuthzDecisionStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthzDecisionStatement"`
}

// Walk : if the WalkHandlers.XElemsAuthzDecisionStatement function is not nil (ie. was set by outside code), calls it with this XElemsAuthzDecisionStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthzDecisionStatement instance.
func (me *XElemsAuthzDecisionStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthzDecisionStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthzDecisionStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeValue defines element AttributeValue
type XElemsAttributeValue struct {
	AttributeValues []xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeValue"`
}

// Walk : if the WalkHandlers.XElemsAttributeValue function is not nil (ie. was set by outside code), calls it with this XElemsAttributeValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeValue instance.
func (me *XElemsAttributeValue) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrNameXsdtString defines attribute Name
type XAttrNameXsdtString struct {
	Name xsdt.String `xml:"Name,attr,omitempty"`
}

// XAttrNameFormatXsdtAnyURI defines attribute NameFormat
type XAttrNameFormatXsdtAnyURI struct {
	NameFormat xsdt.AnyURI `xml:"NameFormat,attr,omitempty"`
}

// XAttrFriendlyNameXsdtString defines attribute FriendlyName
type XAttrFriendlyNameXsdtString struct {
	FriendlyName xsdt.String `xml:"FriendlyName,attr,omitempty"`
}

// TAttributeType defines type AttributeType
type TAttributeType struct {
	XElemsAttributeValue
	XAttrNameXsdtString
	XAttrNameFormatXsdtAnyURI
	XAttrFriendlyNameXsdtString
}

// Walk : if the WalkHandlers.TAttributeType function is not nil (ie. was set by outside code), calls it with this TAttributeType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TAttributeType instance.
func (me *TAttributeType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAttributeValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttribute defines element Attribute
type XElemsAttribute struct {
	Attributes []*TAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Attribute"`
}

// Walk : if the WalkHandlers.XElemsAttribute function is not nil (ie. was set by outside code), calls it with this XElemsAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttribute instance.
func (me *XElemsAttribute) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Attributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEncryptedAttribute defines element EncryptedAttribute
type XElemsEncryptedAttribute struct {
	EncryptedAttributes []*TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAttribute"`
}

// Walk : if the WalkHandlers.XElemsEncryptedAttribute function is not nil (ie. was set by outside code), calls it with this XElemsEncryptedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEncryptedAttribute instance.
func (me *XElemsEncryptedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XElemsEncryptedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EncryptedAttributes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAttributeStatementType defines type AttributeStatementType
type TAttributeStatementType struct {
	XElemsEncryptedAttribute
	TStatementAbstractType
	XElemsAttribute
}

// Walk : if the WalkHandlers.TAttributeStatementType function is not nil (ie. was set by outside code), calls it with this TAttributeStatementType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TAttributeStatementType instance.
func (me *TAttributeStatementType) Walk() (err error) {
	if fn := WalkHandlers.TAttributeStatementType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsEncryptedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TStatementAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAttributeStatement defines element AttributeStatement
type XElemsAttributeStatement struct {
	AttributeStatements []*TAttributeStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeStatement"`
}

// Walk : if the WalkHandlers.XElemsAttributeStatement function is not nil (ie. was set by outside code), calls it with this XElemsAttributeStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAttributeStatement instance.
func (me *XElemsAttributeStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemsAttributeStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttributeStatements {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TConditionAbstractType defines type ConditionAbstractType
type TConditionAbstractType struct {
}

// Walk : if the WalkHandlers.TConditionAbstractType function is not nil (ie. was set by outside code), calls it with this TConditionAbstractType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/0 field(s) belonging to this TConditionAbstractType instance.
func (me *TConditionAbstractType) Walk() (err error) {
	if fn := WalkHandlers.TConditionAbstractType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsCondition defines element Condition
type XElemsCondition struct {
	Conditions []*TConditionAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Condition"`
}

// Walk : if the WalkHandlers.XElemsCondition function is not nil (ie. was set by outside code), calls it with this XElemsCondition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsCondition instance.
func (me *XElemsCondition) Walk() (err error) {
	if fn := WalkHandlers.XElemsCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAudience defines element Audience
type XElemsAudience struct {
	Audiences []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Audience"`
}

// Walk : if the WalkHandlers.XElemsAudience function is not nil (ie. was set by outside code), calls it with this XElemsAudience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAudience instance.
func (me *XElemsAudience) Walk() (err error) {
	if fn := WalkHandlers.XElemsAudience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TAudienceRestrictionType defines type AudienceRestrictionType
type TAudienceRestrictionType struct {
	XElemsAudience
	TConditionAbstractType
}

// Walk : if the WalkHandlers.TAudienceRestrictionType function is not nil (ie. was set by outside code), calls it with this TAudienceRestrictionType instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TAudienceRestrictionType instance.
func (me *TAudienceRestrictionType) Walk() (err error) {
	if fn := WalkHandlers.TAudienceRestrictionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAudience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAudienceRestriction defines element AudienceRestriction
type XElemsAudienceRestriction struct {
	AudienceRestrictions []*TAudienceRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AudienceRestriction"`
}

// Walk : if the WalkHandlers.XElemsAudienceRestriction function is not nil (ie. was set by outside code), calls it with this XElemsAudienceRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAudienceRestriction instance.
func (me *XElemsAudienceRestriction) Walk() (err error) {
	if fn := WalkHandlers.XElemsAudienceRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AudienceRestrictions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TOneTimeUseType defines type OneTimeUseType
type TOneTimeUseType struct {
	TConditionAbstractType
}

// Walk : if the WalkHandlers.TOneTimeUseType function is not nil (ie. was set by outside code), calls it with this TOneTimeUseType instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TOneTimeUseType instance.
func (me *TOneTimeUseType) Walk() (err error) {
	if fn := WalkHandlers.TOneTimeUseType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsOneTimeUse defines element OneTimeUse
type XElemsOneTimeUse struct {
	OneTimeUses []*TOneTimeUseType `xml:"urn:oasis:names:tc:SAML:2.0:assertion OneTimeUse"`
}

// Walk : if the WalkHandlers.XElemsOneTimeUse function is not nil (ie. was set by outside code), calls it with this XElemsOneTimeUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsOneTimeUse instance.
func (me *XElemsOneTimeUse) Walk() (err error) {
	if fn := WalkHandlers.XElemsOneTimeUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OneTimeUses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrCountXsdtNonNegativeInteger defines attribute Count
type XAttrCountXsdtNonNegativeInteger struct {
	Count xsdt.NonNegativeInteger `xml:"Count,attr,omitempty"`
}

// TProxyRestrictionType defines type ProxyRestrictionType
type TProxyRestrictionType struct {
	TConditionAbstractType
	XElemsAudience
	XAttrCountXsdtNonNegativeInteger
}

// Walk : if the WalkHandlers.TProxyRestrictionType function is not nil (ie. was set by outside code), calls it with this TProxyRestrictionType instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TProxyRestrictionType instance.
func (me *TProxyRestrictionType) Walk() (err error) {
	if fn := WalkHandlers.TProxyRestrictionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TConditionAbstractType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAudience.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsProxyRestriction defines element ProxyRestriction
type XElemsProxyRestriction struct {
	ProxyRestrictions []*TProxyRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion ProxyRestriction"`
}

// Walk : if the WalkHandlers.XElemsProxyRestriction function is not nil (ie. was set by outside code), calls it with this XElemsProxyRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsProxyRestriction instance.
func (me *XElemsProxyRestriction) Walk() (err error) {
	if fn := WalkHandlers.XElemsProxyRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ProxyRestrictions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TConditionsType defines type ConditionsType
type TConditionsType struct {
	XElemsCondition
	XElemsAudienceRestriction
	XElemsOneTimeUse
	XElemsProxyRestriction
	XAttrNotBeforeXsdtDateTime
	XAttrNotOnOrAfterXsdtDateTime
}

// Walk : if the WalkHandlers.TConditionsType function is not nil (ie. was set by outside code), calls it with this TConditionsType instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TConditionsType instance.
func (me *TConditionsType) Walk() (err error) {
	if fn := WalkHandlers.TConditionsType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsCondition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAudienceRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsOneTimeUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsProxyRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemConditions defines element Conditions
type XElemConditions struct {
	Conditions *TConditionsType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Conditions"`
}

// Walk : if the WalkHandlers.XElemConditions function is not nil (ie. was set by outside code), calls it with this XElemConditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemConditions instance.
func (me *XElemConditions) Walk() (err error) {
	if fn := WalkHandlers.XElemConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Conditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XAttrVersionXsdtString defines attribute Version
type XAttrVersionXsdtString struct {
	Version xsdt.String `xml:"Version,attr,omitempty"`
}

// TAssertionType defines type AssertionType
type TAssertionType struct {
	XAttrVersionXsdtString
	XAttrIDXsdtID
	XAttrIssueInstantXsdtDateTime
	XElemIssuer
	ds.XElemSignature
	XElemSubject
	XElemConditions
	XElemAdvice
	XElemsStatement
	XElemsAuthnStatement
	XElemsAuthzDecisionStatement
	XElemsAttributeStatement
}

// Walk : if the WalkHandlers.TAssertionType function is not nil (ie. was set by outside code), calls it with this TAssertionType instance as the single argument. Then calls the Walk() method on 8/12 embed(s) and 0/0 field(s) belonging to this TAssertionType instance.
func (me *TAssertionType) Walk() (err error) {
	if fn := WalkHandlers.TAssertionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XElemsAuthnStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemAdvice.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAuthzDecisionStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemsAttributeStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemIssuer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XElemConditions.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAssertion defines element Assertion
type XElemAssertion struct {
	Assertion *TAssertionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Assertion"`
}

// Walk : if the WalkHandlers.XElemAssertion function is not nil (ie. was set by outside code), calls it with this XElemAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAssertion instance.
func (me *XElemAssertion) Walk() (err error) {
	if fn := WalkHandlers.XElemAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSubject defines element Subject
type XElemsSubject struct {
	Subjects []*TSubjectType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Subject"`
}

// Walk : if the WalkHandlers.XElemsSubject function is not nil (ie. was set by outside code), calls it with this XElemsSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSubject instance.
func (me *XElemsSubject) Walk() (err error) {
	if fn := WalkHandlers.XElemsSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Subjects {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemSubjectConfirmation defines element SubjectConfirmation
type XElemSubjectConfirmation struct {
	SubjectConfirmation *TSubjectConfirmationType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmation"`
}

// Walk : if the WalkHandlers.XElemSubjectConfirmation function is not nil (ie. was set by outside code), calls it with this XElemSubjectConfirmation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemSubjectConfirmation instance.
func (me *XElemSubjectConfirmation) Walk() (err error) {
	if fn := WalkHandlers.XElemSubjectConfirmation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SubjectConfirmation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSubjectConfirmationData defines element SubjectConfirmationData
type XElemsSubjectConfirmationData struct {
	SubjectConfirmationDatas []*TSubjectConfirmationDataType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectConfirmationData"`
}

// Walk : if the WalkHandlers.XElemsSubjectConfirmationData function is not nil (ie. was set by outside code), calls it with this XElemsSubjectConfirmationData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSubjectConfirmationData instance.
func (me *XElemsSubjectConfirmationData) Walk() (err error) {
	if fn := WalkHandlers.XElemsSubjectConfirmationData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectConfirmationDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsConditions defines element Conditions
type XElemsConditions struct {
	Conditionses []*TConditionsType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Conditions"`
}

// Walk : if the WalkHandlers.XElemsConditions function is not nil (ie. was set by outside code), calls it with this XElemsConditions instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsConditions instance.
func (me *XElemsConditions) Walk() (err error) {
	if fn := WalkHandlers.XElemsConditions; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Conditionses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemCondition defines element Condition
type XElemCondition struct {
	Condition *TConditionAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Condition"`
}

// Walk : if the WalkHandlers.XElemCondition function is not nil (ie. was set by outside code), calls it with this XElemCondition instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemCondition instance.
func (me *XElemCondition) Walk() (err error) {
	if fn := WalkHandlers.XElemCondition; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Condition.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAudienceRestriction defines element AudienceRestriction
type XElemAudienceRestriction struct {
	AudienceRestriction *TAudienceRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AudienceRestriction"`
}

// Walk : if the WalkHandlers.XElemAudienceRestriction function is not nil (ie. was set by outside code), calls it with this XElemAudienceRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAudienceRestriction instance.
func (me *XElemAudienceRestriction) Walk() (err error) {
	if fn := WalkHandlers.XElemAudienceRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AudienceRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAudience defines element Audience
type XElemAudience struct {
	Audience xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion Audience"`
}

// Walk : if the WalkHandlers.XElemAudience function is not nil (ie. was set by outside code), calls it with this XElemAudience instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAudience instance.
func (me *XElemAudience) Walk() (err error) {
	if fn := WalkHandlers.XElemAudience; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemOneTimeUse defines element OneTimeUse
type XElemOneTimeUse struct {
	OneTimeUse *TOneTimeUseType `xml:"urn:oasis:names:tc:SAML:2.0:assertion OneTimeUse"`
}

// Walk : if the WalkHandlers.XElemOneTimeUse function is not nil (ie. was set by outside code), calls it with this XElemOneTimeUse instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemOneTimeUse instance.
func (me *XElemOneTimeUse) Walk() (err error) {
	if fn := WalkHandlers.XElemOneTimeUse; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OneTimeUse.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemProxyRestriction defines element ProxyRestriction
type XElemProxyRestriction struct {
	ProxyRestriction *TProxyRestrictionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion ProxyRestriction"`
}

// Walk : if the WalkHandlers.XElemProxyRestriction function is not nil (ie. was set by outside code), calls it with this XElemProxyRestriction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemProxyRestriction instance.
func (me *XElemProxyRestriction) Walk() (err error) {
	if fn := WalkHandlers.XElemProxyRestriction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ProxyRestriction.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAdvice defines element Advice
type XElemsAdvice struct {
	Advices []*TAdviceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Advice"`
}

// Walk : if the WalkHandlers.XElemsAdvice function is not nil (ie. was set by outside code), calls it with this XElemsAdvice instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAdvice instance.
func (me *XElemsAdvice) Walk() (err error) {
	if fn := WalkHandlers.XElemsAdvice; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Advices {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptedAssertion defines element EncryptedAssertion
type XElemEncryptedAssertion struct {
	EncryptedAssertion *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAssertion"`
}

// Walk : if the WalkHandlers.XElemEncryptedAssertion function is not nil (ie. was set by outside code), calls it with this XElemEncryptedAssertion instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptedAssertion instance.
func (me *XElemEncryptedAssertion) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptedAssertion; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedAssertion.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemStatement defines element Statement
type XElemStatement struct {
	Statement *TStatementAbstractType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Statement"`
}

// Walk : if the WalkHandlers.XElemStatement function is not nil (ie. was set by outside code), calls it with this XElemStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemStatement instance.
func (me *XElemStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Statement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthnStatement defines element AuthnStatement
type XElemAuthnStatement struct {
	AuthnStatement *TAuthnStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnStatement"`
}

// Walk : if the WalkHandlers.XElemAuthnStatement function is not nil (ie. was set by outside code), calls it with this XElemAuthnStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthnStatement instance.
func (me *XElemAuthnStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthnStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthnStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsSubjectLocality defines element SubjectLocality
type XElemsSubjectLocality struct {
	SubjectLocalities []*TSubjectLocalityType `xml:"urn:oasis:names:tc:SAML:2.0:assertion SubjectLocality"`
}

// Walk : if the WalkHandlers.XElemsSubjectLocality function is not nil (ie. was set by outside code), calls it with this XElemsSubjectLocality instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsSubjectLocality instance.
func (me *XElemsSubjectLocality) Walk() (err error) {
	if fn := WalkHandlers.XElemsSubjectLocality; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SubjectLocalities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnContext defines element AuthnContext
type XElemsAuthnContext struct {
	AuthnContexts []*TAuthnContextType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContext"`
}

// Walk : if the WalkHandlers.XElemsAuthnContext function is not nil (ie. was set by outside code), calls it with this XElemsAuthnContext instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnContext instance.
func (me *XElemsAuthnContext) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnContext; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AuthnContexts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnContextClassRef defines element AuthnContextClassRef
type XElemsAuthnContextClassRef struct {
	AuthnContextClassRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextClassRef"`
}

// Walk : if the WalkHandlers.XElemsAuthnContextClassRef function is not nil (ie. was set by outside code), calls it with this XElemsAuthnContextClassRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnContextClassRef instance.
func (me *XElemsAuthnContextClassRef) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnContextClassRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnContextDeclRef defines element AuthnContextDeclRef
type XElemsAuthnContextDeclRef struct {
	AuthnContextDeclRefs []xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDeclRef"`
}

// Walk : if the WalkHandlers.XElemsAuthnContextDeclRef function is not nil (ie. was set by outside code), calls it with this XElemsAuthnContextDeclRef instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnContextDeclRef instance.
func (me *XElemsAuthnContextDeclRef) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnContextDeclRef; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsAuthnContextDecl defines element AuthnContextDecl
type XElemsAuthnContextDecl struct {
	AuthnContextDecls []xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthnContextDecl"`
}

// Walk : if the WalkHandlers.XElemsAuthnContextDecl function is not nil (ie. was set by outside code), calls it with this XElemsAuthnContextDecl instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsAuthnContextDecl instance.
func (me *XElemsAuthnContextDecl) Walk() (err error) {
	if fn := WalkHandlers.XElemsAuthnContextDecl; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthenticatingAuthority defines element AuthenticatingAuthority
type XElemAuthenticatingAuthority struct {
	AuthenticatingAuthority xsdt.AnyURI `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthenticatingAuthority"`
}

// Walk : if the WalkHandlers.XElemAuthenticatingAuthority function is not nil (ie. was set by outside code), calls it with this XElemAuthenticatingAuthority instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAuthenticatingAuthority instance.
func (me *XElemAuthenticatingAuthority) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthenticatingAuthority; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAuthzDecisionStatement defines element AuthzDecisionStatement
type XElemAuthzDecisionStatement struct {
	AuthzDecisionStatement *TAuthzDecisionStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AuthzDecisionStatement"`
}

// Walk : if the WalkHandlers.XElemAuthzDecisionStatement function is not nil (ie. was set by outside code), calls it with this XElemAuthzDecisionStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAuthzDecisionStatement instance.
func (me *XElemAuthzDecisionStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemAuthzDecisionStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AuthzDecisionStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAction defines element Action
type XElemAction struct {
	Action *TActionType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Action"`
}

// Walk : if the WalkHandlers.XElemAction function is not nil (ie. was set by outside code), calls it with this XElemAction instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAction instance.
func (me *XElemAction) Walk() (err error) {
	if fn := WalkHandlers.XElemAction; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Action.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemsEvidence defines element Evidence
type XElemsEvidence struct {
	Evidences []*TEvidenceType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Evidence"`
}

// Walk : if the WalkHandlers.XElemsEvidence function is not nil (ie. was set by outside code), calls it with this XElemsEvidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemsEvidence instance.
func (me *XElemsEvidence) Walk() (err error) {
	if fn := WalkHandlers.XElemsEvidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Evidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeStatement defines element AttributeStatement
type XElemAttributeStatement struct {
	AttributeStatement *TAttributeStatementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeStatement"`
}

// Walk : if the WalkHandlers.XElemAttributeStatement function is not nil (ie. was set by outside code), calls it with this XElemAttributeStatement instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAttributeStatement instance.
func (me *XElemAttributeStatement) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeStatement; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttributeStatement.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttribute defines element Attribute
type XElemAttribute struct {
	Attribute *TAttributeType `xml:"urn:oasis:names:tc:SAML:2.0:assertion Attribute"`
}

// Walk : if the WalkHandlers.XElemAttribute function is not nil (ie. was set by outside code), calls it with this XElemAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemAttribute instance.
func (me *XElemAttribute) Walk() (err error) {
	if fn := WalkHandlers.XElemAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Attribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemAttributeValue defines element AttributeValue
type XElemAttributeValue struct {
	AttributeValue xsdt.AnyType `xml:"urn:oasis:names:tc:SAML:2.0:assertion AttributeValue"`
}

// Walk : if the WalkHandlers.XElemAttributeValue function is not nil (ie. was set by outside code), calls it with this XElemAttributeValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XElemAttributeValue instance.
func (me *XElemAttributeValue) Walk() (err error) {
	if fn := WalkHandlers.XElemAttributeValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XElemEncryptedAttribute defines element EncryptedAttribute
type XElemEncryptedAttribute struct {
	EncryptedAttribute *TEncryptedElementType `xml:"urn:oasis:names:tc:SAML:2.0:assertion EncryptedAttribute"`
}

// Walk : if the WalkHandlers.XElemEncryptedAttribute function is not nil (ie. was set by outside code), calls it with this XElemEncryptedAttribute instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XElemEncryptedAttribute instance.
func (me *XElemEncryptedAttribute) Walk() (err error) {
	if fn := WalkHandlers.XElemEncryptedAttribute; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EncryptedAttribute.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// TKeyInfoConfirmationDataType defines type KeyInfoConfirmationDataType
type TKeyInfoConfirmationDataType struct {
	TSubjectConfirmationDataType
	ds.XElemsKeyInfo
}

// Walk : if the WalkHandlers.TKeyInfoConfirmationDataType function is not nil (ie. was set by outside code), calls it with this TKeyInfoConfirmationDataType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TKeyInfoConfirmationDataType instance.
func (me *TKeyInfoConfirmationDataType) Walk() (err error) {
	if fn := WalkHandlers.TKeyInfoConfirmationDataType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TSubjectConfirmationDataType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

// XCdata defines type CDATA
type XCdata struct {
	XCDATA string `xml:",chardata"`
}

// Walk : if the WalkHandlers.XCdata function is not nil (ie. was set by outside code), calls it with this XCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XCdata instance.
func (me *XCdata) Walk() (err error) {
	if fn := WalkHandlers.XCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	// WalkContinueOnError can be set to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	// If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	// WalkErrors contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	// WalkOnError is your custom error-handling function, if required.
	WalkOnError func(error)
	// WalkHandlers Provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XWalkHandlers{}
)

// XWalkHandlers provides 90 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
// If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XWalkHandlers struct {
	TEncryptedElementType         func(*TEncryptedElementType, bool) error
	XElemAuthnContextDeclRef      func(*XElemAuthnContextDeclRef, bool) error
	TAuthnStatementType           func(*TAuthnStatementType, bool) error
	XElemSubjectConfirmation      func(*XElemSubjectConfirmation, bool) error
	XElemAttributeValue           func(*XElemAttributeValue, bool) error
	XElemsEvidence                func(*XElemsEvidence, bool) error
	XElemAttributeStatement       func(*XElemAttributeStatement, bool) error
	XElemsAuthenticatingAuthority func(*XElemsAuthenticatingAuthority, bool) error
	XElemAuthnContext             func(*XElemAuthnContext, bool) error
	XElemsEncryptedAssertion      func(*XElemsEncryptedAssertion, bool) error
	TAuthzDecisionStatementType   func(*TAuthzDecisionStatementType, bool) error
	TAudienceRestrictionType      func(*TAudienceRestrictionType, bool) error
	XElemAuthenticatingAuthority  func(*XElemAuthenticatingAuthority, bool) error
	XElemsAuthzDecisionStatement  func(*XElemsAuthzDecisionStatement, bool) error
	XElemConditions               func(*XElemConditions, bool) error
	XElemsSubjectLocality         func(*XElemsSubjectLocality, bool) error
	XElemEncryptedID              func(*XElemEncryptedID, bool) error
	XElemsIssuer                  func(*XElemsIssuer, bool) error
	XElemsAssertionIDRef          func(*XElemsAssertionIDRef, bool) error
	XElemsAttributeStatement      func(*XElemsAttributeStatement, bool) error
	XElemCondition                func(*XElemCondition, bool) error
	XElemOneTimeUse               func(*XElemOneTimeUse, bool) error
	XElemAction                   func(*XElemAction, bool) error
	XElemAssertionURIRef          func(*XElemAssertionURIRef, bool) error
	TAdviceType                   func(*TAdviceType, bool) error
	TProxyRestrictionType         func(*TProxyRestrictionType, bool) error
	XElemsConditions              func(*XElemsConditions, bool) error
	XElemEncryptedAssertion       func(*XElemEncryptedAssertion, bool) error
	XElemsAuthnContextDeclRef     func(*XElemsAuthnContextDeclRef, bool) error
	XElemSubjectLocality          func(*XElemSubjectLocality, bool) error
	XElemAuthnContextDecl         func(*XElemAuthnContextDecl, bool) error
	XElemAuthnStatement           func(*XElemAuthnStatement, bool) error
	XElemsAdvice                  func(*XElemsAdvice, bool) error
	XElemsAuthnContextDecl        func(*XElemsAuthnContextDecl, bool) error
	XElemsNameID                  func(*XElemsNameID, bool) error
	TAuthnContextType             func(*TAuthnContextType, bool) error
	XElemsAuthnStatement          func(*XElemsAuthnStatement, bool) error
	TAttributeStatementType       func(*TAttributeStatementType, bool) error
	XElemsCondition               func(*XElemsCondition, bool) error
	XElemsAudienceRestriction     func(*XElemsAudienceRestriction, bool) error
	XElemAuthzDecisionStatement   func(*XElemAuthzDecisionStatement, bool) error
	XElemEncryptedAttribute       func(*XElemEncryptedAttribute, bool) error
	XElemSubjectConfirmationData  func(*XElemSubjectConfirmationData, bool) error
	XElemsSubjectConfirmationData func(*XElemsSubjectConfirmationData, bool) error
	XElemAudience                 func(*XElemAudience, bool) error
	XElemsAttribute               func(*XElemsAttribute, bool) error
	XElemsAuthnContextClassRef    func(*XElemsAuthnContextClassRef, bool) error
	TBaseIDAbstractType           func(*TBaseIDAbstractType, bool) error
	XElemAssertionIDRef           func(*XElemAssertionIDRef, bool) error
	TSubjectConfirmationType      func(*TSubjectConfirmationType, bool) error
	TSubjectType                  func(*TSubjectType, bool) error
	XElemSubject                  func(*XElemSubject, bool) error
	TAttributeType                func(*TAttributeType, bool) error
	XElemsEncryptedID             func(*XElemsEncryptedID, bool) error
	XElemsAssertionURIRef         func(*XElemsAssertionURIRef, bool) error
	XElemsStatement               func(*XElemsStatement, bool) error
	XElemsAudience                func(*XElemsAudience, bool) error
	XElemAssertion                func(*XElemAssertion, bool) error
	TStatementAbstractType        func(*TStatementAbstractType, bool) error
	XElemsSubjectConfirmation     func(*XElemsSubjectConfirmation, bool) error
	TActionType                   func(*TActionType, bool) error
	XElemsAttributeValue          func(*XElemsAttributeValue, bool) error
	XElemAudienceRestriction      func(*XElemAudienceRestriction, bool) error
	XElemsSubject                 func(*XElemsSubject, bool) error
	XElemStatement                func(*XElemStatement, bool) error
	XElemsBaseID                  func(*XElemsBaseID, bool) error
	XElemBaseID                   func(*XElemBaseID, bool) error
	TNameIDType                   func(*TNameIDType, bool) error
	TSubjectConfirmationDataType  func(*TSubjectConfirmationDataType, bool) error
	TEvidenceType                 func(*TEvidenceType, bool) error
	XElemEvidence                 func(*XElemEvidence, bool) error
	XElemsAuthnContext            func(*XElemsAuthnContext, bool) error
	XElemNameID                   func(*XElemNameID, bool) error
	XElemsAssertion               func(*XElemsAssertion, bool) error
	XElemsEncryptedAttribute      func(*XElemsEncryptedAttribute, bool) error
	TConditionAbstractType        func(*TConditionAbstractType, bool) error
	XElemsOneTimeUse              func(*XElemsOneTimeUse, bool) error
	XElemProxyRestriction         func(*XElemProxyRestriction, bool) error
	TKeyInfoConfirmationDataType  func(*TKeyInfoConfirmationDataType, bool) error
	XElemIssuer                   func(*XElemIssuer, bool) error
	TSubjectLocalityType          func(*TSubjectLocalityType, bool) error
	XElemAdvice                   func(*XElemAdvice, bool) error
	XElemsAction                  func(*XElemsAction, bool) error
	XElemsProxyRestriction        func(*XElemsProxyRestriction, bool) error
	TConditionsType               func(*TConditionsType, bool) error
	XCdata                        func(*XCdata, bool) error
	XElemAttribute                func(*XElemAttribute, bool) error
	XElemAuthnContextClassRef     func(*XElemAuthnContextClassRef, bool) error
	TOneTimeUseType               func(*TOneTimeUseType, bool) error
	TAssertionType                func(*TAssertionType, bool) error
}
